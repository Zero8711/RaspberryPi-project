
rp_projectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800d010  0800d010  0001d010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4bc  0800d4bc  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4bc  0800d4bc  0001d4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4c4  0800d4c4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4c4  0800d4c4  0001d4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4c8  0800d4c8  0001d4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800d4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001f4c  200002cc  200002cc  000202cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002218  20002218  000202cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc7f  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a80  00000000  00000000  0003bf7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  000410a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ef9  00000000  00000000  000425d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1aa  00000000  00000000  0006c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2f08  00000000  00000000  0008767b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017a583  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007278  00000000  00000000  0017a5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cff8 	.word	0x0800cff8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d0 	.word	0x200002d0
 80001ec:	0800cff8 	.word	0x0800cff8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <delay_us+0x30>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 8000ede:	bf00      	nop
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <delay_us+0x30>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3f9      	bcc.n	8000ee0 <delay_us+0x14>
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000558 	.word	0x20000558

08000f00 <Set_Pin_Output>:

uint8_t RH_integral, RH_decimal, T_integral, T_decimal;
uint8_t CheckSUM, Presence = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 ff96 	bl	8002e60 <HAL_GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 ff78 	bl	8002e60 <HAL_GPIO_Init>
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DHT11_Start>:

void DHT11_Start(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_0);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <DHT11_Start+0x38>)
 8000f80:	f7ff ffbe 	bl	8000f00 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2101      	movs	r1, #1
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <DHT11_Start+0x38>)
 8000f8a:	f002 f92d 	bl	80031e8 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f000 ff40 	bl	8001e14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <DHT11_Start+0x38>)
 8000f9a:	f002 f925 	bl	80031e8 <HAL_GPIO_WritePin>
	delay_us(20);
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f7ff ff94 	bl	8000ecc <delay_us>
	Set_Pin_Input(GPIOA, GPIO_PIN_0);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DHT11_Start+0x38>)
 8000fa8:	f7ff ffc8 	bl	8000f3c <Set_Pin_Input>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <DHT11_check_Response>:

uint8_t DHT11_check_Response(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8000fbe:	2028      	movs	r0, #40	; 0x28
 8000fc0:	f7ff ff84 	bl	8000ecc <delay_us>
	if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <DHT11_check_Response+0x58>)
 8000fc8:	f002 f8f6 	bl	80031b8 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10e      	bne.n	8000ff0 <DHT11_check_Response+0x3c>
	{
		delay_us(80);
 8000fd2:	2050      	movs	r0, #80	; 0x50
 8000fd4:	f7ff ff7a 	bl	8000ecc <delay_us>
		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))) Response = 1;
 8000fd8:	2101      	movs	r1, #1
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <DHT11_check_Response+0x58>)
 8000fdc:	f002 f8ec 	bl	80031b8 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <DHT11_check_Response+0x38>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <DHT11_check_Response+0x3c>
		else Response = -1;
 8000fec:	23ff      	movs	r3, #255	; 0xff
 8000fee:	71fb      	strb	r3, [r7, #7]
	}
	while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8000ff0:	bf00      	nop
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <DHT11_check_Response+0x58>)
 8000ff6:	f002 f8df 	bl	80031b8 <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f8      	bne.n	8000ff2 <DHT11_check_Response+0x3e>

	return Response;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	uint8_t data;
	for(uint8_t i = 0; i < 8; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	e025      	b.n	8001068 <DHT11_Read+0x58>
	{
		while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 800101c:	bf00      	nop
 800101e:	2101      	movs	r1, #1
 8001020:	4815      	ldr	r0, [pc, #84]	; (8001078 <DHT11_Read+0x68>)
 8001022:	f002 f8c9 	bl	80031b8 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f8      	beq.n	800101e <DHT11_Read+0xe>
		delay_us(40);
 800102c:	2028      	movs	r0, #40	; 0x28
 800102e:	f7ff ff4d 	bl	8000ecc <delay_us>
		if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 8001032:	2101      	movs	r1, #1
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <DHT11_Read+0x68>)
 8001036:	f002 f8bf 	bl	80031b8 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <DHT11_Read+0x38>
		{
			data = (data << 1);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e004      	b.n	8001052 <DHT11_Read+0x42>
		}
		else data = (data << 1) + 1;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]

		while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8001052:	bf00      	nop
 8001054:	2101      	movs	r1, #1
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <DHT11_Read+0x68>)
 8001058:	f002 f8ae 	bl	80031b8 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f8      	bne.n	8001054 <DHT11_Read+0x44>
	for(uint8_t i = 0; i < 8; i++)
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	3301      	adds	r3, #1
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d9d6      	bls.n	800101c <DHT11_Read+0xc>
	}
	return data;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020000 	.word	0x40020000

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0bc      	sub	sp, #240	; 0xf0
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fe55 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f911 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 faa5 	bl	80015d8 <MX_GPIO_Init>
  MX_ETH_Init();
 800108e:	f000 f9db 	bl	8001448 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001092:	f000 fa77 	bl	8001584 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001096:	f000 f973 	bl	8001380 <MX_ADC1_Init>
  MX_TIM1_Init();
 800109a:	f000 fa23 	bl	80014e4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800109e:	f008 fadf 	bl	8009660 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  uint32_t flame;
//  uint32_t cds;
  uint32_t ADC_DATA[2];
  char state[200] = {0};
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	22c4      	movs	r2, #196	; 0xc4
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 f829 	bl	800a104 <memset>
  int flame, cds;
  char *data = "26:42:0:255L";
 80010b2:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <main+0x1ec>)
 80010b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  int datalen = strlen(data);
 80010b8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80010bc:	f7ff f898 	bl	80001f0 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  float fcds;
  int icds;
  HAL_TIM_Base_Start(&htim1);
 80010c6:	4869      	ldr	r0, [pc, #420]	; (800126c <main+0x1f0>)
 80010c8:	f004 f80c 	bl	80050e4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int PinNum = GPIO_PIN_1;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  DHT11_Start();
 80010d2:	f7ff ff51 	bl	8000f78 <DHT11_Start>
	  DHT11_check_Response();
 80010d6:	f7ff ff6d 	bl	8000fb4 <DHT11_check_Response>
	  RH_integral = DHT11_Read();
 80010da:	f7ff ff99 	bl	8001010 <DHT11_Read>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b63      	ldr	r3, [pc, #396]	; (8001270 <main+0x1f4>)
 80010e4:	701a      	strb	r2, [r3, #0]
	  RH_decimal = DHT11_Read();
 80010e6:	f7ff ff93 	bl	8001010 <DHT11_Read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <main+0x1f8>)
 80010f0:	701a      	strb	r2, [r3, #0]
	  T_integral = DHT11_Read();
 80010f2:	f7ff ff8d 	bl	8001010 <DHT11_Read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <main+0x1fc>)
 80010fc:	701a      	strb	r2, [r3, #0]
	  T_decimal = DHT11_Read();
 80010fe:	f7ff ff87 	bl	8001010 <DHT11_Read>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <main+0x200>)
 8001108:	701a      	strb	r2, [r3, #0]
	  CheckSUM = DHT11_Read();
 800110a:	f7ff ff81 	bl	8001010 <DHT11_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <main+0x204>)
 8001114:	701a      	strb	r2, [r3, #0]

	  if((RH_integral + RH_decimal + T_integral + T_decimal) == CheckSUM)
 8001116:	4b56      	ldr	r3, [pc, #344]	; (8001270 <main+0x1f4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <main+0x1f8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4413      	add	r3, r2
 8001122:	4a55      	ldr	r2, [pc, #340]	; (8001278 <main+0x1fc>)
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <main+0x200>)
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	4413      	add	r3, r2
 800112e:	4a54      	ldr	r2, [pc, #336]	; (8001280 <main+0x204>)
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	4293      	cmp	r3, r2
 8001134:	d112      	bne.n	800115c <main+0xe0>
	  {
	  	  printf("TEMPERATURE : %d.%d C\n", T_integral, T_decimal);
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <main+0x1fc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <main+0x200>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4850      	ldr	r0, [pc, #320]	; (8001284 <main+0x208>)
 8001144:	f009 fc50 	bl	800a9e8 <iprintf>
	  	  printf("HUMIDITY : 	%d.%d %%\n", RH_integral, RH_decimal);
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <main+0x1f4>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <main+0x1f8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <main+0x20c>)
 8001156:	f009 fc47 	bl	800a9e8 <iprintf>
 800115a:	e002      	b.n	8001162 <main+0xe6>
	  }

	  else
	  {
	  	  printf("DHT11 ERROR!!\n");
 800115c:	484b      	ldr	r0, [pc, #300]	; (800128c <main+0x210>)
 800115e:	f009 fcc9 	bl	800aaf4 <puts>
	  }

	  HAL_ADC_Start(&hadc1);
 8001162:	484b      	ldr	r0, [pc, #300]	; (8001290 <main+0x214>)
 8001164:	f000 febe 	bl	8001ee4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001168:	210a      	movs	r1, #10
 800116a:	4849      	ldr	r0, [pc, #292]	; (8001290 <main+0x214>)
 800116c:	f000 ff8c 	bl	8002088 <HAL_ADC_PollForConversion>
	  ADC_DATA[0] = HAL_ADC_GetValue(&hadc1);
 8001170:	4847      	ldr	r0, [pc, #284]	; (8001290 <main+0x214>)
 8001172:	f001 f814 	bl	800219e <HAL_ADC_GetValue>
 8001176:	4603      	mov	r3, r0
 8001178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	  HAL_ADC_Start(&hadc1);
 800117c:	4844      	ldr	r0, [pc, #272]	; (8001290 <main+0x214>)
 800117e:	f000 feb1 	bl	8001ee4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001182:	210a      	movs	r1, #10
 8001184:	4842      	ldr	r0, [pc, #264]	; (8001290 <main+0x214>)
 8001186:	f000 ff7f 	bl	8002088 <HAL_ADC_PollForConversion>
	  ADC_DATA[1] = HAL_ADC_GetValue(&hadc1);
 800118a:	4841      	ldr	r0, [pc, #260]	; (8001290 <main+0x214>)
 800118c:	f001 f807 	bl	800219e <HAL_ADC_GetValue>
 8001190:	4603      	mov	r3, r0
 8001192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  fcds = (float)ADC_DATA[1];
 8001196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	  fcds = (fcds-850)/3245*100;
 80011a6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80011aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001294 <main+0x218>
 80011ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80011b2:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001298 <main+0x21c>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800129c <main+0x220>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	  icds = (int)fcds;
 80011c6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	  if(icds < 0)
 80011d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da02      	bge.n	80011e4 <main+0x168>
	  {
		  icds = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  }
	  if(ADC_DATA[0] > 50)
 80011e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011e8:	2b32      	cmp	r3, #50	; 0x32
 80011ea:	d90b      	bls.n	8001204 <main+0x188>
	  {
		  HAL_GPIO_WritePin(GPIOB, PinNum, 1);
 80011ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	482a      	ldr	r0, [pc, #168]	; (80012a0 <main+0x224>)
 80011f8:	f001 fff6 	bl	80031e8 <HAL_GPIO_WritePin>
		  flame = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001202:	e00a      	b.n	800121a <main+0x19e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, PinNum, 0);
 8001204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	4619      	mov	r1, r3
 800120e:	4824      	ldr	r0, [pc, #144]	; (80012a0 <main+0x224>)
 8001210:	f001 ffea 	bl	80031e8 <HAL_GPIO_WritePin>
		  flame = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  }

	  printf("cds value : %d\n\r", icds);
 800121a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <main+0x228>)
 8001220:	f009 fbe2 	bl	800a9e8 <iprintf>
	  sprintf(state, "%d:%d:%d:%dL", T_integral, RH_integral, flame, icds);
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <main+0x1fc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <main+0x1f4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4638      	mov	r0, r7
 8001232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	460b      	mov	r3, r1
 8001240:	4919      	ldr	r1, [pc, #100]	; (80012a8 <main+0x22c>)
 8001242:	f009 fc5f 	bl	800ab04 <siprintf>
	  CDC_Transmit_FS(state, strlen(state)); //데이터 전송할때 사용
 8001246:	463b      	mov	r3, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffd1 	bl	80001f0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	463b      	mov	r3, r7
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f008 fac0 	bl	80097dc <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f000 fdd8 	bl	8001e14 <HAL_Delay>
  {
 8001264:	e732      	b.n	80010cc <main+0x50>
 8001266:	bf00      	nop
 8001268:	0800d010 	.word	0x0800d010
 800126c:	20000558 	.word	0x20000558
 8001270:	200005e4 	.word	0x200005e4
 8001274:	200005e5 	.word	0x200005e5
 8001278:	200005e6 	.word	0x200005e6
 800127c:	200005e7 	.word	0x200005e7
 8001280:	200005e8 	.word	0x200005e8
 8001284:	0800d020 	.word	0x0800d020
 8001288:	0800d038 	.word	0x0800d038
 800128c:	0800d050 	.word	0x0800d050
 8001290:	20000460 	.word	0x20000460
 8001294:	44548000 	.word	0x44548000
 8001298:	454ad000 	.word	0x454ad000
 800129c:	42c80000 	.word	0x42c80000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	0800d060 	.word	0x0800d060
 80012a8:	0800d074 	.word	0x0800d074

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	; 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f008 ff22 	bl	800a104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <SystemClock_Config+0xcc>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemClock_Config+0xcc>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <SystemClock_Config+0xd0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <SystemClock_Config+0xd0>)
 80012f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <SystemClock_Config+0xd0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800130c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001320:	23a8      	movs	r3, #168	; 0xa8
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001328:	2307      	movs	r3, #7
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f003 f9ef 	bl	8004714 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800133c:	f000 fa20 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2105      	movs	r1, #5
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fc50 	bl	8004c04 <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800136a:	f000 fa09 	bl	8001780 <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3750      	adds	r7, #80	; 0x50
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_ADC1_Init+0xbc>)
 8001394:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <MX_ADC1_Init+0xc0>)
 8001396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_ADC1_Init+0xbc>)
 800139a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800139e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_ADC1_Init+0xbc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <MX_ADC1_Init+0xbc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <MX_ADC1_Init+0xbc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_ADC1_Init+0xbc>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_ADC1_Init+0xbc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_ADC1_Init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_ADC1_Init+0xbc>)
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <MX_ADC1_Init+0xc4>)
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_ADC1_Init+0xbc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_ADC1_Init+0xbc>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_ADC1_Init+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_ADC1_Init+0xbc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e6:	4815      	ldr	r0, [pc, #84]	; (800143c <MX_ADC1_Init+0xbc>)
 80013e8:	f000 fd38 	bl	8001e5c <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80013f2:	f000 f9c5 	bl	8001780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013f6:	2303      	movs	r3, #3
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_ADC1_Init+0xbc>)
 8001408:	f000 fed6 	bl	80021b8 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001412:	f000 f9b5 	bl	8001780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001416:	2304      	movs	r3, #4
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_ADC1_Init+0xbc>)
 8001424:	f000 fec8 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800142e:	f000 f9a7 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000460 	.word	0x20000460
 8001440:	40012000 	.word	0x40012000
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_ETH_Init+0x84>)
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <MX_ETH_Init+0x88>)
 8001450:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_ETH_Init+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_ETH_Init+0x8c>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_ETH_Init+0x8c>)
 8001460:	22e1      	movs	r2, #225	; 0xe1
 8001462:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_ETH_Init+0x8c>)
 8001466:	2200      	movs	r2, #0
 8001468:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_ETH_Init+0x8c>)
 800146c:	2200      	movs	r2, #0
 800146e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_ETH_Init+0x8c>)
 8001472:	2200      	movs	r2, #0
 8001474:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_ETH_Init+0x84>)
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <MX_ETH_Init+0x8c>)
 800147a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_ETH_Init+0x84>)
 800147e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001482:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_ETH_Init+0x84>)
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <MX_ETH_Init+0x90>)
 8001488:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_ETH_Init+0x84>)
 800148c:	4a13      	ldr	r2, [pc, #76]	; (80014dc <MX_ETH_Init+0x94>)
 800148e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_ETH_Init+0x84>)
 8001492:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001496:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_ETH_Init+0x84>)
 800149a:	f001 f9cd 	bl	8002838 <HAL_ETH_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80014a4:	f000 f96c 	bl	8001780 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80014a8:	2238      	movs	r2, #56	; 0x38
 80014aa:	2100      	movs	r1, #0
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_ETH_Init+0x98>)
 80014ae:	f008 fe29 	bl	800a104 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_ETH_Init+0x98>)
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_ETH_Init+0x98>)
 80014ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80014be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_ETH_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200004a8 	.word	0x200004a8
 80014d0:	40028000 	.word	0x40028000
 80014d4:	200005ec 	.word	0x200005ec
 80014d8:	200003c0 	.word	0x200003c0
 80014dc:	20000320 	.word	0x20000320
 80014e0:	200002e8 	.word	0x200002e8

080014e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_TIM1_Init+0x98>)
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <MX_TIM1_Init+0x9c>)
 8001504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM1_Init+0x98>)
 8001508:	22a7      	movs	r2, #167	; 0xa7
 800150a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM1_Init+0x98>)
 8001514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM1_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_TIM1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_TIM1_Init+0x98>)
 800152e:	f003 fd89 	bl	8005044 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001538:	f000 f922 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM1_Init+0x98>)
 800154a:	f003 fe33 	bl	80051b4 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001554:	f000 f914 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM1_Init+0x98>)
 8001566:	f004 f827 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001570:	f000 f906 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000558 	.word	0x20000558
 8001580:	40010000 	.word	0x40010000

08001584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART3_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015bc:	f004 f878 	bl	80056b0 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8db 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200005a0 	.word	0x200005a0
 80015d4:	40004800 	.word	0x40004800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b55      	ldr	r3, [pc, #340]	; (8001748 <MX_GPIO_Init+0x170>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a54      	ldr	r2, [pc, #336]	; (8001748 <MX_GPIO_Init+0x170>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <MX_GPIO_Init+0x170>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <MX_GPIO_Init+0x170>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <MX_GPIO_Init+0x170>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <MX_GPIO_Init+0x170>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <MX_GPIO_Init+0x170>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a46      	ldr	r2, [pc, #280]	; (8001748 <MX_GPIO_Init+0x170>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <MX_GPIO_Init+0x170>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <MX_GPIO_Init+0x170>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <MX_GPIO_Init+0x170>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <MX_GPIO_Init+0x170>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <MX_GPIO_Init+0x170>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a38      	ldr	r2, [pc, #224]	; (8001748 <MX_GPIO_Init+0x170>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <MX_GPIO_Init+0x170>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MX_GPIO_Init+0x170>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a31      	ldr	r2, [pc, #196]	; (8001748 <MX_GPIO_Init+0x170>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MX_GPIO_Init+0x170>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2101      	movs	r1, #1
 800169a:	482c      	ldr	r0, [pc, #176]	; (800174c <MX_GPIO_Init+0x174>)
 800169c:	f001 fda4 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f244 0183 	movw	r1, #16515	; 0x4083
 80016a6:	482a      	ldr	r0, [pc, #168]	; (8001750 <MX_GPIO_Init+0x178>)
 80016a8:	f001 fd9e 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	4828      	ldr	r0, [pc, #160]	; (8001754 <MX_GPIO_Init+0x17c>)
 80016b2:	f001 fd99 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4822      	ldr	r0, [pc, #136]	; (8001758 <MX_GPIO_Init+0x180>)
 80016ce:	f001 fbc7 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_GPIO_Init+0x174>)
 80016ea:	f001 fbb9 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin;
 80016ee:	f244 0383 	movw	r3, #16515	; 0x4083
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <MX_GPIO_Init+0x178>)
 8001708:	f001 fbaa 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001724:	f001 fb9c 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_GPIO_Init+0x17c>)
 800173c:	f001 fb90 	bl	8002e60 <HAL_GPIO_Init>

}
 8001740:	bf00      	nop
 8001742:	3730      	adds	r7, #48	; 0x30
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40021800 	.word	0x40021800
 8001758:	40020800 	.word	0x40020800

0800175c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001764:	1d39      	adds	r1, r7, #4
 8001766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176a:	2201      	movs	r2, #1
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <__io_putchar+0x20>)
 800176e:	f003 ffec 	bl	800574a <HAL_UART_Transmit>

  return ch;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200005a0 	.word	0x200005a0

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_MspInit+0x4c>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_MspInit+0x4c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x7c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d127      	bne.n	800184e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_ADC_MspInit+0x80>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_ADC_MspInit+0x80>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_ADC_MspInit+0x80>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_ADC_MspInit+0x80>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_ADC_MspInit+0x80>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_ADC_MspInit+0x80>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001836:	2318      	movs	r3, #24
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183a:	2303      	movs	r3, #3
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_ADC_MspInit+0x84>)
 800184a:	f001 fb09 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012000 	.word	0x40012000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a55      	ldr	r2, [pc, #340]	; (80019d8 <HAL_ETH_MspInit+0x174>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f040 80a4 	bne.w	80019d0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_ETH_MspInit+0x178>)
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	4b45      	ldr	r3, [pc, #276]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_ETH_MspInit+0x178>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a36      	ldr	r2, [pc, #216]	; (80019dc <HAL_ETH_MspInit+0x178>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_ETH_MspInit+0x178>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_ETH_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4a28      	ldr	r2, [pc, #160]	; (80019dc <HAL_ETH_MspInit+0x178>)
 800193a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_ETH_MspInit+0x178>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800194c:	2332      	movs	r3, #50	; 0x32
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195c:	230b      	movs	r3, #11
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	4619      	mov	r1, r3
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <HAL_ETH_MspInit+0x17c>)
 8001968:	f001 fa7a 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800196c:	2386      	movs	r3, #134	; 0x86
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197c:	230b      	movs	r3, #11
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <HAL_ETH_MspInit+0x180>)
 8001988:	f001 fa6a 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800198c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199e:	230b      	movs	r3, #11
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <HAL_ETH_MspInit+0x184>)
 80019aa:	f001 fa59 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c0:	230b      	movs	r3, #11
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_ETH_MspInit+0x188>)
 80019cc:	f001 fa48 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40028000 	.word	0x40028000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40021800 	.word	0x40021800

080019f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_TIM_Base_MspInit+0x3c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10d      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_TIM_Base_MspInit+0x40>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_TIM_Base_MspInit+0x40>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_TIM_Base_MspInit+0x40>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_UART_MspInit+0x84>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12c      	bne.n	8001ab0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a17      	ldr	r2, [pc, #92]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001aac:	f001 f9d8 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40004800 	.word	0x40004800
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020c00 	.word	0x40020c00

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f960 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <OTG_FS_IRQHandler+0x10>)
 8001b1e:	f001 fccc 	bl	80034ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20001adc 	.word	0x20001adc

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_kill>:

int _kill(int pid, int sig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b46:	f008 fab3 	bl	800a0b0 <__errno>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2216      	movs	r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_exit>:

void _exit (int status)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe7 	bl	8001b3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b6e:	e7fe      	b.n	8001b6e <_exit+0x12>

08001b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
	}

return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fdc9 	bl	800175c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
	}
	return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f008 fa18 	bl	800a0b0 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20030000 	.word	0x20030000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200005f4 	.word	0x200005f4
 8001cb4:	20002218 	.word	0x20002218

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d06:	f7ff ffd7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f008 f9d7 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff f9b5 	bl	800107c <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001d20:	0800d4cc 	.word	0x0800d4cc
  ldr r2, =_sbss
 8001d24:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001d28:	20002218 	.word	0x20002218

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 fd2b 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fd12 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fd43 	bl	800281e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fd0b 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	200005f8 	.word	0x200005f8

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200005f8 	.word	0x200005f8

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008

08001e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e033      	b.n	8001eda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fcae 	bl	80017dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fab4 	bl	800241c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start+0x1a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e0b2      	b.n	8002064 <HAL_ADC_Start+0x180>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d018      	beq.n	8001f46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f24:	4b52      	ldr	r3, [pc, #328]	; (8002070 <HAL_ADC_Start+0x18c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_ADC_Start+0x190>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9a      	lsrs	r2, r3, #18
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d17a      	bne.n	800204a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f023 0206 	bic.w	r2, r3, #6
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_ADC_Start+0x194>)
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d12a      	bne.n	8002020 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_ADC_Start+0x198>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d015      	beq.n	8002000 <HAL_ADC_Start+0x11c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <HAL_ADC_Start+0x19c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_Start+0x106>
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_ADC_Start+0x194>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_ADC_Start+0x1a0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d136      	bne.n	8002062 <HAL_ADC_Start+0x17e>
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_ADC_Start+0x194>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d130      	bne.n	8002062 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d129      	bne.n	8002062 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	e020      	b.n	8002062 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_ADC_Start+0x198>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11b      	bne.n	8002062 <HAL_ADC_Start+0x17e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d114      	bne.n	8002062 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e00b      	b.n	8002062 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000000 	.word	0x20000000
 8002074:	431bde83 	.word	0x431bde83
 8002078:	40012300 	.word	0x40012300
 800207c:	40012000 	.word	0x40012000
 8002080:	40012100 	.word	0x40012100
 8002084:	40012200 	.word	0x40012200

08002088 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d113      	bne.n	80020ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b4:	d10b      	bne.n	80020ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e063      	b.n	8002196 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020ce:	f7ff fe95 	bl	8001dfc <HAL_GetTick>
 80020d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d4:	e021      	b.n	800211a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d01d      	beq.n	800211a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x6c>
 80020e4:	f7ff fe8a 	bl	8001dfc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d212      	bcs.n	800211a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d00b      	beq.n	800211a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e03d      	b.n	8002196 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d1d6      	bne.n	80020d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0212 	mvn.w	r2, #18
 8002130:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d123      	bne.n	8002194 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11f      	bne.n	8002194 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1c>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e113      	b.n	80023fc <HAL_ADC_ConfigChannel+0x244>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d925      	bls.n	8002230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	3b1e      	subs	r3, #30
 80021fa:	2207      	movs	r2, #7
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	400a      	ands	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	4603      	mov	r3, r0
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4403      	add	r3, r0
 8002222:	3b1e      	subs	r3, #30
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	e022      	b.n	8002276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	2207      	movs	r2, #7
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	4603      	mov	r3, r0
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4403      	add	r3, r0
 800226c:	409a      	lsls	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b06      	cmp	r3, #6
 800227c:	d824      	bhi.n	80022c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b05      	subs	r3, #5
 8002290:	221f      	movs	r2, #31
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	400a      	ands	r2, r1
 800229e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b05      	subs	r3, #5
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
 80022c6:	e04c      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d824      	bhi.n	800231a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3b23      	subs	r3, #35	; 0x23
 80022e2:	221f      	movs	r2, #31
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43da      	mvns	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	400a      	ands	r2, r1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b23      	subs	r3, #35	; 0x23
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	e023      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b41      	subs	r3, #65	; 0x41
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b41      	subs	r3, #65	; 0x41
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_ADC_ConfigChannel+0x250>)
 8002364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_ConfigChannel+0x254>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d10f      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1d8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b12      	cmp	r3, #18
 8002376:	d10b      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_ADC_ConfigChannel+0x254>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_ADC_ConfigChannel+0x258>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x1f4>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b11      	cmp	r3, #17
 80023aa:	d122      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_ADC_ConfigChannel+0x258>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_ADC_ConfigChannel+0x25c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_ADC_ConfigChannel+0x260>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012300 	.word	0x40012300
 800240c:	40012000 	.word	0x40012000
 8002410:	10000012 	.word	0x10000012
 8002414:	20000000 	.word	0x20000000
 8002418:	431bde83 	.word	0x431bde83

0800241c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002424:	4b79      	ldr	r3, [pc, #484]	; (800260c <ADC_Init+0x1f0>)
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <ADC_Init+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e00f      	b.n	800251a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0202 	bic.w	r2, r2, #2
 8002528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e1b      	ldrb	r3, [r3, #24]
 8002534:	005a      	lsls	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	3b01      	subs	r3, #1
 8002574:	035a      	lsls	r2, r3, #13
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	051a      	lsls	r2, r3, #20
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d2:	025a      	lsls	r2, r3, #9
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	029a      	lsls	r2, r3, #10
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	0f000001 	.word	0x0f000001

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	; (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff3e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff8e 	bl	8002708 <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff31 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06c      	b.n	8002924 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2223      	movs	r2, #35	; 0x23
 8002858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff f801 	bl	8001864 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_ETH_Init+0xf4>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_ETH_Init+0xf4>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_ETH_Init+0xf4>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_ETH_Init+0xf8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a2b      	ldr	r2, [pc, #172]	; (8002930 <HAL_ETH_Init+0xf8>)
 8002884:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002888:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_ETH_Init+0xf8>)
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4927      	ldr	r1, [pc, #156]	; (8002930 <HAL_ETH_Init+0xf8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_ETH_Init+0xf8>)
 800289a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b4:	f7ff faa2 	bl	8001dfc <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028ba:	e011      	b.n	80028e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028bc:	f7ff fa9e 	bl	8001dfc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028ca:	d909      	bls.n	80028e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2204      	movs	r2, #4
 80028d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	22e0      	movs	r2, #224	; 0xe0
 80028d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e021      	b.n	8002924 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e4      	bne.n	80028bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f944 	bl	8002b80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9eb 	bl	8002cd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa41 	bl	8002d86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9a9 	bl	8002c64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2210      	movs	r2, #16
 800291e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800

08002934 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <ETH_SetMACConfig+0x134>)
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7c1b      	ldrb	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <ETH_SetMACConfig+0x28>
 8002956:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800295a:	e000      	b.n	800295e <ETH_SetMACConfig+0x2a>
 800295c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	7c5b      	ldrb	r3, [r3, #17]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <ETH_SetMACConfig+0x38>
 8002966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800296a:	e000      	b.n	800296e <ETH_SetMACConfig+0x3a>
 800296c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800296e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7fdb      	ldrb	r3, [r3, #31]
 800297a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800297c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002982:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	7f92      	ldrb	r2, [r2, #30]
 8002988:	2a00      	cmp	r2, #0
 800298a:	d102      	bne.n	8002992 <ETH_SetMACConfig+0x5e>
 800298c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002990:	e000      	b.n	8002994 <ETH_SetMACConfig+0x60>
 8002992:	2200      	movs	r2, #0
                        macconf->Speed |
 8002994:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7f1b      	ldrb	r3, [r3, #28]
 800299a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800299c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	d102      	bne.n	80029bc <ETH_SetMACConfig+0x88>
 80029b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ba:	e000      	b.n	80029be <ETH_SetMACConfig+0x8a>
 80029bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	7bdb      	ldrb	r3, [r3, #15]
 80029c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029d6:	4313      	orrs	r3, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f7ff fa10 	bl	8001e14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a1a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8002a20:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8002a28:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002a30:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f7ff f9df 	bl	8001e14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	ff20810f 	.word	0xff20810f

08002a6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <ETH_SetDMAConfig+0x110>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7b1b      	ldrb	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <ETH_SetDMAConfig+0x2c>
 8002a92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a96:	e000      	b.n	8002a9a <ETH_SetDMAConfig+0x2e>
 8002a98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7b5b      	ldrb	r3, [r3, #13]
 8002a9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aa0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	7f52      	ldrb	r2, [r2, #29]
 8002aa6:	2a00      	cmp	r2, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_SetDMAConfig+0x44>
 8002aaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aae:	e000      	b.n	8002ab2 <ETH_SetDMAConfig+0x46>
 8002ab0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ab2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7b9b      	ldrb	r3, [r3, #14]
 8002ab8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002aba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ac0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	7f1b      	ldrb	r3, [r3, #28]
 8002ac6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ac8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7f9b      	ldrb	r3, [r3, #30]
 8002ace:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ad0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ad6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ade:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff f986 	bl	8001e14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7ff f957 	bl	8001e14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f8de3f23 	.word	0xf8de3f23

08002b80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0a6      	sub	sp, #152	; 0x98
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fe9a 	bl	8002934 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ff08 	bl	8002a6c <ETH_SetDMAConfig>
}
 8002c5c:	bf00      	nop
 8002c5e:	3798      	adds	r7, #152	; 0x98
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3305      	adds	r3, #5
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	3204      	adds	r2, #4
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <ETH_MACAddressConfig+0x68>)
 8002c86:	4413      	add	r3, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3303      	adds	r3, #3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	061a      	lsls	r2, r3, #24
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <ETH_MACAddressConfig+0x6c>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40028040 	.word	0x40028040
 8002cd0:	40028044 	.word	0x40028044

08002cd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e03e      	b.n	8002d60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68d9      	ldr	r1, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	3206      	adds	r2, #6
 8002d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d80c      	bhi.n	8002d44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68d9      	ldr	r1, [r3, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e004      	b.n	8002d4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d9bd      	bls.n	8002ce2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d78:	611a      	str	r2, [r3, #16]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e046      	b.n	8002e22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2200      	movs	r2, #0
 8002db0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	3212      	adds	r2, #18
 8002dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d80c      	bhi.n	8002e12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e004      	b.n	8002e1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d9b5      	bls.n	8002d94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e177      	b.n	800316c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f040 8166 	bne.w	8003166 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d005      	beq.n	8002eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d130      	bne.n	8002f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee8:	2201      	movs	r2, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 0201 	and.w	r2, r3, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d017      	beq.n	8002f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d123      	bne.n	8002fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	08da      	lsrs	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3208      	adds	r2, #8
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80c0 	beq.w	8003166 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b66      	ldr	r3, [pc, #408]	; (8003184 <HAL_GPIO_Init+0x324>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a65      	ldr	r2, [pc, #404]	; (8003184 <HAL_GPIO_Init+0x324>)
 8002ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_GPIO_Init+0x324>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003002:	4a61      	ldr	r2, [pc, #388]	; (8003188 <HAL_GPIO_Init+0x328>)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a58      	ldr	r2, [pc, #352]	; (800318c <HAL_GPIO_Init+0x32c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d037      	beq.n	800309e <HAL_GPIO_Init+0x23e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_GPIO_Init+0x330>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_GPIO_Init+0x23a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_GPIO_Init+0x334>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02b      	beq.n	8003096 <HAL_GPIO_Init+0x236>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_GPIO_Init+0x338>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d025      	beq.n	8003092 <HAL_GPIO_Init+0x232>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_GPIO_Init+0x33c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <HAL_GPIO_Init+0x22e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_GPIO_Init+0x340>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_Init+0x22a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_GPIO_Init+0x344>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x226>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_GPIO_Init+0x348>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x222>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_GPIO_Init+0x34c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x21e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4f      	ldr	r2, [pc, #316]	; (80031b0 <HAL_GPIO_Init+0x350>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x21a>
 8003076:	2309      	movs	r3, #9
 8003078:	e012      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800307a:	230a      	movs	r3, #10
 800307c:	e010      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800307e:	2308      	movs	r3, #8
 8003080:	e00e      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 8003082:	2307      	movs	r3, #7
 8003084:	e00c      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 8003086:	2306      	movs	r3, #6
 8003088:	e00a      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800308a:	2305      	movs	r3, #5
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800308e:	2304      	movs	r3, #4
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x240>
 800309e:	2300      	movs	r3, #0
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b0:	4935      	ldr	r1, [pc, #212]	; (8003188 <HAL_GPIO_Init+0x328>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <HAL_GPIO_Init+0x354>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_GPIO_Init+0x354>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_GPIO_Init+0x354>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_GPIO_Init+0x354>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_GPIO_Init+0x354>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_GPIO_Init+0x354>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_GPIO_Init+0x354>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_GPIO_Init+0x354>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	f67f ae84 	bls.w	8002e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40021400 	.word	0x40021400
 80031a4:	40021800 	.word	0x40021800
 80031a8:	40021c00 	.word	0x40021c00
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e001      	b.n	80031da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
 80031f4:	4613      	mov	r3, r2
 80031f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f8:	787b      	ldrb	r3, [r7, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003204:	e003      	b.n	800320e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	619a      	str	r2, [r3, #24]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800321a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321c:	b08f      	sub	sp, #60	; 0x3c
 800321e:	af0a      	add	r7, sp, #40	; 0x28
 8003220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e10f      	b.n	800344c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f006 fc10 	bl	8009a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fef7 	bl	800605e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	687e      	ldr	r6, [r7, #4]
 8003278:	466d      	mov	r5, sp
 800327a:	f106 0410 	add.w	r4, r6, #16
 800327e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800328a:	e885 0003 	stmia.w	r5, {r0, r1}
 800328e:	1d33      	adds	r3, r6, #4
 8003290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f002 fdce 	bl	8005e34 <USB_CoreInit>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0d0      	b.n	800344c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fee5 	bl	8006080 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e04a      	b.n	8003352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	333d      	adds	r3, #61	; 0x3d
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	333c      	adds	r3, #60	; 0x3c
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	b298      	uxth	r0, r3
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	4602      	mov	r2, r0
 80032fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3340      	adds	r3, #64	; 0x40
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3348      	adds	r3, #72	; 0x48
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334c      	adds	r3, #76	; 0x4c
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3354      	adds	r3, #84	; 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3af      	bcc.n	80032bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e044      	b.n	80033ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3301      	adds	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3b5      	bcc.n	8003362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	687e      	ldr	r6, [r7, #4]
 80033fe:	466d      	mov	r5, sp
 8003400:	f106 0410 	add.w	r4, r6, #16
 8003404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003410:	e885 0003 	stmia.w	r5, {r0, r1}
 8003414:	1d33      	adds	r3, r6, #4
 8003416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f002 fe7d 	bl	8006118 <USB_DevInit>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00d      	b.n	800344c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 ffcc 	bl	80073e2 <USB_DevDisconnect>

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003454 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_Start+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e020      	b.n	80034b2 <HAL_PCD_Start+0x5e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d109      	bne.n	8003494 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003484:	2b01      	cmp	r3, #1
 8003486:	d005      	beq.n	8003494 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 fdcf 	bl	800603c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 ff7c 	bl	80073a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b590      	push	{r4, r7, lr}
 80034bc:	b08d      	sub	sp, #52	; 0x34
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f004 f83a 	bl	800754a <USB_GetMode>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 848a 	bne.w	8003df2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 ff9e 	bl	8007424 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8480 	beq.w	8003df0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 ff8b 	bl	8007424 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d107      	bne.n	8003528 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f002 0202 	and.w	r2, r2, #2
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 ff79 	bl	8007424 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d161      	bne.n	8003600 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0210 	bic.w	r2, r2, #16
 800354a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	0c5b      	lsrs	r3, r3, #17
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	2b02      	cmp	r3, #2
 8003576:	d124      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d035      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	b29b      	uxth	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	6a38      	ldr	r0, [r7, #32]
 8003598:	f003 fdb0 	bl	80070fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a8:	441a      	add	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ba:	441a      	add	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
 80035c0:	e016      	b.n	80035f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	0c5b      	lsrs	r3, r3, #17
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d110      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035d4:	2208      	movs	r2, #8
 80035d6:	4619      	mov	r1, r3
 80035d8:	6a38      	ldr	r0, [r7, #32]
 80035da:	f003 fd8f 	bl	80070fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ea:	441a      	add	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0210 	orr.w	r2, r2, #16
 80035fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 ff0d 	bl	8007424 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003614:	f040 80a7 	bne.w	8003766 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f003 ff12 	bl	800744a <USB_ReadDevAllOutEpInterrupt>
 8003626:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003628:	e099      	b.n	800375e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 808e 	beq.w	8003752 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f003 ff36 	bl	80074b2 <USB_ReadDevOutEPInterrupt>
 8003646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	2301      	movs	r3, #1
 8003662:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fec2 	bl	80043f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	461a      	mov	r2, r3
 8003684:	2308      	movs	r3, #8
 8003686:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 ff98 	bl	80045c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	2310      	movs	r3, #16
 80036aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d030      	beq.n	8003718 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d109      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d108      	bne.n	8003706 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2200      	movs	r2, #0
 80036f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f006 fac7 	bl	8009c94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	2302      	movs	r3, #2
 8003716:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	461a      	mov	r2, r3
 8003730:	2320      	movs	r3, #32
 8003732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f af62 	bne.w	800362a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fe5a 	bl	8007424 <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800377a:	f040 80db 	bne.w	8003934 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fe7b 	bl	800747e <USB_ReadDevAllInEpInterrupt>
 8003788:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800378e:	e0cd      	b.n	800392c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80c2 	beq.w	8003920 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fea1 	bl	80074ee <USB_ReadDevInEPInterrupt>
 80037ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d057      	beq.n	8003868 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	2201      	movs	r2, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d8:	4013      	ands	r3, r2
 80037da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	461a      	mov	r2, r3
 80037ea:	2301      	movs	r3, #1
 80037ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d132      	bne.n	800385c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334c      	adds	r3, #76	; 0x4c
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4403      	add	r3, r0
 8003816:	3348      	adds	r3, #72	; 0x48
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4419      	add	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4403      	add	r3, r0
 800382a:	334c      	adds	r3, #76	; 0x4c
 800382c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <HAL_PCD_IRQHandler+0x3a2>
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3354      	adds	r3, #84	; 0x54
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003854:	461a      	mov	r2, r3
 8003856:	2101      	movs	r1, #1
 8003858:	f003 fea8 	bl	80075ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f006 f991 	bl	8009b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	461a      	mov	r2, r3
 8003880:	2308      	movs	r3, #8
 8003882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	461a      	mov	r2, r3
 800389c:	2310      	movs	r3, #16
 800389e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d023      	beq.n	800390e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c8:	6a38      	ldr	r0, [r7, #32]
 80038ca:	f002 fd89 	bl	80063e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	3338      	adds	r3, #56	; 0x38
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	3304      	adds	r3, #4
 80038e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	78db      	ldrb	r3, [r3, #3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d108      	bne.n	80038fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f006 f9de 	bl	8009cb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	461a      	mov	r2, r3
 800390a:	2302      	movs	r3, #2
 800390c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fcdb 	bl	80042d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	3301      	adds	r3, #1
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	f47f af2e 	bne.w	8003790 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f003 fd73 	bl	8007424 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003948:	d122      	bne.n	8003990 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003964:	2b01      	cmp	r3, #1
 8003966:	d108      	bne.n	800397a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003970:	2100      	movs	r1, #0
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fec2 	bl	80046fc <HAL_PCDEx_LPM_Callback>
 8003978:	e002      	b.n	8003980 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f006 f97c 	bl	8009c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fd45 	bl	8007424 <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a4:	d112      	bne.n	80039cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f006 f938 	bl	8009c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fd27 	bl	8007424 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	f040 80b7 	bne.w	8003b52 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2110      	movs	r1, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fcee 	bl	80063e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a08:	e046      	b.n	8003a98 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a16:	461a      	mov	r2, r3
 8003a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	3301      	adds	r3, #1
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d3b3      	bcc.n	8003a0a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ab4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ace:	f043 030b 	orr.w	r3, r3, #11
 8003ad2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae4:	f043 030b 	orr.w	r3, r3, #11
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	e015      	b.n	8003b18 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003afe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b12:	f043 030b 	orr.w	r3, r3, #11
 8003b16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f003 fd35 	bl	80075ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 fc64 	bl	8007424 <USB_ReadInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d124      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 fcfa 	bl	8007566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 fcaf 	bl	80064da <USB_GetDevSpeed>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681c      	ldr	r4, [r3, #0]
 8003b88:	f001 fa28 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8003b8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f002 f9ae 	bl	8005ef8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f006 f81c 	bl	8009bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fc34 	bl	8007424 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d10a      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 fff9 	bl	8009bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 0208 	and.w	r2, r2, #8
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fc1f 	bl	8007424 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d122      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e014      	b.n	8003c2c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb27 	bl	8004274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	3301      	adds	r3, #1
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3e5      	bcc.n	8003c02 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f003 fbf2 	bl	8007424 <USB_ReadInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d13b      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e02b      	b.n	8003caa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3340      	adds	r3, #64	; 0x40
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d115      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da12      	bge.n	8003ca4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	333f      	adds	r3, #63	; 0x3f
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fae8 	bl	8004274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3ce      	bcc.n	8003c52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fbab 	bl	8007424 <USB_ReadInterrupts>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd8:	d155      	bne.n	8003d86 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cda:	2301      	movs	r3, #1
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	e045      	b.n	8003d6c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d12e      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da2b      	bge.n	8003d66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d121      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d62:	6053      	str	r3, [r2, #4]
            break;
 8003d64:	e007      	b.n	8003d76 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3301      	adds	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d3b4      	bcc.n	8003ce0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fb4a 	bl	8007424 <USB_ReadInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d10a      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f005 ff9d 	bl	8009cdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fb34 	bl	8007424 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d115      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f005 ff8d 	bl	8009cf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	e000      	b.n	8003df2 <HAL_PCD_IRQHandler+0x938>
      return;
 8003df0:	bf00      	nop
    }
  }
}
 8003df2:	3734      	adds	r7, #52	; 0x34
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd90      	pop	{r4, r7, pc}

08003df8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_PCD_SetAddress+0x1a>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e013      	b.n	8003e3a <HAL_PCD_SetAddress+0x42>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fa92 	bl	8007354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	4608      	mov	r0, r1
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4603      	mov	r3, r0
 8003e52:	70fb      	strb	r3, [r7, #3]
 8003e54:	460b      	mov	r3, r1
 8003e56:	803b      	strh	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	da0f      	bge.n	8003e88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	705a      	strb	r2, [r3, #1]
 8003e86:	e00f      	b.n	8003ea8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003eb4:	883a      	ldrh	r2, [r7, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	78ba      	ldrb	r2, [r7, #2]
 8003ebe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ed2:	78bb      	ldrb	r3, [r7, #2]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d102      	bne.n	8003ede <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_PCD_EP_Open+0xaa>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e00e      	b.n	8003f0a <HAL_PCD_EP_Open+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f002 fb12 	bl	8006524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f08:	7afb      	ldrb	r3, [r7, #11]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da0f      	bge.n	8003f46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3338      	adds	r3, #56	; 0x38
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	705a      	strb	r2, [r3, #1]
 8003f44:	e00f      	b.n	8003f66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_PCD_EP_Close+0x6e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e00e      	b.n	8003f9e <HAL_PCD_EP_Close+0x8c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68f9      	ldr	r1, [r7, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f002 fb50 	bl	8006634 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	f002 fe2f 	bl	8006c7c <USB_EP0StartXfer>
 800401e:	e008      	b.n	8004032 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	f002 fbdd 	bl	80067ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	f003 020f 	and.w	r2, r3, #15
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	3338      	adds	r3, #56	; 0x38
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	3304      	adds	r3, #4
 8004092:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2201      	movs	r2, #1
 80040aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d102      	bne.n	80040c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6979      	ldr	r1, [r7, #20]
 80040de:	f002 fdcd 	bl	8006c7c <USB_EP0StartXfer>
 80040e2:	e008      	b.n	80040f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	f002 fb7b 	bl	80067ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d901      	bls.n	800411e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e050      	b.n	80041c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800411e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da0f      	bge.n	8004146 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	3338      	adds	r3, #56	; 0x38
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	705a      	strb	r2, [r3, #1]
 8004144:	e00d      	b.n	8004162 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	3304      	adds	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_PCD_EP_SetStall+0x82>
 800417e:	2302      	movs	r3, #2
 8004180:	e01e      	b.n	80041c0 <HAL_PCD_EP_SetStall+0xc0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	4618      	mov	r0, r3
 8004192:	f003 f80b 	bl	80071ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	b2d9      	uxtb	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041b0:	461a      	mov	r2, r3
 80041b2:	f003 f9fb 	bl	80075ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d901      	bls.n	80041e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e042      	b.n	800426c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	da0f      	bge.n	800420e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	f003 020f 	and.w	r2, r3, #15
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	3338      	adds	r3, #56	; 0x38
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3304      	adds	r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	705a      	strb	r2, [r3, #1]
 800420c:	e00f      	b.n	800422e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 020f 	and.w	r2, r3, #15
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4413      	add	r3, r2
 8004224:	3304      	adds	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_PCD_EP_ClrStall+0x86>
 800424a:	2302      	movs	r3, #2
 800424c:	e00e      	b.n	800426c <HAL_PCD_EP_ClrStall+0xa4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	4618      	mov	r0, r3
 800425e:	f003 f813 	bl	8007288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	da0c      	bge.n	80042a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 020f 	and.w	r2, r3, #15
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3338      	adds	r3, #56	; 0x38
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e00c      	b.n	80042bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	3304      	adds	r3, #4
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68f9      	ldr	r1, [r7, #12]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 fe32 	bl	8006f2c <USB_EPStopXfer>
 80042c8:	4603      	mov	r3, r0
 80042ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042cc:	7afb      	ldrb	r3, [r7, #11]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af02      	add	r7, sp, #8
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	3338      	adds	r3, #56	; 0x38
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	429a      	cmp	r2, r3
 8004308:	d901      	bls.n	800430e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06c      	b.n	80043e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3303      	adds	r3, #3
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004332:	e02b      	b.n	800438c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	429a      	cmp	r2, r3
 8004348:	d902      	bls.n	8004350 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3303      	adds	r3, #3
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6919      	ldr	r1, [r3, #16]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004368:	b2db      	uxtb	r3, r3
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4603      	mov	r3, r0
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f002 fe86 	bl	8007080 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	441a      	add	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	b29b      	uxth	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d809      	bhi.n	80043b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d203      	bcs.n	80043b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1be      	bne.n	8004334 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d811      	bhi.n	80043e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	2201      	movs	r2, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	43db      	mvns	r3, r3
 80043dc:	6939      	ldr	r1, [r7, #16]
 80043de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e2:	4013      	ands	r3, r2
 80043e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	333c      	adds	r3, #60	; 0x3c
 8004408:	3304      	adds	r3, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d17b      	bne.n	800451e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4a61      	ldr	r2, [pc, #388]	; (80045b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	f240 80b9 	bls.w	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80b3 	beq.w	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004458:	6093      	str	r3, [r2, #8]
 800445a:	e0a7      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	2320      	movs	r3, #32
 8004476:	6093      	str	r3, [r2, #8]
 8004478:	e098      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8093 	bne.w	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d90f      	bls.n	80044ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	461a      	mov	r2, r3
 80044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044aa:	6093      	str	r3, [r2, #8]
 80044ac:	e07e      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	0159      	lsls	r1, r3, #5
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d114      	bne.n	8004510 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f8:	461a      	mov	r2, r3
 80044fa:	2101      	movs	r1, #1
 80044fc:	f003 f856 	bl	80075ac <USB_EP0_OutStart>
 8004500:	e006      	b.n	8004510 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f005 fb1c 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
 800451c:	e046      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4a26      	ldr	r2, [pc, #152]	; (80045bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d124      	bne.n	8004570 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	6093      	str	r3, [r2, #8]
 8004544:	e032      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	2320      	movs	r3, #32
 8004560:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f005 faf3 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
 800456e:	e01d      	b.n	80045ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d114      	bne.n	80045a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004598:	461a      	mov	r2, r3
 800459a:	2100      	movs	r1, #0
 800459c:	f003 f806 	bl	80075ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f005 fad4 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	4f54300a 	.word	0x4f54300a
 80045bc:	4f54310a 	.word	0x4f54310a

080045c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	333c      	adds	r3, #60	; 0x3c
 80045d8:	3304      	adds	r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <PCD_EP_OutSetupPacket_int+0x88>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d90e      	bls.n	8004614 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f005 fa8b 	bl	8009b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <PCD_EP_OutSetupPacket_int+0x88>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d90c      	bls.n	800463c <PCD_EP_OutSetupPacket_int+0x7c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004634:	461a      	mov	r2, r3
 8004636:	2101      	movs	r1, #1
 8004638:	f002 ffb8 	bl	80075ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	4f54300a 	.word	0x4f54300a

0800464c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
 8004658:	4613      	mov	r3, r2
 800465a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800466a:	883b      	ldrh	r3, [r7, #0]
 800466c:	0419      	lsls	r1, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	430a      	orrs	r2, r1
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
 8004678:	e028      	b.n	80046cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e00d      	b.n	80046aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	3340      	adds	r3, #64	; 0x40
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	3301      	adds	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3ec      	bcc.n	800468e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046b4:	883b      	ldrh	r3, [r7, #0]
 80046b6:	0418      	lsls	r0, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	3b01      	subs	r3, #1
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	4302      	orrs	r2, r0
 80046c4:	3340      	adds	r3, #64	; 0x40
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e267      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d075      	beq.n	800481e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004732:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b04      	cmp	r3, #4
 800473c:	d00c      	beq.n	8004758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b85      	ldr	r3, [pc, #532]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d112      	bne.n	8004770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004756:	d10b      	bne.n	8004770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	4b7e      	ldr	r3, [pc, #504]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05b      	beq.n	800481c <HAL_RCC_OscConfig+0x108>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d157      	bne.n	800481c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e242      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x74>
 800477a:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a75      	ldr	r2, [pc, #468]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xb0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x98>
 8004792:	4b70      	ldr	r3, [pc, #448]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6f      	ldr	r2, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b6d      	ldr	r3, [pc, #436]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a6c      	ldr	r2, [pc, #432]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xb0>
 80047ac:	4b69      	ldr	r3, [pc, #420]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a68      	ldr	r2, [pc, #416]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a65      	ldr	r2, [pc, #404]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fb16 	bl	8001dfc <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fd fb12 	bl	8001dfc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e207      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xc0>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fb02 	bl	8001dfc <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fd fafe 	bl	8001dfc <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1f3      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	4b51      	ldr	r3, [pc, #324]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0xe8>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482a:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d11c      	bne.n	800487c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004842:	4b44      	ldr	r3, [pc, #272]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d116      	bne.n	800487c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_RCC_OscConfig+0x152>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e1c7      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4937      	ldr	r1, [pc, #220]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	e03a      	b.n	80048f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x244>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd fab7 	bl	8001dfc <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fd fab3 	bl	8001dfc <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1a8      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4925      	ldr	r1, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x244>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fd fa96 	bl	8001dfc <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d4:	f7fd fa92 	bl	8001dfc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e187      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d036      	beq.n	800496c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <HAL_RCC_OscConfig+0x248>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fd fa76 	bl	8001dfc <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004914:	f7fd fa72 	bl	8001dfc <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e167      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x200>
 8004932:	e01b      	b.n	800496c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_RCC_OscConfig+0x248>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fd fa5f 	bl	8001dfc <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	e00e      	b.n	8004960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004942:	f7fd fa5b 	bl	8001dfc <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d907      	bls.n	8004960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e150      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
 8004954:	40023800 	.word	0x40023800
 8004958:	42470000 	.word	0x42470000
 800495c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	4b88      	ldr	r3, [pc, #544]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ea      	bne.n	8004942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8097 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b81      	ldr	r3, [pc, #516]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	4b7d      	ldr	r3, [pc, #500]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	4a7c      	ldr	r2, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	6413      	str	r3, [r2, #64]	; 0x40
 800499a:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d118      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b6:	4b74      	ldr	r3, [pc, #464]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a73      	ldr	r2, [pc, #460]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fd fa1b 	bl	8001dfc <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fd fa17 	bl	8001dfc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e10c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x2ea>
 80049f0:	4b64      	ldr	r3, [pc, #400]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a63      	ldr	r2, [pc, #396]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
 80049fc:	e01c      	b.n	8004a38 <HAL_RCC_OscConfig+0x324>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x30c>
 8004a06:	4b5f      	ldr	r3, [pc, #380]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a5e      	ldr	r2, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	4b5c      	ldr	r3, [pc, #368]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0x324>
 8004a20:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a54      	ldr	r2, [pc, #336]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f023 0304 	bic.w	r3, r3, #4
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fd f9dc 	bl	8001dfc <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fd f9d8 	bl	8001dfc <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0cb      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ee      	beq.n	8004a48 <HAL_RCC_OscConfig+0x334>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6c:	f7fd f9c6 	bl	8001dfc <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fd f9c2 	bl	8001dfc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0b5      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ee      	bne.n	8004a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80a1 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab2:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d05c      	beq.n	8004b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d141      	bne.n	8004b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd f996 	bl	8001dfc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fd f992 	bl	8001dfc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e087      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	491b      	ldr	r1, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fd f96b 	bl	8001dfc <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd f967 	bl	8001dfc <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e05c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x416>
 8004b48:	e054      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7fd f954 	bl	8001dfc <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fd f950 	bl	8001dfc <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e045      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x444>
 8004b76:	e03d      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e038      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x4ec>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d121      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d11a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d111      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800

08004c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0cc      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d90c      	bls.n	8004c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b63      	ldr	r3, [pc, #396]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0b8      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c58:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4a58      	ldr	r2, [pc, #352]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a52      	ldr	r2, [pc, #328]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c7c:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	494d      	ldr	r1, [pc, #308]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d044      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d119      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e07f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e067      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4934      	ldr	r1, [pc, #208]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf4:	f7fd f882 	bl	8001dfc <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fd f87e 	bl	8001dfc <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d20c      	bcs.n	8004d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e032      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4916      	ldr	r1, [pc, #88]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8a:	f000 f821 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	490a      	ldr	r1, [pc, #40]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d9c:	5ccb      	ldrb	r3, [r1, r3]
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1c8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc ffe2 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023c00 	.word	0x40023c00
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	0800d0cc 	.word	0x0800d0cc
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	20000004 	.word	0x20000004

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b094      	sub	sp, #80	; 0x50
 8004dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
 8004ddc:	2300      	movs	r3, #0
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de0:	2300      	movs	r3, #0
 8004de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de8:	4b79      	ldr	r3, [pc, #484]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d00d      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x40>
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	f200 80e1 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x34>
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e02:	e0db      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b73      	ldr	r3, [pc, #460]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e08:	e0db      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e0e:	e0d8      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e10:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	f04f 0000 	mov.w	r0, #0
 8004e4a:	f04f 0100 	mov.w	r1, #0
 8004e4e:	0159      	lsls	r1, r3, #5
 8004e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e54:	0150      	lsls	r0, r2, #5
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	1a51      	subs	r1, r2, r1
 8004e5e:	6139      	str	r1, [r7, #16]
 8004e60:	4629      	mov	r1, r5
 8004e62:	eb63 0301 	sbc.w	r3, r3, r1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e74:	4659      	mov	r1, fp
 8004e76:	018b      	lsls	r3, r1, #6
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e7e:	4651      	mov	r1, sl
 8004e80:	018a      	lsls	r2, r1, #6
 8004e82:	4651      	mov	r1, sl
 8004e84:	ebb2 0801 	subs.w	r8, r2, r1
 8004e88:	4659      	mov	r1, fp
 8004e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	eb18 0303 	adds.w	r3, r8, r3
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	462b      	mov	r3, r5
 8004eb0:	eb49 0303 	adc.w	r3, r9, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	024b      	lsls	r3, r1, #9
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ecc:	4621      	mov	r1, r4
 8004ece:	024a      	lsls	r2, r1, #9
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee0:	f7fb fe72 	bl	8000bc8 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	e058      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	4611      	mov	r1, r2
 8004efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004efe:	623b      	str	r3, [r7, #32]
 8004f00:	2300      	movs	r3, #0
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	f04f 0000 	mov.w	r0, #0
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	0159      	lsls	r1, r3, #5
 8004f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1a:	0150      	lsls	r0, r2, #5
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4641      	mov	r1, r8
 8004f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f26:	4649      	mov	r1, r9
 8004f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f40:	ebb2 040a 	subs.w	r4, r2, sl
 8004f44:	eb63 050b 	sbc.w	r5, r3, fp
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	00eb      	lsls	r3, r5, #3
 8004f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f56:	00e2      	lsls	r2, r4, #3
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	18e3      	adds	r3, r4, r3
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb45 0303 	adc.w	r3, r5, r3
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	61fa      	str	r2, [r7, #28]
 8004f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f94:	f7fb fe18 	bl	8000bc8 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3750      	adds	r7, #80	; 0x50
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000000 	.word	0x20000000

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a9b      	lsrs	r3, r3, #10
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4903      	ldr	r1, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	0800d0dc 	.word	0x0800d0dc

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005020:	f7ff ffdc 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0b5b      	lsrs	r3, r3, #13
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	0800d0dc 	.word	0x0800d0dc

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e041      	b.n	80050da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fcc0 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f000 f95e 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e046      	b.n	800518a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a23      	ldr	r2, [pc, #140]	; (8005198 <HAL_TIM_Base_Start+0xb4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d01d      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_TIM_Base_Start+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_TIM_Base_Start+0xbc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_TIM_Base_Start+0xc0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIM_Base_Start+0xc4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_TIM_Base_Start+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_TIM_Base_Start+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d111      	bne.n	8005178 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d010      	beq.n	8005188 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	e007      	b.n	8005188 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40001800 	.word	0x40001800

080051b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_ConfigClockSource+0x1c>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e0b4      	b.n	800533a <HAL_TIM_ConfigClockSource+0x186>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005208:	d03e      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0xd4>
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	f200 8087 	bhi.w	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	f000 8086 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x172>
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	d87f      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b70      	cmp	r3, #112	; 0x70
 8005222:	d01a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xa6>
 8005224:	2b70      	cmp	r3, #112	; 0x70
 8005226:	d87b      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b60      	cmp	r3, #96	; 0x60
 800522a:	d050      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x11a>
 800522c:	2b60      	cmp	r3, #96	; 0x60
 800522e:	d877      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b50      	cmp	r3, #80	; 0x50
 8005232:	d03c      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0xfa>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d873      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d058      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x13a>
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d86f      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	d064      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d86b      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b20      	cmp	r3, #32
 800524a:	d060      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d867      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05c      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b10      	cmp	r3, #16
 8005256:	d05a      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	e062      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f000 f985 	bl	8005578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800527c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
      break;
 8005286:	e04f      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f000 f96e 	bl	8005578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052aa:	609a      	str	r2, [r3, #8]
      break;
 80052ac:	e03c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f8e2 	bl	8005484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2150      	movs	r1, #80	; 0x50
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f93b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 80052cc:	e02c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	461a      	mov	r2, r3
 80052dc:	f000 f901 	bl	80054e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2160      	movs	r1, #96	; 0x60
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f92b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 80052ec:	e01c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 f8c2 	bl	8005484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2140      	movs	r1, #64	; 0x40
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f91b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800530c:	e00c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 f912 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800531e:	e003      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      break;
 8005324:	e000      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a40      	ldr	r2, [pc, #256]	; (8005458 <TIM_Base_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d00f      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3d      	ldr	r2, [pc, #244]	; (800545c <TIM_Base_SetConfig+0x118>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3c      	ldr	r2, [pc, #240]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3b      	ldr	r2, [pc, #236]	; (8005464 <TIM_Base_SetConfig+0x120>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <TIM_Base_SetConfig+0x124>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d108      	bne.n	8005396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2f      	ldr	r2, [pc, #188]	; (8005458 <TIM_Base_SetConfig+0x114>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d027      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2c      	ldr	r2, [pc, #176]	; (800545c <TIM_Base_SetConfig+0x118>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d023      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01f      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <TIM_Base_SetConfig+0x120>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <TIM_Base_SetConfig+0x124>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d017      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <TIM_Base_SetConfig+0x128>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a27      	ldr	r2, [pc, #156]	; (8005470 <TIM_Base_SetConfig+0x12c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a26      	ldr	r2, [pc, #152]	; (8005474 <TIM_Base_SetConfig+0x130>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a25      	ldr	r2, [pc, #148]	; (8005478 <TIM_Base_SetConfig+0x134>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <TIM_Base_SetConfig+0x138>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a23      	ldr	r2, [pc, #140]	; (8005480 <TIM_Base_SetConfig+0x13c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0xf8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d103      	bne.n	8005444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	615a      	str	r2, [r3, #20]
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40010400 	.word	0x40010400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	40001800 	.word	0x40001800
 800547c:	40001c00 	.word	0x40001c00
 8005480:	40002000 	.word	0x40002000

08005484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 030a 	bic.w	r3, r3, #10
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b087      	sub	sp, #28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0210 	bic.w	r2, r3, #16
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800551e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	f043 0307 	orr.w	r3, r3, #7
 8005564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	431a      	orrs	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e05a      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a21      	ldr	r2, [pc, #132]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561c:	d01d      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a15      	ldr	r2, [pc, #84]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40001800 	.word	0x40001800

080056b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e03f      	b.n	8005742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc f9ac 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f929 	bl	800594c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b08a      	sub	sp, #40	; 0x28
 800574e:	af02      	add	r7, sp, #8
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b20      	cmp	r3, #32
 8005768:	d17c      	bne.n	8005864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_Transmit+0x2c>
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e075      	b.n	8005866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x3e>
 8005784:	2302      	movs	r3, #2
 8005786:	e06e      	b.n	8005866 <HAL_UART_Transmit+0x11c>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2221      	movs	r2, #33	; 0x21
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579e:	f7fc fb2d 	bl	8001dfc <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b8:	d108      	bne.n	80057cc <HAL_UART_Transmit+0x82>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e003      	b.n	80057d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057dc:	e02a      	b.n	8005834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f840 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e036      	b.n	8005866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1cf      	bne.n	80057de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2140      	movs	r1, #64	; 0x40
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f810 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b090      	sub	sp, #64	; 0x40
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	e050      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d04c      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0x30>
 800588e:	f7fc fab5 	bl	8001dfc <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800589a:	429a      	cmp	r2, r3
 800589c:	d241      	bcs.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058be:	637a      	str	r2, [r7, #52]	; 0x34
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f2:	623a      	str	r2, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e00f      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d09f      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3740      	adds	r7, #64	; 0x40
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800594c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005950:	b0c0      	sub	sp, #256	; 0x100
 8005952:	af00      	add	r7, sp, #0
 8005954:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	68d9      	ldr	r1, [r3, #12]
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	ea40 0301 	orr.w	r3, r0, r1
 8005974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	431a      	orrs	r2, r3
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	431a      	orrs	r2, r3
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059a4:	f021 010c 	bic.w	r1, r1, #12
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059b2:	430b      	orrs	r3, r1
 80059b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c6:	6999      	ldr	r1, [r3, #24]
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	ea40 0301 	orr.w	r3, r0, r1
 80059d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b8f      	ldr	r3, [pc, #572]	; (8005c18 <UART_SetConfig+0x2cc>)
 80059dc:	429a      	cmp	r2, r3
 80059de:	d005      	beq.n	80059ec <UART_SetConfig+0xa0>
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b8d      	ldr	r3, [pc, #564]	; (8005c1c <UART_SetConfig+0x2d0>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d104      	bne.n	80059f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7ff fb16 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 80059f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059f4:	e003      	b.n	80059fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059f6:	f7ff fafd 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80059fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a08:	f040 810c 	bne.w	8005c24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a26:	415b      	adcs	r3, r3
 8005a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a2e:	4621      	mov	r1, r4
 8005a30:	eb12 0801 	adds.w	r8, r2, r1
 8005a34:	4629      	mov	r1, r5
 8005a36:	eb43 0901 	adc.w	r9, r3, r1
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4e:	4690      	mov	r8, r2
 8005a50:	4699      	mov	r9, r3
 8005a52:	4623      	mov	r3, r4
 8005a54:	eb18 0303 	adds.w	r3, r8, r3
 8005a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	eb49 0303 	adc.w	r3, r9, r3
 8005a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	18db      	adds	r3, r3, r3
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a80:	4613      	mov	r3, r2
 8005a82:	eb42 0303 	adc.w	r3, r2, r3
 8005a86:	657b      	str	r3, [r7, #84]	; 0x54
 8005a88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a90:	f7fb f89a 	bl	8000bc8 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4b61      	ldr	r3, [pc, #388]	; (8005c20 <UART_SetConfig+0x2d4>)
 8005a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	011c      	lsls	r4, r3, #4
 8005aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	64b9      	str	r1, [r7, #72]	; 0x48
 8005abc:	415b      	adcs	r3, r3
 8005abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	eb12 0a01 	adds.w	sl, r2, r1
 8005aca:	4649      	mov	r1, r9
 8005acc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae4:	4692      	mov	sl, r2
 8005ae6:	469b      	mov	fp, r3
 8005ae8:	4643      	mov	r3, r8
 8005aea:	eb1a 0303 	adds.w	r3, sl, r3
 8005aee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af2:	464b      	mov	r3, r9
 8005af4:	eb4b 0303 	adc.w	r3, fp, r3
 8005af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b10:	460b      	mov	r3, r1
 8005b12:	18db      	adds	r3, r3, r3
 8005b14:	643b      	str	r3, [r7, #64]	; 0x40
 8005b16:	4613      	mov	r3, r2
 8005b18:	eb42 0303 	adc.w	r3, r2, r3
 8005b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b26:	f7fb f84f 	bl	8000bc8 <__aeabi_uldivmod>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	4b3b      	ldr	r3, [pc, #236]	; (8005c20 <UART_SetConfig+0x2d4>)
 8005b32:	fba3 2301 	umull	r2, r3, r3, r1
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	2264      	movs	r2, #100	; 0x64
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	1acb      	subs	r3, r1, r3
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <UART_SetConfig+0x2d4>)
 8005b48:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b54:	441c      	add	r4, r3
 8005b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	1891      	adds	r1, r2, r2
 8005b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b70:	415b      	adcs	r3, r3
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b78:	4641      	mov	r1, r8
 8005b7a:	1851      	adds	r1, r2, r1
 8005b7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b7e:	4649      	mov	r1, r9
 8005b80:	414b      	adcs	r3, r1
 8005b82:	637b      	str	r3, [r7, #52]	; 0x34
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b90:	4659      	mov	r1, fp
 8005b92:	00cb      	lsls	r3, r1, #3
 8005b94:	4651      	mov	r1, sl
 8005b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	00ca      	lsls	r2, r1, #3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	189b      	adds	r3, r3, r2
 8005ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bac:	464b      	mov	r3, r9
 8005bae:	460a      	mov	r2, r1
 8005bb0:	eb42 0303 	adc.w	r3, r2, r3
 8005bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bcc:	460b      	mov	r3, r1
 8005bce:	18db      	adds	r3, r3, r3
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	eb42 0303 	adc.w	r3, r2, r3
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005be2:	f7fa fff1 	bl	8000bc8 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <UART_SetConfig+0x2d4>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <UART_SetConfig+0x2d4>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 0207 	and.w	r2, r3, #7
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4422      	add	r2, r4
 8005c12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c14:	e105      	b.n	8005e22 <UART_SetConfig+0x4d6>
 8005c16:	bf00      	nop
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	40011400 	.word	0x40011400
 8005c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c36:	4642      	mov	r2, r8
 8005c38:	464b      	mov	r3, r9
 8005c3a:	1891      	adds	r1, r2, r2
 8005c3c:	6239      	str	r1, [r7, #32]
 8005c3e:	415b      	adcs	r3, r3
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
 8005c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c46:	4641      	mov	r1, r8
 8005c48:	1854      	adds	r4, r2, r1
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	eb43 0501 	adc.w	r5, r3, r1
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	00eb      	lsls	r3, r5, #3
 8005c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c5e:	00e2      	lsls	r2, r4, #3
 8005c60:	4614      	mov	r4, r2
 8005c62:	461d      	mov	r5, r3
 8005c64:	4643      	mov	r3, r8
 8005c66:	18e3      	adds	r3, r4, r3
 8005c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	eb45 0303 	adc.w	r3, r5, r3
 8005c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c92:	4629      	mov	r1, r5
 8005c94:	008b      	lsls	r3, r1, #2
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	008a      	lsls	r2, r1, #2
 8005ca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ca4:	f7fa ff90 	bl	8000bc8 <__aeabi_uldivmod>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4b60      	ldr	r3, [pc, #384]	; (8005e30 <UART_SetConfig+0x4e4>)
 8005cae:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	011c      	lsls	r4, r3, #4
 8005cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	61b9      	str	r1, [r7, #24]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd8:	4641      	mov	r1, r8
 8005cda:	1851      	adds	r1, r2, r1
 8005cdc:	6139      	str	r1, [r7, #16]
 8005cde:	4649      	mov	r1, r9
 8005ce0:	414b      	adcs	r3, r1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	00cb      	lsls	r3, r1, #3
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	00ca      	lsls	r2, r1, #3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	4642      	mov	r2, r8
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	460a      	mov	r2, r1
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d30:	4649      	mov	r1, r9
 8005d32:	008b      	lsls	r3, r1, #2
 8005d34:	4641      	mov	r1, r8
 8005d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	008a      	lsls	r2, r1, #2
 8005d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d42:	f7fa ff41 	bl	8000bc8 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <UART_SetConfig+0x4e4>)
 8005d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	2164      	movs	r1, #100	; 0x64
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	3332      	adds	r3, #50	; 0x32
 8005d5e:	4a34      	ldr	r2, [pc, #208]	; (8005e30 <UART_SetConfig+0x4e4>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d6a:	441c      	add	r4, r3
 8005d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d70:	2200      	movs	r2, #0
 8005d72:	673b      	str	r3, [r7, #112]	; 0x70
 8005d74:	677a      	str	r2, [r7, #116]	; 0x74
 8005d76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	1891      	adds	r1, r2, r2
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	415b      	adcs	r3, r3
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	1851      	adds	r1, r2, r1
 8005d8e:	6039      	str	r1, [r7, #0]
 8005d90:	4649      	mov	r1, r9
 8005d92:	414b      	adcs	r3, r1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005da2:	4659      	mov	r1, fp
 8005da4:	00cb      	lsls	r3, r1, #3
 8005da6:	4651      	mov	r1, sl
 8005da8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dac:	4651      	mov	r1, sl
 8005dae:	00ca      	lsls	r2, r1, #3
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	4603      	mov	r3, r0
 8005db6:	4642      	mov	r2, r8
 8005db8:	189b      	adds	r3, r3, r2
 8005dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd0:	667a      	str	r2, [r7, #100]	; 0x64
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005dde:	4649      	mov	r1, r9
 8005de0:	008b      	lsls	r3, r1, #2
 8005de2:	4641      	mov	r1, r8
 8005de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de8:	4641      	mov	r1, r8
 8005dea:	008a      	lsls	r2, r1, #2
 8005dec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005df0:	f7fa feea 	bl	8000bc8 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <UART_SetConfig+0x4e4>)
 8005dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	2164      	movs	r1, #100	; 0x64
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	3332      	adds	r3, #50	; 0x32
 8005e0c:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <UART_SetConfig+0x4e4>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4422      	add	r2, r4
 8005e20:	609a      	str	r2, [r3, #8]
}
 8005e22:	bf00      	nop
 8005e24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	51eb851f 	.word	0x51eb851f

08005e34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e34:	b084      	sub	sp, #16
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	f107 001c 	add.w	r0, r7, #28
 8005e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d122      	bne.n	8005e92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d105      	bne.n	8005e86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fbee 	bl	8007668 <USB_CoreReset>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e01a      	b.n	8005ec8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fbe2 	bl	8007668 <USB_CoreReset>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8005eba:	e005      	b.n	8005ec8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10b      	bne.n	8005ee6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f043 0206 	orr.w	r2, r3, #6
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef2:	b004      	add	sp, #16
 8005ef4:	4770      	bx	lr
	...

08005ef8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d165      	bne.n	8005fd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a41      	ldr	r2, [pc, #260]	; (8006014 <USB_SetTurnaroundTime+0x11c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d906      	bls.n	8005f22 <USB_SetTurnaroundTime+0x2a>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4a40      	ldr	r2, [pc, #256]	; (8006018 <USB_SetTurnaroundTime+0x120>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d202      	bcs.n	8005f22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f1c:	230f      	movs	r3, #15
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e062      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <USB_SetTurnaroundTime+0x120>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d306      	bcc.n	8005f38 <USB_SetTurnaroundTime+0x40>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4a3b      	ldr	r2, [pc, #236]	; (800601c <USB_SetTurnaroundTime+0x124>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d202      	bcs.n	8005f38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f32:	230e      	movs	r3, #14
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e057      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4a38      	ldr	r2, [pc, #224]	; (800601c <USB_SetTurnaroundTime+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d306      	bcc.n	8005f4e <USB_SetTurnaroundTime+0x56>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a37      	ldr	r2, [pc, #220]	; (8006020 <USB_SetTurnaroundTime+0x128>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d202      	bcs.n	8005f4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f48:	230d      	movs	r3, #13
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e04c      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4a33      	ldr	r2, [pc, #204]	; (8006020 <USB_SetTurnaroundTime+0x128>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d306      	bcc.n	8005f64 <USB_SetTurnaroundTime+0x6c>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4a32      	ldr	r2, [pc, #200]	; (8006024 <USB_SetTurnaroundTime+0x12c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d802      	bhi.n	8005f64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f5e:	230c      	movs	r3, #12
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e041      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <USB_SetTurnaroundTime+0x12c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d906      	bls.n	8005f7a <USB_SetTurnaroundTime+0x82>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a2e      	ldr	r2, [pc, #184]	; (8006028 <USB_SetTurnaroundTime+0x130>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d802      	bhi.n	8005f7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f74:	230b      	movs	r3, #11
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e036      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a2a      	ldr	r2, [pc, #168]	; (8006028 <USB_SetTurnaroundTime+0x130>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d906      	bls.n	8005f90 <USB_SetTurnaroundTime+0x98>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4a29      	ldr	r2, [pc, #164]	; (800602c <USB_SetTurnaroundTime+0x134>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d802      	bhi.n	8005f90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e02b      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a26      	ldr	r2, [pc, #152]	; (800602c <USB_SetTurnaroundTime+0x134>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d906      	bls.n	8005fa6 <USB_SetTurnaroundTime+0xae>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a25      	ldr	r2, [pc, #148]	; (8006030 <USB_SetTurnaroundTime+0x138>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d202      	bcs.n	8005fa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005fa0:	2309      	movs	r3, #9
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e020      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a21      	ldr	r2, [pc, #132]	; (8006030 <USB_SetTurnaroundTime+0x138>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d306      	bcc.n	8005fbc <USB_SetTurnaroundTime+0xc4>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <USB_SetTurnaroundTime+0x13c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d802      	bhi.n	8005fbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e015      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <USB_SetTurnaroundTime+0x13c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0xda>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <USB_SetTurnaroundTime+0x140>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d202      	bcs.n	8005fd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005fcc:	2307      	movs	r3, #7
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e00a      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005fd2:	2306      	movs	r3, #6
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e007      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005fde:	2309      	movs	r3, #9
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e001      	b.n	8005fe8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005fe4:	2309      	movs	r3, #9
 8005fe6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	029b      	lsls	r3, r3, #10
 8005ffc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006000:	431a      	orrs	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	00d8acbf 	.word	0x00d8acbf
 8006018:	00e4e1c0 	.word	0x00e4e1c0
 800601c:	00f42400 	.word	0x00f42400
 8006020:	01067380 	.word	0x01067380
 8006024:	011a499f 	.word	0x011a499f
 8006028:	01312cff 	.word	0x01312cff
 800602c:	014ca43f 	.word	0x014ca43f
 8006030:	016e3600 	.word	0x016e3600
 8006034:	01a6ab1f 	.word	0x01a6ab1f
 8006038:	01e84800 	.word	0x01e84800

0800603c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d115      	bne.n	80060ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060ae:	2001      	movs	r0, #1
 80060b0:	f7fb feb0 	bl	8001e14 <HAL_Delay>
      ms++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa45 	bl	800754a <USB_GetMode>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d01e      	beq.n	8006104 <USB_SetCurrentMode+0x84>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b31      	cmp	r3, #49	; 0x31
 80060ca:	d9f0      	bls.n	80060ae <USB_SetCurrentMode+0x2e>
 80060cc:	e01a      	b.n	8006104 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d115      	bne.n	8006100 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060e0:	2001      	movs	r0, #1
 80060e2:	f7fb fe97 	bl	8001e14 <HAL_Delay>
      ms++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fa2c 	bl	800754a <USB_GetMode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <USB_SetCurrentMode+0x84>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b31      	cmp	r3, #49	; 0x31
 80060fc:	d9f0      	bls.n	80060e0 <USB_SetCurrentMode+0x60>
 80060fe:	e001      	b.n	8006104 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e005      	b.n	8006110 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b32      	cmp	r3, #50	; 0x32
 8006108:	d101      	bne.n	800610e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006118:	b084      	sub	sp, #16
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e009      	b.n	800614c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3340      	adds	r3, #64	; 0x40
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	2200      	movs	r2, #0
 8006144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3301      	adds	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b0e      	cmp	r3, #14
 8006150:	d9f2      	bls.n	8006138 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11c      	bne.n	8006192 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
 8006190:	e00b      	b.n	80061aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b0:	461a      	mov	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061bc:	4619      	mov	r1, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	461a      	mov	r2, r3
 80061c6:	680b      	ldr	r3, [r1, #0]
 80061c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061d6:	2100      	movs	r1, #0
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f965 	bl	80064a8 <USB_SetDevSpeed>
 80061de:	e008      	b.n	80061f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f960 	bl	80064a8 <USB_SetDevSpeed>
 80061e8:	e003      	b.n	80061f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f95b 	bl	80064a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061f2:	2110      	movs	r1, #16
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8f3 	bl	80063e0 <USB_FlushTxFifo>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f91f 	bl	8006448 <USB_FlushRxFifo>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	e043      	b.n	80062c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006254:	d118      	bne.n	8006288 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	461a      	mov	r2, r3
 800626a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e013      	b.n	800629a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e008      	b.n	800629a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	461a      	mov	r2, r3
 80062ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3301      	adds	r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3b7      	bcc.n	800623e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e043      	b.n	800635c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ea:	d118      	bne.n	800631e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	461a      	mov	r2, r3
 8006300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e013      	b.n	8006330 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e008      	b.n	8006330 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	461a      	mov	r2, r3
 8006350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3b7      	bcc.n	80062d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f043 0210 	orr.w	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <USB_DevInit+0x2c4>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f043 0208 	orr.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063d8:	b004      	add	sp, #16
 80063da:	4770      	bx	lr
 80063dc:	803c3800 	.word	0x803c3800

080063e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a13      	ldr	r2, [pc, #76]	; (8006444 <USB_FlushTxFifo+0x64>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e01b      	b.n	8006438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	daf2      	bge.n	80063ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	019b      	lsls	r3, r3, #6
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <USB_FlushTxFifo+0x64>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e006      	b.n	8006438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d0f0      	beq.n	8006418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	00030d40 	.word	0x00030d40

08006448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a11      	ldr	r2, [pc, #68]	; (80064a4 <USB_FlushRxFifo+0x5c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e018      	b.n	8006498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	daf2      	bge.n	8006454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2210      	movs	r2, #16
 8006476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <USB_FlushRxFifo+0x5c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e006      	b.n	8006498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b10      	cmp	r3, #16
 8006494:	d0f0      	beq.n	8006478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c8:	4313      	orrs	r3, r2
 80064ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
 80064fe:	e00a      	b.n	8006516 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d002      	beq.n	800650c <USB_GetDevSpeed+0x32>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b06      	cmp	r3, #6
 800650a:	d102      	bne.n	8006512 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800650c:	2302      	movs	r3, #2
 800650e:	75fb      	strb	r3, [r7, #23]
 8006510:	e001      	b.n	8006516 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006512:	230f      	movs	r3, #15
 8006514:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d13a      	bne.n	80065b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655e:	4313      	orrs	r3, r2
 8006560:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d155      	bne.n	8006624 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	791b      	ldrb	r3, [r3, #4]
 8006592:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006594:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800659c:	4313      	orrs	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e036      	b.n	8006624 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	2101      	movs	r1, #1
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d11a      	bne.n	8006624 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	791b      	ldrb	r3, [r3, #4]
 8006608:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800660a:	430b      	orrs	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006622:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d161      	bne.n	8006714 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006666:	d11f      	bne.n	80066a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006686:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c8:	4013      	ands	r3, r2
 80066ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	2101      	movs	r1, #1
 80066de:	fa01 f303 	lsl.w	r3, r1, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ec:	4013      	ands	r3, r2
 80066ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	0159      	lsls	r1, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	440b      	add	r3, r1
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	4619      	mov	r1, r3
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <USB_DeactivateEndpoint+0x1b0>)
 800670e:	4013      	ands	r3, r2
 8006710:	600b      	str	r3, [r1, #0]
 8006712:	e060      	b.n	80067d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672a:	d11f      	bne.n	800676c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800674a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800676a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2101      	movs	r1, #1
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	43db      	mvns	r3, r3
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800678c:	4013      	ands	r3, r2
 800678e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	43db      	mvns	r3, r3
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b0:	4013      	ands	r3, r2
 80067b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	0159      	lsls	r1, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	440b      	add	r3, r1
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	4619      	mov	r1, r3
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <USB_DeactivateEndpoint+0x1b4>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	ec337800 	.word	0xec337800
 80067e8:	eff37800 	.word	0xeff37800

080067ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b01      	cmp	r3, #1
 800680a:	f040 815c 	bne.w	8006ac6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d132      	bne.n	800687c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	440a      	add	r2, r1
 8006850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	0cdb      	lsrs	r3, r3, #19
 8006876:	04db      	lsls	r3, r3, #19
 8006878:	6113      	str	r3, [r2, #16]
 800687a:	e074      	b.n	8006966 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	0cdb      	lsrs	r3, r3, #19
 8006898:	04db      	lsls	r3, r3, #19
 800689a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6999      	ldr	r1, [r3, #24]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	440b      	add	r3, r1
 80068d8:	1e59      	subs	r1, r3, #1
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	fbb1 f3f3 	udiv	r3, r1, r3
 80068e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80068e4:	4b9d      	ldr	r3, [pc, #628]	; (8006b5c <USB_EPStartXfer+0x370>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	69b9      	ldr	r1, [r7, #24]
 80068ea:	0148      	lsls	r0, r1, #5
 80068ec:	69f9      	ldr	r1, [r7, #28]
 80068ee:	4401      	add	r1, r0
 80068f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068f4:	4313      	orrs	r3, r2
 80068f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800690e:	69b9      	ldr	r1, [r7, #24]
 8006910:	0148      	lsls	r0, r1, #5
 8006912:	69f9      	ldr	r1, [r7, #28]
 8006914:	4401      	add	r1, r0
 8006916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800691a:	4313      	orrs	r3, r2
 800691c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	791b      	ldrb	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d11f      	bne.n	8006966 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	0151      	lsls	r1, r2, #5
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	440a      	add	r2, r1
 800693c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006940:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006944:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006964:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d14b      	bne.n	8006a04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	791b      	ldrb	r3, [r3, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d128      	bne.n	80069e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d110      	bne.n	80069c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e00f      	b.n	80069e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e133      	b.n	8006c6c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	791b      	ldrb	r3, [r3, #4]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d015      	beq.n	8006a58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 811b 	beq.w	8006c6c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	2101      	movs	r1, #1
 8006a48:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4c:	69f9      	ldr	r1, [r7, #28]
 8006a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a52:	4313      	orrs	r3, r2
 8006a54:	634b      	str	r3, [r1, #52]	; 0x34
 8006a56:	e109      	b.n	8006c6c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d110      	bne.n	8006a8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e00f      	b.n	8006aaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6919      	ldr	r1, [r3, #16]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781a      	ldrb	r2, [r3, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	b298      	uxth	r0, r3
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	4603      	mov	r3, r0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fade 	bl	8007080 <USB_WritePacket>
 8006ac4:	e0d2      	b.n	8006c6c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae0:	0cdb      	lsrs	r3, r3, #19
 8006ae2:	04db      	lsls	r3, r3, #19
 8006ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d126      	bne.n	8006b60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b28:	69b9      	ldr	r1, [r7, #24]
 8006b2a:	0148      	lsls	r0, r1, #5
 8006b2c:	69f9      	ldr	r1, [r7, #28]
 8006b2e:	4401      	add	r1, r0
 8006b30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b34:	4313      	orrs	r3, r2
 8006b36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b56:	6113      	str	r3, [r2, #16]
 8006b58:	e03a      	b.n	8006bd0 <USB_EPStartXfer+0x3e4>
 8006b5a:	bf00      	nop
 8006b5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	8afa      	ldrh	r2, [r7, #22]
 8006b7c:	fb03 f202 	mul.w	r2, r3, r2
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	8afb      	ldrh	r3, [r7, #22]
 8006b94:	04d9      	lsls	r1, r3, #19
 8006b96:	4b38      	ldr	r3, [pc, #224]	; (8006c78 <USB_EPStartXfer+0x48c>)
 8006b98:	400b      	ands	r3, r1
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	0148      	lsls	r0, r1, #5
 8006b9e:	69f9      	ldr	r1, [r7, #28]
 8006ba0:	4401      	add	r1, r0
 8006ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	0148      	lsls	r0, r1, #5
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10d      	bne.n	8006bf2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6919      	ldr	r1, [r3, #16]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	460a      	mov	r2, r1
 8006bf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d128      	bne.n	8006c4c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d110      	bne.n	8006c2c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e00f      	b.n	8006c4c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	1ff80000 	.word	0x1ff80000

08006c7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 80ce 	bne.w	8006e3a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d132      	bne.n	8006d0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	0cdb      	lsrs	r3, r3, #19
 8006d06:	04db      	lsls	r3, r3, #19
 8006d08:	6113      	str	r3, [r2, #16]
 8006d0a:	e04e      	b.n	8006daa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	0cdb      	lsrs	r3, r3, #19
 8006d28:	04db      	lsls	r3, r3, #19
 8006d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9a:	6939      	ldr	r1, [r7, #16]
 8006d9c:	0148      	lsls	r0, r1, #5
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	4401      	add	r1, r0
 8006da2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006da6:	4313      	orrs	r3, r2
 8006da8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d11e      	bne.n	8006dee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d009      	beq.n	8006dcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	e097      	b.n	8006f1e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 8083 	beq.w	8006f1e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e34:	4313      	orrs	r3, r2
 8006e36:	634b      	str	r3, [r1, #52]	; 0x34
 8006e38:	e071      	b.n	8006f1e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	0cdb      	lsrs	r3, r3, #19
 8006e56:	04db      	lsls	r3, r3, #19
 8006e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ecc:	6939      	ldr	r1, [r7, #16]
 8006ece:	0148      	lsls	r0, r1, #5
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	4401      	add	r1, r0
 8006ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10d      	bne.n	8006efe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6919      	ldr	r1, [r3, #16]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	460a      	mov	r2, r1
 8006efc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d14a      	bne.n	8006fe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f62:	f040 8086 	bne.w	8007072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	7812      	ldrb	r2, [r2, #0]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d902      	bls.n	8006fc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc2:	e056      	b.n	8007072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fdc:	d0e7      	beq.n	8006fae <USB_EPStopXfer+0x82>
 8006fde:	e048      	b.n	8007072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff8:	d13b      	bne.n	8007072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800701c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f242 7210 	movw	r2, #10000	; 0x2710
 800704e:	4293      	cmp	r3, r2
 8007050:	d902      	bls.n	8007058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
          break;
 8007056:	e00c      	b.n	8007072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007070:	d0e7      	beq.n	8007042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4611      	mov	r1, r2
 800708c:	461a      	mov	r2, r3
 800708e:	460b      	mov	r3, r1
 8007090:	71fb      	strb	r3, [r7, #7]
 8007092:	4613      	mov	r3, r2
 8007094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800709e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d123      	bne.n	80070ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070a6:	88bb      	ldrh	r3, [r7, #4]
 80070a8:	3303      	adds	r3, #3
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e018      	b.n	80070e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	031a      	lsls	r2, r3, #12
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	461a      	mov	r2, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	3301      	adds	r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3e2      	bcc.n	80070b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b08b      	sub	sp, #44	; 0x2c
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	b29b      	uxth	r3, r3
 8007118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	623b      	str	r3, [r7, #32]
 8007126:	e014      	b.n	8007152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	601a      	str	r2, [r3, #0]
    pDest++;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	3301      	adds	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	3301      	adds	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	3301      	adds	r3, #1
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	3301      	adds	r3, #1
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	3301      	adds	r3, #1
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3e6      	bcc.n	8007128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800715a:	8bfb      	ldrh	r3, [r7, #30]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01e      	beq.n	800719e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716a:	461a      	mov	r2, r3
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	b2da      	uxtb	r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	701a      	strb	r2, [r3, #0]
      i++;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	3301      	adds	r3, #1
 800718a:	623b      	str	r3, [r7, #32]
      pDest++;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007192:	8bfb      	ldrh	r3, [r7, #30]
 8007194:	3b01      	subs	r3, #1
 8007196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007198:	8bfb      	ldrh	r3, [r7, #30]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ea      	bne.n	8007174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	372c      	adds	r7, #44	; 0x2c
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d12c      	bne.n	8007222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	db12      	blt.n	8007200 <USB_EPSetStall+0x54>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00f      	beq.n	8007200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	440a      	add	r2, r1
 8007216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e02b      	b.n	800727a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	db12      	blt.n	800725a <USB_EPSetStall+0xae>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00f      	beq.n	800725a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d128      	bne.n	80072f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d003      	beq.n	80072d4 <USB_EPClearStall+0x4c>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	791b      	ldrb	r3, [r3, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d138      	bne.n	8007346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e027      	b.n	8007346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007310:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d003      	beq.n	8007326 <USB_EPClearStall+0x9e>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10f      	bne.n	8007346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007372:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ce:	f023 0302 	bic.w	r3, r3, #2
 80073d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073fc:	f023 0303 	bic.w	r3, r3, #3
 8007400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4013      	ands	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800743c:	68fb      	ldr	r3, [r7, #12]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	0c1b      	lsrs	r3, r3, #16
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4013      	ands	r3, r2
 80074a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	b29b      	uxth	r3, r3
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074e0:	68bb      	ldr	r3, [r7, #8]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	fa22 f303 	lsr.w	r3, r2, r3
 800751e:	01db      	lsls	r3, r3, #7
 8007520:	b2db      	uxtb	r3, r3
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4013      	ands	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800753c:	68bb      	ldr	r3, [r7, #8]
}
 800753e:	4618      	mov	r0, r3
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007584:	f023 0307 	bic.w	r3, r3, #7
 8007588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	333c      	adds	r3, #60	; 0x3c
 80075c2:	3304      	adds	r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4a26      	ldr	r2, [pc, #152]	; (8007664 <USB_EP0_OutStart+0xb8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d90a      	bls.n	80075e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e0:	d101      	bne.n	80075e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e037      	b.n	8007656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007614:	f043 0318 	orr.w	r3, r3, #24
 8007618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007628:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800762c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10f      	bne.n	8007654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	4f54300a 	.word	0x4f54300a

08007668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <USB_CoreReset+0x64>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e01b      	b.n	80076be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	daf2      	bge.n	8007674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f043 0201 	orr.w	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <USB_CoreReset+0x64>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d901      	bls.n	80076b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e006      	b.n	80076be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d0f0      	beq.n	800769e <USB_CoreReset+0x36>

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	00030d40 	.word	0x00030d40

080076d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076e0:	f002 fca2 	bl	800a028 <USBD_static_malloc>
 80076e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32b0      	adds	r2, #176	; 0xb0
 80076f6:	2100      	movs	r1, #0
 80076f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80076fc:	2302      	movs	r3, #2
 80076fe:	e0d4      	b.n	80078aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007700:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f002 fcfc 	bl	800a104 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32b0      	adds	r2, #176	; 0xb0
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32b0      	adds	r2, #176	; 0xb0
 8007726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7c1b      	ldrb	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d138      	bne.n	80077aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007738:	4b5e      	ldr	r3, [pc, #376]	; (80078b4 <USBD_CDC_Init+0x1e4>)
 800773a:	7819      	ldrb	r1, [r3, #0]
 800773c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007740:	2202      	movs	r2, #2
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f002 fb4d 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007748:	4b5a      	ldr	r3, [pc, #360]	; (80078b4 <USBD_CDC_Init+0x1e4>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	2201      	movs	r2, #1
 8007760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007762:	4b55      	ldr	r3, [pc, #340]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 8007764:	7819      	ldrb	r1, [r3, #0]
 8007766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776a:	2202      	movs	r2, #2
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 fb38 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007772:	4b51      	ldr	r3, [pc, #324]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800778a:	2201      	movs	r2, #1
 800778c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800778e:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <USBD_CDC_Init+0x1ec>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 020f 	and.w	r2, r3, #15
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	3326      	adds	r3, #38	; 0x26
 80077a4:	2210      	movs	r2, #16
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e035      	b.n	8007816 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077aa:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <USBD_CDC_Init+0x1e4>)
 80077ac:	7819      	ldrb	r1, [r3, #0]
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	2202      	movs	r2, #2
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f002 fb15 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077b8:	4b3e      	ldr	r3, [pc, #248]	; (80078b4 <USBD_CDC_Init+0x1e4>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3324      	adds	r3, #36	; 0x24
 80077ce:	2201      	movs	r2, #1
 80077d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077d2:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	2202      	movs	r2, #2
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 fb01 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077e0:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077f8:	2201      	movs	r2, #1
 80077fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80077fc:	4b2f      	ldr	r3, [pc, #188]	; (80078bc <USBD_CDC_Init+0x1ec>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3326      	adds	r3, #38	; 0x26
 8007812:	2210      	movs	r2, #16
 8007814:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007816:	4b29      	ldr	r3, [pc, #164]	; (80078bc <USBD_CDC_Init+0x1ec>)
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	2308      	movs	r3, #8
 800781c:	2203      	movs	r2, #3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f002 fadf 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007824:	4b25      	ldr	r3, [pc, #148]	; (80078bc <USBD_CDC_Init+0x1ec>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 020f 	and.w	r2, r3, #15
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	2201      	movs	r2, #1
 800783c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	33b0      	adds	r3, #176	; 0xb0
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007874:	2302      	movs	r3, #2
 8007876:	e018      	b.n	80078aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7c1b      	ldrb	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007880:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 8007882:	7819      	ldrb	r1, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 fb96 	bl	8009fc0 <USBD_LL_PrepareReceive>
 8007894:	e008      	b.n	80078a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <USBD_CDC_Init+0x1e8>)
 8007898:	7819      	ldrb	r1, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f002 fb8c 	bl	8009fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000093 	.word	0x20000093
 80078b8:	20000094 	.word	0x20000094
 80078bc:	20000095 	.word	0x20000095

080078c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80078cc:	4b3a      	ldr	r3, [pc, #232]	; (80079b8 <USBD_CDC_DeInit+0xf8>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f002 faab 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80078d8:	4b37      	ldr	r3, [pc, #220]	; (80079b8 <USBD_CDC_DeInit+0xf8>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	3324      	adds	r3, #36	; 0x24
 80078ee:	2200      	movs	r2, #0
 80078f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80078f2:	4b32      	ldr	r3, [pc, #200]	; (80079bc <USBD_CDC_DeInit+0xfc>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 fa98 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80078fe:	4b2f      	ldr	r3, [pc, #188]	; (80079bc <USBD_CDC_DeInit+0xfc>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 020f 	and.w	r2, r3, #15
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007916:	2200      	movs	r2, #0
 8007918:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <USBD_CDC_DeInit+0x100>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f002 fa84 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007926:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <USBD_CDC_DeInit+0x100>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f003 020f 	and.w	r2, r3, #15
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	440b      	add	r3, r1
 800793a:	3324      	adds	r3, #36	; 0x24
 800793c:	2200      	movs	r2, #0
 800793e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <USBD_CDC_DeInit+0x100>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 020f 	and.w	r2, r3, #15
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	3326      	adds	r3, #38	; 0x26
 8007956:	2200      	movs	r2, #0
 8007958:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32b0      	adds	r2, #176	; 0xb0
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01f      	beq.n	80079ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	33b0      	adds	r3, #176	; 0xb0
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32b0      	adds	r2, #176	; 0xb0
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	4618      	mov	r0, r3
 8007990:	f002 fb58 	bl	800a044 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32b0      	adds	r2, #176	; 0xb0
 800799e:	2100      	movs	r1, #0
 80079a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000093 	.word	0x20000093
 80079bc:	20000094 	.word	0x20000094
 80079c0:	20000095 	.word	0x20000095

080079c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32b0      	adds	r2, #176	; 0xb0
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e0bf      	b.n	8007b74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d050      	beq.n	8007aa2 <USBD_CDC_Setup+0xde>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	f040 80af 	bne.w	8007b64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d03a      	beq.n	8007a84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	b25b      	sxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	da1b      	bge.n	8007a50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	33b0      	adds	r3, #176	; 0xb0
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	88d2      	ldrh	r2, [r2, #6]
 8007a34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	2b07      	cmp	r3, #7
 8007a3c:	bf28      	it	cs
 8007a3e:	2307      	movcs	r3, #7
 8007a40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	89fa      	ldrh	r2, [r7, #14]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fd89 	bl	8009560 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a4e:	e090      	b.n	8007b72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	785a      	ldrb	r2, [r3, #1]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a60:	d803      	bhi.n	8007a6a <USBD_CDC_Setup+0xa6>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	e000      	b.n	8007a6c <USBD_CDC_Setup+0xa8>
 8007a6a:	2240      	movs	r2, #64	; 0x40
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a72:	6939      	ldr	r1, [r7, #16]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fd9b 	bl	80095b8 <USBD_CtlPrepareRx>
      break;
 8007a82:	e076      	b.n	8007b72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	33b0      	adds	r3, #176	; 0xb0
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	7850      	ldrb	r0, [r2, #1]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	4798      	blx	r3
      break;
 8007aa0:	e067      	b.n	8007b72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b0b      	cmp	r3, #11
 8007aa8:	d851      	bhi.n	8007b4e <USBD_CDC_Setup+0x18a>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_CDC_Setup+0xec>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b4f 	.word	0x08007b4f
 8007abc:	08007b4f 	.word	0x08007b4f
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007b4f 	.word	0x08007b4f
 8007acc:	08007b4f 	.word	0x08007b4f
 8007ad0:	08007b4f 	.word	0x08007b4f
 8007ad4:	08007b4f 	.word	0x08007b4f
 8007ad8:	08007b0b 	.word	0x08007b0b
 8007adc:	08007b35 	.word	0x08007b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d107      	bne.n	8007afc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aec:	f107 030a 	add.w	r3, r7, #10
 8007af0:	2202      	movs	r2, #2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fd33 	bl	8009560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007afa:	e032      	b.n	8007b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fcbd 	bl	800947e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	75fb      	strb	r3, [r7, #23]
          break;
 8007b08:	e02b      	b.n	8007b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d107      	bne.n	8007b26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b16:	f107 030d 	add.w	r3, r7, #13
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fd1e 	bl	8009560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b24:	e01d      	b.n	8007b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fca8 	bl	800947e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	75fb      	strb	r3, [r7, #23]
          break;
 8007b32:	e016      	b.n	8007b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d00f      	beq.n	8007b60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fc9b 	bl	800947e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b4c:	e008      	b.n	8007b60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fc94 	bl	800947e <USBD_CtlError>
          ret = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5a:	e002      	b.n	8007b62 <USBD_CDC_Setup+0x19e>
          break;
 8007b5c:	bf00      	nop
 8007b5e:	e008      	b.n	8007b72 <USBD_CDC_Setup+0x1ae>
          break;
 8007b60:	bf00      	nop
      }
      break;
 8007b62:	e006      	b.n	8007b72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fc89 	bl	800947e <USBD_CtlError>
      ret = USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32b0      	adds	r2, #176	; 0xb0
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e065      	b.n	8007c72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32b0      	adds	r2, #176	; 0xb0
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	f003 020f 	and.w	r2, r3, #15
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3318      	adds	r3, #24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d02f      	beq.n	8007c30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	f003 020f 	and.w	r2, r3, #15
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	3318      	adds	r3, #24
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	f003 010f 	and.w	r1, r3, #15
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	440b      	add	r3, r1
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4403      	add	r3, r0
 8007bf8:	3348      	adds	r3, #72	; 0x48
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d112      	bne.n	8007c30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c22:	78f9      	ldrb	r1, [r7, #3]
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f002 f9a8 	bl	8009f7e <USBD_LL_Transmit>
 8007c2e:	e01f      	b.n	8007c70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	33b0      	adds	r3, #176	; 0xb0
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d010      	beq.n	8007c70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	33b0      	adds	r3, #176	; 0xb0
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	32b0      	adds	r2, #176	; 0xb0
 8007c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	32b0      	adds	r2, #176	; 0xb0
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e01a      	b.n	8007ce2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 f9a6 	bl	800a002 <USBD_LL_GetRxDataSize>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	33b0      	adds	r3, #176	; 0xb0
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	32b0      	adds	r2, #176	; 0xb0
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e025      	b.n	8007d58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	33b0      	adds	r3, #176	; 0xb0
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01a      	beq.n	8007d56 <USBD_CDC_EP0_RxReady+0x6c>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d26:	2bff      	cmp	r3, #255	; 0xff
 8007d28:	d015      	beq.n	8007d56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	33b0      	adds	r3, #176	; 0xb0
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d68:	2182      	movs	r1, #130	; 0x82
 8007d6a:	4818      	ldr	r0, [pc, #96]	; (8007dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d6c:	f000 fd4f 	bl	800880e <USBD_GetEpDesc>
 8007d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d72:	2101      	movs	r1, #1
 8007d74:	4815      	ldr	r0, [pc, #84]	; (8007dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d76:	f000 fd4a 	bl	800880e <USBD_GetEpDesc>
 8007d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d7c:	2181      	movs	r1, #129	; 0x81
 8007d7e:	4813      	ldr	r0, [pc, #76]	; (8007dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d80:	f000 fd45 	bl	800880e <USBD_GetEpDesc>
 8007d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da0:	711a      	strb	r2, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db4:	711a      	strb	r2, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2243      	movs	r2, #67	; 0x43
 8007dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dc0:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000050 	.word	0x20000050

08007dd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dd8:	2182      	movs	r1, #130	; 0x82
 8007dda:	4818      	ldr	r0, [pc, #96]	; (8007e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ddc:	f000 fd17 	bl	800880e <USBD_GetEpDesc>
 8007de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007de2:	2101      	movs	r1, #1
 8007de4:	4815      	ldr	r0, [pc, #84]	; (8007e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007de6:	f000 fd12 	bl	800880e <USBD_GetEpDesc>
 8007dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dec:	2181      	movs	r1, #129	; 0x81
 8007dee:	4813      	ldr	r0, [pc, #76]	; (8007e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007df0:	f000 fd0d 	bl	800880e <USBD_GetEpDesc>
 8007df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	711a      	strb	r2, [r3, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f042 0202 	orr.w	r2, r2, #2
 8007e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d006      	beq.n	8007e2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	711a      	strb	r2, [r3, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f042 0202 	orr.w	r2, r2, #2
 8007e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2243      	movs	r2, #67	; 0x43
 8007e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000050 	.word	0x20000050

08007e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e48:	2182      	movs	r1, #130	; 0x82
 8007e4a:	4818      	ldr	r0, [pc, #96]	; (8007eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e4c:	f000 fcdf 	bl	800880e <USBD_GetEpDesc>
 8007e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e52:	2101      	movs	r1, #1
 8007e54:	4815      	ldr	r0, [pc, #84]	; (8007eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e56:	f000 fcda 	bl	800880e <USBD_GetEpDesc>
 8007e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e5c:	2181      	movs	r1, #129	; 0x81
 8007e5e:	4813      	ldr	r0, [pc, #76]	; (8007eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e60:	f000 fcd5 	bl	800880e <USBD_GetEpDesc>
 8007e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2210      	movs	r2, #16
 8007e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d006      	beq.n	8007e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e80:	711a      	strb	r2, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d006      	beq.n	8007e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e94:	711a      	strb	r2, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2243      	movs	r2, #67	; 0x43
 8007e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000050 	.word	0x20000050

08007eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220a      	movs	r2, #10
 8007ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	2000000c 	.word	0x2000000c

08007ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e009      	b.n	8007ef8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	33b0      	adds	r3, #176	; 0xb0
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	32b0      	adds	r2, #176	; 0xb0
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e008      	b.n	8007f3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	32b0      	adds	r2, #176	; 0xb0
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e004      	b.n	8007f76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32b0      	adds	r2, #176	; 0xb0
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32b0      	adds	r2, #176	; 0xb0
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e025      	b.n	8008002 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11f      	bne.n	8008000 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <USBD_CDC_TransmitPacket+0x88>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 020f 	and.w	r2, r3, #15
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4403      	add	r3, r0
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <USBD_CDC_TransmitPacket+0x88>)
 8007fe8:	7819      	ldrb	r1, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 ffc1 	bl	8009f7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000093 	.word	0x20000093

08008010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32b0      	adds	r2, #176	; 0xb0
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32b0      	adds	r2, #176	; 0xb0
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	e018      	b.n	8008070 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7c1b      	ldrb	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <USBD_CDC_ReceivePacket+0x68>)
 8008048:	7819      	ldrb	r1, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 ffb3 	bl	8009fc0 <USBD_LL_PrepareReceive>
 800805a:	e008      	b.n	800806e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <USBD_CDC_ReceivePacket+0x68>)
 800805e:	7819      	ldrb	r1, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008066:	2340      	movs	r3, #64	; 0x40
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 ffa9 	bl	8009fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000094 	.word	0x20000094

0800807c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e01f      	b.n	80080d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	79fa      	ldrb	r2, [r7, #7]
 80080c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f001 fe23 	bl	8009d14 <USBD_LL_Init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e025      	b.n	8008140 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	; 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	32ae      	adds	r2, #174	; 0xae
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	f107 020e 	add.w	r2, r7, #14
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 fe2b 	bl	8009dac <USBD_LL_Start>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	4611      	mov	r1, r2
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f908 	bl	800940a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	2b02      	cmp	r3, #2
 800821c:	d01a      	beq.n	8008254 <USBD_LL_SetupStage+0x72>
 800821e:	2b02      	cmp	r3, #2
 8008220:	d822      	bhi.n	8008268 <USBD_LL_SetupStage+0x86>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <USBD_LL_SetupStage+0x4a>
 8008226:	2b01      	cmp	r3, #1
 8008228:	d00a      	beq.n	8008240 <USBD_LL_SetupStage+0x5e>
 800822a:	e01d      	b.n	8008268 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb5f 	bl	80088f8 <USBD_StdDevReq>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]
      break;
 800823e:	e020      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fbc7 	bl	80089dc <USBD_StdItfReq>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e016      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fc29 	bl	8008ab4 <USBD_StdEPReq>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e00c      	b.n	8008282 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800826e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008272:	b2db      	uxtb	r3, r3
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fdf8 	bl	8009e6c <USBD_LL_StallEP>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
      break;
 8008280:	bf00      	nop
  }

  return ret;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	460b      	mov	r3, r1
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d16e      	bne.n	8008382 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	f040 8098 	bne.w	80083e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d913      	bls.n	80082ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4293      	cmp	r3, r2
 80082dc:	bf28      	it	cs
 80082de:	4613      	movcs	r3, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 f984 	bl	80095f2 <USBD_CtlContinueRx>
 80082ea:	e07d      	b.n	80083e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082f2:	f003 031f 	and.w	r3, r3, #31
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d014      	beq.n	8008324 <USBD_LL_DataOutStage+0x98>
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d81d      	bhi.n	800833a <USBD_LL_DataOutStage+0xae>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <USBD_LL_DataOutStage+0x7c>
 8008302:	2b01      	cmp	r3, #1
 8008304:	d003      	beq.n	800830e <USBD_LL_DataOutStage+0x82>
 8008306:	e018      	b.n	800833a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	75bb      	strb	r3, [r7, #22]
            break;
 800830c:	e018      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008314:	b2db      	uxtb	r3, r3
 8008316:	4619      	mov	r1, r3
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fa5e 	bl	80087da <USBD_CoreFindIF>
 800831e:	4603      	mov	r3, r0
 8008320:	75bb      	strb	r3, [r7, #22]
            break;
 8008322:	e00d      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800832a:	b2db      	uxtb	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fa60 	bl	80087f4 <USBD_CoreFindEP>
 8008334:	4603      	mov	r3, r0
 8008336:	75bb      	strb	r3, [r7, #22]
            break;
 8008338:	e002      	b.n	8008340 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	75bb      	strb	r3, [r7, #22]
            break;
 800833e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008340:	7dbb      	ldrb	r3, [r7, #22]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d119      	bne.n	800837a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d113      	bne.n	800837a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008352:	7dba      	ldrb	r2, [r7, #22]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	32ae      	adds	r2, #174	; 0xae
 8008358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008362:	7dba      	ldrb	r2, [r7, #22]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800836a:	7dba      	ldrb	r2, [r7, #22]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	32ae      	adds	r2, #174	; 0xae
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 f94a 	bl	8009614 <USBD_CtlSendStatus>
 8008380:	e032      	b.n	80083e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008388:	b2db      	uxtb	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fa31 	bl	80087f4 <USBD_CoreFindEP>
 8008392:	4603      	mov	r3, r0
 8008394:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008396:	7dbb      	ldrb	r3, [r7, #22]
 8008398:	2bff      	cmp	r3, #255	; 0xff
 800839a:	d025      	beq.n	80083e8 <USBD_LL_DataOutStage+0x15c>
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d122      	bne.n	80083e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d117      	bne.n	80083de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083ae:	7dba      	ldrb	r2, [r7, #22]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	32ae      	adds	r2, #174	; 0xae
 80083b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083be:	7dba      	ldrb	r2, [r7, #22]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083c6:	7dba      	ldrb	r2, [r7, #22]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	32ae      	adds	r2, #174	; 0xae
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	7afa      	ldrb	r2, [r7, #11]
 80083d4:	4611      	mov	r1, r2
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	e000      	b.n	80083ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	460b      	mov	r3, r1
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d16f      	bne.n	80084e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3314      	adds	r3, #20
 800840a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008412:	2b02      	cmp	r3, #2
 8008414:	d15a      	bne.n	80084cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	429a      	cmp	r2, r3
 8008420:	d914      	bls.n	800844c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	1ad2      	subs	r2, r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	461a      	mov	r2, r3
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 f8ac 	bl	8009596 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843e:	2300      	movs	r3, #0
 8008440:	2200      	movs	r2, #0
 8008442:	2100      	movs	r1, #0
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f001 fdbb 	bl	8009fc0 <USBD_LL_PrepareReceive>
 800844a:	e03f      	b.n	80084cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	d11c      	bne.n	8008492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008460:	429a      	cmp	r2, r3
 8008462:	d316      	bcc.n	8008492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d20f      	bcs.n	8008492 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f88d 	bl	8009596 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fd98 	bl	8009fc0 <USBD_LL_PrepareReceive>
 8008490:	e01c      	b.n	80084cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d10f      	bne.n	80084be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084be:	2180      	movs	r1, #128	; 0x80
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 fcd3 	bl	8009e6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 f8b7 	bl	800963a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03a      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7ff fe42 	bl	8008160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084e4:	e032      	b.n	800854c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f97f 	bl	80087f4 <USBD_CoreFindEP>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2bff      	cmp	r3, #255	; 0xff
 80084fe:	d025      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d122      	bne.n	800854c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d11c      	bne.n	800854c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008512:	7dfa      	ldrb	r2, [r7, #23]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	32ae      	adds	r2, #174	; 0xae
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d014      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008522:	7dfa      	ldrb	r2, [r7, #23]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800852a:	7dfa      	ldrb	r2, [r7, #23]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	32ae      	adds	r2, #174	; 0xae
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	7afa      	ldrb	r2, [r7, #11]
 8008538:	4611      	mov	r1, r2
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008548:	7dbb      	ldrb	r3, [r7, #22]
 800854a:	e000      	b.n	800854e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	2b00      	cmp	r3, #0
 8008590:	d014      	beq.n	80085bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6852      	ldr	r2, [r2, #4]
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	4611      	mov	r1, r2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	2200      	movs	r2, #0
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fc0d 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2240      	movs	r2, #64	; 0x40
 80085d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	2200      	movs	r2, #0
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fbff 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2240      	movs	r2, #64	; 0x40
 80085ee:	621a      	str	r2, [r3, #32]

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2da      	uxtb	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2204      	movs	r2, #4
 8008634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b04      	cmp	r3, #4
 8008658:	d106      	bne.n	8008668 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008660:	b2da      	uxtb	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b03      	cmp	r3, #3
 8008688:	d110      	bne.n	80086ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	32ae      	adds	r2, #174	; 0xae
 80086cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e01c      	b.n	8008712 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d115      	bne.n	8008710 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	32ae      	adds	r2, #174	; 0xae
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	32ae      	adds	r2, #174	; 0xae
 8008702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	4611      	mov	r1, r2
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32ae      	adds	r2, #174	; 0xae
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	e01c      	b.n	8008776 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b03      	cmp	r3, #3
 8008746:	d115      	bne.n	8008774 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32ae      	adds	r2, #174	; 0xae
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32ae      	adds	r2, #174	; 0xae
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	4611      	mov	r1, r2
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	6852      	ldr	r2, [r2, #4]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	4611      	mov	r1, r2
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008800:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b29b      	uxth	r3, r3
 8008832:	429a      	cmp	r2, r3
 8008834:	d920      	bls.n	8008878 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800883e:	e013      	b.n	8008868 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008840:	f107 030a 	add.w	r3, r7, #10
 8008844:	4619      	mov	r1, r3
 8008846:	6978      	ldr	r0, [r7, #20]
 8008848:	f000 f81b 	bl	8008882 <USBD_GetNextDesc>
 800884c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b05      	cmp	r3, #5
 8008854:	d108      	bne.n	8008868 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	789b      	ldrb	r3, [r3, #2]
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	429a      	cmp	r2, r3
 8008862:	d008      	beq.n	8008876 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	b29a      	uxth	r2, r3
 800886e:	897b      	ldrh	r3, [r7, #10]
 8008870:	429a      	cmp	r2, r3
 8008872:	d8e5      	bhi.n	8008840 <USBD_GetEpDesc+0x32>
 8008874:	e000      	b.n	8008878 <USBD_GetEpDesc+0x6a>
          break;
 8008876:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008878:	693b      	ldr	r3, [r7, #16]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	4413      	add	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088ae:	68fb      	ldr	r3, [r7, #12]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088da:	8a3b      	ldrh	r3, [r7, #16]
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	b21a      	sxth	r2, r3
 80088e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b21b      	sxth	r3, r3
 80088e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088ea:	89fb      	ldrh	r3, [r7, #14]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d005      	beq.n	800891e <USBD_StdDevReq+0x26>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d857      	bhi.n	80089c6 <USBD_StdDevReq+0xce>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00f      	beq.n	800893a <USBD_StdDevReq+0x42>
 800891a:	2b20      	cmp	r3, #32
 800891c:	d153      	bne.n	80089c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	32ae      	adds	r2, #174	; 0xae
 8008928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
      break;
 8008938:	e04a      	b.n	80089d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b09      	cmp	r3, #9
 8008940:	d83b      	bhi.n	80089ba <USBD_StdDevReq+0xc2>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <USBD_StdDevReq+0x50>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800899d 	.word	0x0800899d
 800894c:	080089b1 	.word	0x080089b1
 8008950:	080089bb 	.word	0x080089bb
 8008954:	080089a7 	.word	0x080089a7
 8008958:	080089bb 	.word	0x080089bb
 800895c:	0800897b 	.word	0x0800897b
 8008960:	08008971 	.word	0x08008971
 8008964:	080089bb 	.word	0x080089bb
 8008968:	08008993 	.word	0x08008993
 800896c:	08008985 	.word	0x08008985
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa3c 	bl	8008df0 <USBD_GetDescriptor>
          break;
 8008978:	e024      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fba1 	bl	80090c4 <USBD_SetAddress>
          break;
 8008982:	e01f      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fbe0 	bl	800914c <USBD_SetConfig>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
          break;
 8008990:	e018      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc83 	bl	80092a0 <USBD_GetConfig>
          break;
 800899a:	e013      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fcb4 	bl	800930c <USBD_GetStatus>
          break;
 80089a4:	e00e      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fce3 	bl	8009374 <USBD_SetFeature>
          break;
 80089ae:	e009      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fd07 	bl	80093c6 <USBD_ClrFeature>
          break;
 80089b8:	e004      	b.n	80089c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fd5e 	bl	800947e <USBD_CtlError>
          break;
 80089c2:	bf00      	nop
      }
      break;
 80089c4:	e004      	b.n	80089d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fd58 	bl	800947e <USBD_CtlError>
      break;
 80089ce:	bf00      	nop
  }

  return ret;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop

080089dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f2:	2b40      	cmp	r3, #64	; 0x40
 80089f4:	d005      	beq.n	8008a02 <USBD_StdItfReq+0x26>
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	d852      	bhi.n	8008aa0 <USBD_StdItfReq+0xc4>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <USBD_StdItfReq+0x26>
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d14e      	bne.n	8008aa0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d840      	bhi.n	8008a92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	889b      	ldrh	r3, [r3, #4]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d836      	bhi.n	8008a88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	889b      	ldrh	r3, [r3, #4]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff fed9 	bl	80087da <USBD_CoreFindIF>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	d01d      	beq.n	8008a6e <USBD_StdItfReq+0x92>
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11a      	bne.n	8008a6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a38:	7bba      	ldrb	r2, [r7, #14]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	32ae      	adds	r2, #174	; 0xae
 8008a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00f      	beq.n	8008a68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a48:	7bba      	ldrb	r2, [r7, #14]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a50:	7bba      	ldrb	r2, [r7, #14]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	32ae      	adds	r2, #174	; 0xae
 8008a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a66:	e004      	b.n	8008a72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a6c:	e001      	b.n	8008a72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d110      	bne.n	8008a9c <USBD_StdItfReq+0xc0>
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fdc7 	bl	8009614 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a86:	e009      	b.n	8008a9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fcf7 	bl	800947e <USBD_CtlError>
          break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fcf2 	bl	800947e <USBD_CtlError>
          break;
 8008a9a:	e000      	b.n	8008a9e <USBD_StdItfReq+0xc2>
          break;
 8008a9c:	bf00      	nop
      }
      break;
 8008a9e:	e004      	b.n	8008aaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fceb 	bl	800947e <USBD_CtlError>
      break;
 8008aa8:	bf00      	nop
  }

  return ret;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d007      	beq.n	8008ae4 <USBD_StdEPReq+0x30>
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	f200 817f 	bhi.w	8008dd8 <USBD_StdEPReq+0x324>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d02a      	beq.n	8008b34 <USBD_StdEPReq+0x80>
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	f040 817a 	bne.w	8008dd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff fe83 	bl	80087f4 <USBD_CoreFindEP>
 8008aee:	4603      	mov	r3, r0
 8008af0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008af2:	7b7b      	ldrb	r3, [r7, #13]
 8008af4:	2bff      	cmp	r3, #255	; 0xff
 8008af6:	f000 8174 	beq.w	8008de2 <USBD_StdEPReq+0x32e>
 8008afa:	7b7b      	ldrb	r3, [r7, #13]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 8170 	bne.w	8008de2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b02:	7b7a      	ldrb	r2, [r7, #13]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b0a:	7b7a      	ldrb	r2, [r7, #13]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32ae      	adds	r2, #174	; 0xae
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8163 	beq.w	8008de2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b1c:	7b7a      	ldrb	r2, [r7, #13]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	; 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b32:	e156      	b.n	8008de2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d008      	beq.n	8008b4e <USBD_StdEPReq+0x9a>
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	f300 8145 	bgt.w	8008dcc <USBD_StdEPReq+0x318>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 809b 	beq.w	8008c7e <USBD_StdEPReq+0x1ca>
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d03c      	beq.n	8008bc6 <USBD_StdEPReq+0x112>
 8008b4c:	e13e      	b.n	8008dcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d002      	beq.n	8008b60 <USBD_StdEPReq+0xac>
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d016      	beq.n	8008b8c <USBD_StdEPReq+0xd8>
 8008b5e:	e02c      	b.n	8008bba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00d      	beq.n	8008b82 <USBD_StdEPReq+0xce>
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b80      	cmp	r3, #128	; 0x80
 8008b6a:	d00a      	beq.n	8008b82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 f97b 	bl	8009e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b76:	2180      	movs	r1, #128	; 0x80
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 f977 	bl	8009e6c <USBD_LL_StallEP>
 8008b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b80:	e020      	b.n	8008bc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc7a 	bl	800947e <USBD_CtlError>
              break;
 8008b8a:	e01b      	b.n	8008bc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	885b      	ldrh	r3, [r3, #2]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10e      	bne.n	8008bb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <USBD_StdEPReq+0xfe>
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d008      	beq.n	8008bb2 <USBD_StdEPReq+0xfe>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 f95d 	bl	8009e6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fd2e 	bl	8009614 <USBD_CtlSendStatus>

              break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fc5e 	bl	800947e <USBD_CtlError>
              break;
 8008bc2:	bf00      	nop
          }
          break;
 8008bc4:	e107      	b.n	8008dd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d002      	beq.n	8008bd8 <USBD_StdEPReq+0x124>
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d016      	beq.n	8008c04 <USBD_StdEPReq+0x150>
 8008bd6:	e04b      	b.n	8008c70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <USBD_StdEPReq+0x146>
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d00a      	beq.n	8008bfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f93f 	bl	8009e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bee:	2180      	movs	r1, #128	; 0x80
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f93b 	bl	8009e6c <USBD_LL_StallEP>
 8008bf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bf8:	e040      	b.n	8008c7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fc3e 	bl	800947e <USBD_CtlError>
              break;
 8008c02:	e03b      	b.n	8008c7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d136      	bne.n	8008c7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 f945 	bl	8009eaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fcf7 	bl	8009614 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fde2 	bl	80087f4 <USBD_CoreFindEP>
 8008c30:	4603      	mov	r3, r0
 8008c32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c34:	7b7b      	ldrb	r3, [r7, #13]
 8008c36:	2bff      	cmp	r3, #255	; 0xff
 8008c38:	d01f      	beq.n	8008c7a <USBD_StdEPReq+0x1c6>
 8008c3a:	7b7b      	ldrb	r3, [r7, #13]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d11c      	bne.n	8008c7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c40:	7b7a      	ldrb	r2, [r7, #13]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c48:	7b7a      	ldrb	r2, [r7, #13]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	32ae      	adds	r2, #174	; 0xae
 8008c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d010      	beq.n	8008c7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c58:	7b7a      	ldrb	r2, [r7, #13]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	; 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c6e:	e004      	b.n	8008c7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fc03 	bl	800947e <USBD_CtlError>
              break;
 8008c78:	e000      	b.n	8008c7c <USBD_StdEPReq+0x1c8>
              break;
 8008c7a:	bf00      	nop
          }
          break;
 8008c7c:	e0ab      	b.n	8008dd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d002      	beq.n	8008c90 <USBD_StdEPReq+0x1dc>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d032      	beq.n	8008cf4 <USBD_StdEPReq+0x240>
 8008c8e:	e097      	b.n	8008dc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <USBD_StdEPReq+0x1f2>
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b80      	cmp	r3, #128	; 0x80
 8008c9a:	d004      	beq.n	8008ca6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fbed 	bl	800947e <USBD_CtlError>
                break;
 8008ca4:	e091      	b.n	8008dca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da0b      	bge.n	8008cc6 <USBD_StdEPReq+0x212>
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	3310      	adds	r3, #16
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	e00b      	b.n	8008cde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4413      	add	r3, r2
 8008cdc:	3304      	adds	r3, #4
 8008cde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc37 	bl	8009560 <USBD_CtlSendData>
              break;
 8008cf2:	e06a      	b.n	8008dca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da11      	bge.n	8008d20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	f003 020f 	and.w	r2, r3, #15
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	3324      	adds	r3, #36	; 0x24
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d117      	bne.n	8008d46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fbb0 	bl	800947e <USBD_CtlError>
                  break;
 8008d1e:	e054      	b.n	8008dca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	f003 020f 	and.w	r2, r3, #15
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fb9d 	bl	800947e <USBD_CtlError>
                  break;
 8008d44:	e041      	b.n	8008dca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da0b      	bge.n	8008d66 <USBD_StdEPReq+0x2b2>
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	3304      	adds	r3, #4
 8008d64:	e00b      	b.n	8008d7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <USBD_StdEPReq+0x2d8>
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b80      	cmp	r3, #128	; 0x80
 8008d8a:	d103      	bne.n	8008d94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e00e      	b.n	8008db2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f8a5 	bl	8009ee8 <USBD_LL_IsStallEP>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e002      	b.n	8008db2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2202      	movs	r2, #2
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fbd1 	bl	8009560 <USBD_CtlSendData>
              break;
 8008dbe:	e004      	b.n	8008dca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fb5b 	bl	800947e <USBD_CtlError>
              break;
 8008dc8:	bf00      	nop
          }
          break;
 8008dca:	e004      	b.n	8008dd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fb55 	bl	800947e <USBD_CtlError>
          break;
 8008dd4:	bf00      	nop
      }
      break;
 8008dd6:	e005      	b.n	8008de4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb4f 	bl	800947e <USBD_CtlError>
      break;
 8008de0:	e000      	b.n	8008de4 <USBD_StdEPReq+0x330>
      break;
 8008de2:	bf00      	nop
  }

  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b06      	cmp	r3, #6
 8008e12:	f200 8128 	bhi.w	8009066 <USBD_GetDescriptor+0x276>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_GetDescriptor+0x2c>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e51 	.word	0x08008e51
 8008e24:	08008e91 	.word	0x08008e91
 8008e28:	08009067 	.word	0x08009067
 8008e2c:	08009067 	.word	0x08009067
 8008e30:	08009007 	.word	0x08009007
 8008e34:	08009033 	.word	0x08009033
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
      break;
 8008e4e:	e112      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7c1b      	ldrb	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10d      	bne.n	8008e74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	f107 0208 	add.w	r2, r7, #8
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	2202      	movs	r2, #2
 8008e70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e72:	e100      	b.n	8009076 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	f107 0208 	add.w	r2, r7, #8
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	e0f2      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	885b      	ldrh	r3, [r3, #2]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	f200 80ac 	bhi.w	8008ff4 <USBD_GetDescriptor+0x204>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <USBD_GetDescriptor+0xb4>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ebd 	.word	0x08008ebd
 8008ea8:	08008ef1 	.word	0x08008ef1
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f59 	.word	0x08008f59
 8008eb4:	08008f8d 	.word	0x08008f8d
 8008eb8:	08008fc1 	.word	0x08008fc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ede:	e091      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 facb 	bl	800947e <USBD_CtlError>
            err++;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	3301      	adds	r3, #1
 8008eec:	72fb      	strb	r3, [r7, #11]
          break;
 8008eee:	e089      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	7c12      	ldrb	r2, [r2, #16]
 8008f08:	f107 0108 	add.w	r1, r7, #8
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
 8008f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f12:	e077      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fab1 	bl	800947e <USBD_CtlError>
            err++;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	72fb      	strb	r3, [r7, #11]
          break;
 8008f22:	e06f      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f46:	e05d      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa97 	bl	800947e <USBD_CtlError>
            err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
          break;
 8008f56:	e055      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7a:	e043      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa7d 	bl	800947e <USBD_CtlError>
            err++;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3301      	adds	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8a:	e03b      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fae:	e029      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa63 	bl	800947e <USBD_CtlError>
            err++;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fbe:	e021      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe2:	e00f      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa49 	bl	800947e <USBD_CtlError>
            err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff2:	e007      	b.n	8009004 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa41 	bl	800947e <USBD_CtlError>
          err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009002:	bf00      	nop
      }
      break;
 8009004:	e037      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7c1b      	ldrb	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	f107 0208 	add.w	r2, r7, #8
 800901a:	4610      	mov	r0, r2
 800901c:	4798      	blx	r3
 800901e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009020:	e029      	b.n	8009076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa2a 	bl	800947e <USBD_CtlError>
        err++;
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	3301      	adds	r3, #1
 800902e:	72fb      	strb	r3, [r7, #11]
      break;
 8009030:	e021      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7c1b      	ldrb	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10d      	bne.n	8009056 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f107 0208 	add.w	r2, r7, #8
 8009046:	4610      	mov	r0, r2
 8009048:	4798      	blx	r3
 800904a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	2207      	movs	r2, #7
 8009052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009054:	e00f      	b.n	8009076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fa10 	bl	800947e <USBD_CtlError>
        err++;
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	3301      	adds	r3, #1
 8009062:	72fb      	strb	r3, [r7, #11]
      break;
 8009064:	e007      	b.n	8009076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa08 	bl	800947e <USBD_CtlError>
      err++;
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	3301      	adds	r3, #1
 8009072:	72fb      	strb	r3, [r7, #11]
      break;
 8009074:	bf00      	nop
  }

  if (err != 0U)
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d11e      	bne.n	80090ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	88db      	ldrh	r3, [r3, #6]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d016      	beq.n	80090b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009084:	893b      	ldrh	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00e      	beq.n	80090a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88da      	ldrh	r2, [r3, #6]
 800908e:	893b      	ldrh	r3, [r7, #8]
 8009090:	4293      	cmp	r3, r2
 8009092:	bf28      	it	cs
 8009094:	4613      	movcs	r3, r2
 8009096:	b29b      	uxth	r3, r3
 8009098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800909a:	893b      	ldrh	r3, [r7, #8]
 800909c:	461a      	mov	r2, r3
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa5d 	bl	8009560 <USBD_CtlSendData>
 80090a6:	e009      	b.n	80090bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9e7 	bl	800947e <USBD_CtlError>
 80090b0:	e004      	b.n	80090bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 faae 	bl	8009614 <USBD_CtlSendStatus>
 80090b8:	e000      	b.n	80090bc <USBD_GetDescriptor+0x2cc>
    return;
 80090ba:	bf00      	nop
  }
}
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop

080090c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	889b      	ldrh	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d131      	bne.n	800913a <USBD_SetAddress+0x76>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	88db      	ldrh	r3, [r3, #6]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d12d      	bne.n	800913a <USBD_SetAddress+0x76>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	2b7f      	cmp	r3, #127	; 0x7f
 80090e4:	d829      	bhi.n	800913a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d104      	bne.n	8009108 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9bc 	bl	800947e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	e01d      	b.n	8009144 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	7bfa      	ldrb	r2, [r7, #15]
 800910c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 ff13 	bl	8009f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa7a 	bl	8009614 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d004      	beq.n	8009130 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2202      	movs	r2, #2
 800912a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912e:	e009      	b.n	8009144 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009138:	e004      	b.n	8009144 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f99e 	bl	800947e <USBD_CtlError>
  }
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	885b      	ldrh	r3, [r3, #2]
 800915e:	b2da      	uxtb	r2, r3
 8009160:	4b4e      	ldr	r3, [pc, #312]	; (800929c <USBD_SetConfig+0x150>)
 8009162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009164:	4b4d      	ldr	r3, [pc, #308]	; (800929c <USBD_SetConfig+0x150>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d905      	bls.n	8009178 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f985 	bl	800947e <USBD_CtlError>
    return USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	e08c      	b.n	8009292 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d002      	beq.n	800918a <USBD_SetConfig+0x3e>
 8009184:	2b03      	cmp	r3, #3
 8009186:	d029      	beq.n	80091dc <USBD_SetConfig+0x90>
 8009188:	e075      	b.n	8009276 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800918a:	4b44      	ldr	r3, [pc, #272]	; (800929c <USBD_SetConfig+0x150>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d020      	beq.n	80091d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009192:	4b42      	ldr	r3, [pc, #264]	; (800929c <USBD_SetConfig+0x150>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800919c:	4b3f      	ldr	r3, [pc, #252]	; (800929c <USBD_SetConfig+0x150>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7fe ffe7 	bl	8008176 <USBD_SetClassConfig>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d008      	beq.n	80091c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f962 	bl	800947e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091c2:	e065      	b.n	8009290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa25 	bl	8009614 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2203      	movs	r2, #3
 80091ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091d2:	e05d      	b.n	8009290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa1d 	bl	8009614 <USBD_CtlSendStatus>
      break;
 80091da:	e059      	b.n	8009290 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091dc:	4b2f      	ldr	r3, [pc, #188]	; (800929c <USBD_SetConfig+0x150>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d112      	bne.n	800920a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <USBD_SetConfig+0x150>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091f6:	4b29      	ldr	r3, [pc, #164]	; (800929c <USBD_SetConfig+0x150>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7fe ffd6 	bl	80081ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa06 	bl	8009614 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009208:	e042      	b.n	8009290 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800920a:	4b24      	ldr	r3, [pc, #144]	; (800929c <USBD_SetConfig+0x150>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d02a      	beq.n	800926e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fe ffc4 	bl	80081ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009226:	4b1d      	ldr	r3, [pc, #116]	; (800929c <USBD_SetConfig+0x150>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009230:	4b1a      	ldr	r3, [pc, #104]	; (800929c <USBD_SetConfig+0x150>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7fe ff9d 	bl	8008176 <USBD_SetClassConfig>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00f      	beq.n	8009266 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f918 	bl	800947e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fe ffa9 	bl	80081ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009264:	e014      	b.n	8009290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f9d4 	bl	8009614 <USBD_CtlSendStatus>
      break;
 800926c:	e010      	b.n	8009290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9d0 	bl	8009614 <USBD_CtlSendStatus>
      break;
 8009274:	e00c      	b.n	8009290 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f900 	bl	800947e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <USBD_SetConfig+0x150>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fe ff92 	bl	80081ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800928a:	2303      	movs	r3, #3
 800928c:	73fb      	strb	r3, [r7, #15]
      break;
 800928e:	bf00      	nop
  }

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200005fc 	.word	0x200005fc

080092a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	88db      	ldrh	r3, [r3, #6]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d004      	beq.n	80092bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8e2 	bl	800947e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092ba:	e023      	b.n	8009304 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	dc02      	bgt.n	80092ce <USBD_GetConfig+0x2e>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc03      	bgt.n	80092d4 <USBD_GetConfig+0x34>
 80092cc:	e015      	b.n	80092fa <USBD_GetConfig+0x5a>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d00b      	beq.n	80092ea <USBD_GetConfig+0x4a>
 80092d2:	e012      	b.n	80092fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3308      	adds	r3, #8
 80092de:	2201      	movs	r2, #1
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f93c 	bl	8009560 <USBD_CtlSendData>
        break;
 80092e8:	e00c      	b.n	8009304 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3304      	adds	r3, #4
 80092ee:	2201      	movs	r2, #1
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f934 	bl	8009560 <USBD_CtlSendData>
        break;
 80092f8:	e004      	b.n	8009304 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f8be 	bl	800947e <USBD_CtlError>
        break;
 8009302:	bf00      	nop
}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931c:	b2db      	uxtb	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	2b02      	cmp	r3, #2
 8009322:	d81e      	bhi.n	8009362 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	88db      	ldrh	r3, [r3, #6]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d004      	beq.n	8009336 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f8a5 	bl	800947e <USBD_CtlError>
        break;
 8009334:	e01a      	b.n	800936c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f043 0202 	orr.w	r2, r3, #2
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	330c      	adds	r3, #12
 8009356:	2202      	movs	r2, #2
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f900 	bl	8009560 <USBD_CtlSendData>
      break;
 8009360:	e004      	b.n	800936c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f88a 	bl	800947e <USBD_CtlError>
      break;
 800936a:	bf00      	nop
  }
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	885b      	ldrh	r3, [r3, #2]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d107      	bne.n	8009396 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f940 	bl	8009614 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009394:	e013      	b.n	80093be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	885b      	ldrh	r3, [r3, #2]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d10b      	bne.n	80093b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	889b      	ldrh	r3, [r3, #4]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f930 	bl	8009614 <USBD_CtlSendStatus>
}
 80093b4:	e003      	b.n	80093be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f860 	bl	800947e <USBD_CtlError>
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d80b      	bhi.n	80093f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	885b      	ldrh	r3, [r3, #2]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10c      	bne.n	8009400 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f910 	bl	8009614 <USBD_CtlSendStatus>
      }
      break;
 80093f4:	e004      	b.n	8009400 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f840 	bl	800947e <USBD_CtlError>
      break;
 80093fe:	e000      	b.n	8009402 <USBD_ClrFeature+0x3c>
      break;
 8009400:	bf00      	nop
  }
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3301      	adds	r3, #1
 8009424:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fa41 	bl	80088bc <SWAPBYTE>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff fa34 	bl	80088bc <SWAPBYTE>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7ff fa27 	bl	80088bc <SWAPBYTE>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	80da      	strh	r2, [r3, #6]
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009488:	2180      	movs	r1, #128	; 0x80
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fcee 	bl	8009e6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fcea 	bl	8009e6c <USBD_LL_StallEP>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d036      	beq.n	8009524 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f836 	bl	800952c <USBD_GetLen>
 80094c0:	4603      	mov	r3, r0
 80094c2:	3301      	adds	r3, #1
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7812      	ldrb	r2, [r2, #0]
 80094d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	3301      	adds	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	2203      	movs	r2, #3
 80094e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	3301      	adds	r3, #1
 80094ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094f0:	e013      	b.n	800951a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	4413      	add	r3, r2
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	3301      	adds	r3, #1
 8009502:	613b      	str	r3, [r7, #16]
    idx++;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	3301      	adds	r3, #1
 8009508:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	4413      	add	r3, r2
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]
    idx++;
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	3301      	adds	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e7      	bne.n	80094f2 <USBD_GetString+0x52>
 8009522:	e000      	b.n	8009526 <USBD_GetString+0x86>
    return;
 8009524:	bf00      	nop
  }
}
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800953c:	e005      	b.n	800954a <USBD_GetLen+0x1e>
  {
    len++;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	3301      	adds	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	3301      	adds	r3, #1
 8009548:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f5      	bne.n	800953e <USBD_GetLen+0x12>
  }

  return len;
 8009552:	7bfb      	ldrb	r3, [r7, #15]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2202      	movs	r2, #2
 8009570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	2100      	movs	r1, #0
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fcf9 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fce8 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	2100      	movs	r1, #0
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 fcec 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	2100      	movs	r1, #0
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fcdb 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2204      	movs	r2, #4
 8009620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009624:	2300      	movs	r3, #0
 8009626:	2200      	movs	r2, #0
 8009628:	2100      	movs	r1, #0
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fca7 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2205      	movs	r2, #5
 8009646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800964a:	2300      	movs	r3, #0
 800964c:	2200      	movs	r2, #0
 800964e:	2100      	movs	r1, #0
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fcb5 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009664:	2200      	movs	r2, #0
 8009666:	4912      	ldr	r1, [pc, #72]	; (80096b0 <MX_USB_DEVICE_Init+0x50>)
 8009668:	4812      	ldr	r0, [pc, #72]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800966a:	f7fe fd07 	bl	800807c <USBD_Init>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009674:	f7f8 f884 	bl	8001780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009678:	490f      	ldr	r1, [pc, #60]	; (80096b8 <MX_USB_DEVICE_Init+0x58>)
 800967a:	480e      	ldr	r0, [pc, #56]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800967c:	f7fe fd2e 	bl	80080dc <USBD_RegisterClass>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009686:	f7f8 f87b 	bl	8001780 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800968a:	490c      	ldr	r1, [pc, #48]	; (80096bc <MX_USB_DEVICE_Init+0x5c>)
 800968c:	4809      	ldr	r0, [pc, #36]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800968e:	f7fe fc1f 	bl	8007ed0 <USBD_CDC_RegisterInterface>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009698:	f7f8 f872 	bl	8001780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800969c:	4805      	ldr	r0, [pc, #20]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800969e:	f7fe fd53 	bl	8008148 <USBD_Start>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096a8:	f7f8 f86a 	bl	8001780 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096ac:	bf00      	nop
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	200000ac 	.word	0x200000ac
 80096b4:	20000600 	.word	0x20000600
 80096b8:	20000018 	.word	0x20000018
 80096bc:	20000098 	.word	0x20000098

080096c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096c4:	2200      	movs	r2, #0
 80096c6:	4905      	ldr	r1, [pc, #20]	; (80096dc <CDC_Init_FS+0x1c>)
 80096c8:	4805      	ldr	r0, [pc, #20]	; (80096e0 <CDC_Init_FS+0x20>)
 80096ca:	f7fe fc1b 	bl	8007f04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ce:	4905      	ldr	r1, [pc, #20]	; (80096e4 <CDC_Init_FS+0x24>)
 80096d0:	4803      	ldr	r0, [pc, #12]	; (80096e0 <CDC_Init_FS+0x20>)
 80096d2:	f7fe fc39 	bl	8007f48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	200010dc 	.word	0x200010dc
 80096e0:	20000600 	.word	0x20000600
 80096e4:	200008dc 	.word	0x200008dc

080096e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
 8009704:	4613      	mov	r3, r2
 8009706:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b23      	cmp	r3, #35	; 0x23
 800970c:	d84a      	bhi.n	80097a4 <CDC_Control_FS+0xac>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <CDC_Control_FS+0x1c>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	080097a5 	.word	0x080097a5
 8009718:	080097a5 	.word	0x080097a5
 800971c:	080097a5 	.word	0x080097a5
 8009720:	080097a5 	.word	0x080097a5
 8009724:	080097a5 	.word	0x080097a5
 8009728:	080097a5 	.word	0x080097a5
 800972c:	080097a5 	.word	0x080097a5
 8009730:	080097a5 	.word	0x080097a5
 8009734:	080097a5 	.word	0x080097a5
 8009738:	080097a5 	.word	0x080097a5
 800973c:	080097a5 	.word	0x080097a5
 8009740:	080097a5 	.word	0x080097a5
 8009744:	080097a5 	.word	0x080097a5
 8009748:	080097a5 	.word	0x080097a5
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097a5 	.word	0x080097a5
 8009754:	080097a5 	.word	0x080097a5
 8009758:	080097a5 	.word	0x080097a5
 800975c:	080097a5 	.word	0x080097a5
 8009760:	080097a5 	.word	0x080097a5
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097a5 	.word	0x080097a5
 800976c:	080097a5 	.word	0x080097a5
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080097a5 	.word	0x080097a5
 8009778:	080097a5 	.word	0x080097a5
 800977c:	080097a5 	.word	0x080097a5
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097a5 	.word	0x080097a5
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097a5 	.word	0x080097a5
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097a5 	.word	0x080097a5
 800979c:	080097a5 	.word	0x080097a5
 80097a0:	080097a5 	.word	0x080097a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097a4:	bf00      	nop
  }

  return (USBD_OK);
 80097a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4805      	ldr	r0, [pc, #20]	; (80097d8 <CDC_Receive_FS+0x24>)
 80097c2:	f7fe fbc1 	bl	8007f48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097c6:	4804      	ldr	r0, [pc, #16]	; (80097d8 <CDC_Receive_FS+0x24>)
 80097c8:	f7fe fc22 	bl	8008010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000600 	.word	0x20000600

080097dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <CDC_Transmit_FS+0x48>)
 80097ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80097fe:	2301      	movs	r3, #1
 8009800:	e00b      	b.n	800981a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009802:	887b      	ldrh	r3, [r7, #2]
 8009804:	461a      	mov	r2, r3
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <CDC_Transmit_FS+0x48>)
 800980a:	f7fe fb7b 	bl	8007f04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800980e:	4805      	ldr	r0, [pc, #20]	; (8009824 <CDC_Transmit_FS+0x48>)
 8009810:	f7fe fbb8 	bl	8007f84 <USBD_CDC_TransmitPacket>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000600 	.word	0x20000600

08009828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800983a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800983e:	4618      	mov	r0, r3
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2212      	movs	r2, #18
 800985c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800985e:	4b03      	ldr	r3, [pc, #12]	; (800986c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	200000c8 	.word	0x200000c8

08009870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2204      	movs	r2, #4
 8009880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009882:	4b03      	ldr	r3, [pc, #12]	; (8009890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	200000dc 	.word	0x200000dc

08009894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	6039      	str	r1, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d105      	bne.n	80098b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	4907      	ldr	r1, [pc, #28]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098aa:	4808      	ldr	r0, [pc, #32]	; (80098cc <USBD_FS_ProductStrDescriptor+0x38>)
 80098ac:	f7ff fdf8 	bl	80094a0 <USBD_GetString>
 80098b0:	e004      	b.n	80098bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	4904      	ldr	r1, [pc, #16]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098b6:	4805      	ldr	r0, [pc, #20]	; (80098cc <USBD_FS_ProductStrDescriptor+0x38>)
 80098b8:	f7ff fdf2 	bl	80094a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098bc:	4b02      	ldr	r3, [pc, #8]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200018dc 	.word	0x200018dc
 80098cc:	0800d084 	.word	0x0800d084

080098d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098e0:	4804      	ldr	r0, [pc, #16]	; (80098f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098e2:	f7ff fddd 	bl	80094a0 <USBD_GetString>
  return USBD_StrDesc;
 80098e6:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200018dc 	.word	0x200018dc
 80098f4:	0800d09c 	.word	0x0800d09c

080098f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	221a      	movs	r2, #26
 8009908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800990a:	f000 f843 	bl	8009994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800990e:	4b02      	ldr	r3, [pc, #8]	; (8009918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200000e0 	.word	0x200000e0

0800991c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d105      	bne.n	800993a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4907      	ldr	r1, [pc, #28]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009932:	4808      	ldr	r0, [pc, #32]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009934:	f7ff fdb4 	bl	80094a0 <USBD_GetString>
 8009938:	e004      	b.n	8009944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4904      	ldr	r1, [pc, #16]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800993e:	4805      	ldr	r0, [pc, #20]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009940:	f7ff fdae 	bl	80094a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009944:	4b02      	ldr	r3, [pc, #8]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	200018dc 	.word	0x200018dc
 8009954:	0800d0b0 	.word	0x0800d0b0

08009958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4907      	ldr	r1, [pc, #28]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800996e:	4808      	ldr	r0, [pc, #32]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009970:	f7ff fd96 	bl	80094a0 <USBD_GetString>
 8009974:	e004      	b.n	8009980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4904      	ldr	r1, [pc, #16]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800997c:	f7ff fd90 	bl	80094a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	200018dc 	.word	0x200018dc
 8009990:	0800d0bc 	.word	0x0800d0bc

08009994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <Get_SerialNum+0x44>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <Get_SerialNum+0x48>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099a6:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <Get_SerialNum+0x4c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099ba:	2208      	movs	r2, #8
 80099bc:	4909      	ldr	r1, [pc, #36]	; (80099e4 <Get_SerialNum+0x50>)
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 f814 	bl	80099ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099c4:	2204      	movs	r2, #4
 80099c6:	4908      	ldr	r1, [pc, #32]	; (80099e8 <Get_SerialNum+0x54>)
 80099c8:	68b8      	ldr	r0, [r7, #8]
 80099ca:	f000 f80f 	bl	80099ec <IntToUnicode>
  }
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	1fff7a10 	.word	0x1fff7a10
 80099dc:	1fff7a14 	.word	0x1fff7a14
 80099e0:	1fff7a18 	.word	0x1fff7a18
 80099e4:	200000e2 	.word	0x200000e2
 80099e8:	200000f2 	.word	0x200000f2

080099ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e027      	b.n	8009a54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d80b      	bhi.n	8009a24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	0f1b      	lsrs	r3, r3, #28
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4619      	mov	r1, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	440b      	add	r3, r1
 8009a1c:	3230      	adds	r2, #48	; 0x30
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	e00a      	b.n	8009a3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0f1b      	lsrs	r3, r3, #28
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	440b      	add	r3, r1
 8009a34:	3237      	adds	r2, #55	; 0x37
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	3301      	adds	r3, #1
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4413      	add	r3, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	3301      	adds	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
 8009a54:	7dfa      	ldrb	r2, [r7, #23]
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d3d3      	bcc.n	8009a04 <IntToUnicode+0x18>
  }
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a74:	f107 0314 	add.w	r3, r7, #20
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	609a      	str	r2, [r3, #8]
 8009a80:	60da      	str	r2, [r3, #12]
 8009a82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a8c:	d147      	bne.n	8009b1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	4a24      	ldr	r2, [pc, #144]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a9e:	4b22      	ldr	r3, [pc, #136]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009aaa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009abc:	230a      	movs	r3, #10
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4819      	ldr	r0, [pc, #100]	; (8009b2c <HAL_PCD_MspInit+0xc0>)
 8009ac8:	f7f9 f9ca 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009ada:	f107 0314 	add.w	r3, r7, #20
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4812      	ldr	r0, [pc, #72]	; (8009b2c <HAL_PCD_MspInit+0xc0>)
 8009ae2:	f7f9 f9bd 	bl	8002e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ae6:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aea:	4a0f      	ldr	r2, [pc, #60]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af0:	6353      	str	r3, [r2, #52]	; 0x34
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afa:	4a0b      	ldr	r2, [pc, #44]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b00:	6453      	str	r3, [r2, #68]	; 0x44
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <HAL_PCD_MspInit+0xbc>)
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	2043      	movs	r0, #67	; 0x43
 8009b14:	f7f8 fe59 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b18:	2043      	movs	r0, #67	; 0x43
 8009b1a:	f7f8 fe72 	bl	8002802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3728      	adds	r7, #40	; 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	40020000 	.word	0x40020000

08009b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b44:	4619      	mov	r1, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	f7fe fb4b 	bl	80081e2 <USBD_LL_SetupStage>
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f7fe fb85 	bl	800828c <USBD_LL_DataOutStage>
}
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	334c      	adds	r3, #76	; 0x4c
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f7fe fc1e 	bl	80083f2 <USBD_LL_DataInStage>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fd52 	bl	8008676 <USBD_LL_SOF>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
 8009bf2:	e008      	b.n	8009c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d102      	bne.n	8009c02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
 8009c00:	e001      	b.n	8009c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c02:	f7f7 fdbd 	bl	8001780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c0c:	7bfa      	ldrb	r2, [r7, #15]
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fcf2 	bl	80085fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fc9a 	bl	8008556 <USBD_LL_Reset>
}
 8009c22:	bf00      	nop
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fced 	bl	800861a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <HAL_PCD_SuspendCallback+0x48>)
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	4a03      	ldr	r2, [pc, #12]	; (8009c74 <HAL_PCD_SuspendCallback+0x48>)
 8009c66:	f043 0306 	orr.w	r3, r3, #6
 8009c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	e000ed00 	.word	0xe000ed00

08009c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fcdd 	bl	8008646 <USBD_LL_Resume>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fd35 	bl	800871a <USBD_LL_IsoOUTIncomplete>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fcf1 	bl	80086b6 <USBD_LL_IsoINIncomplete>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fd47 	bl	800877e <USBD_LL_DevConnected>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fd44 	bl	8008794 <USBD_LL_DevDisconnected>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d13c      	bne.n	8009d9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d24:	4a20      	ldr	r2, [pc, #128]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a1e      	ldr	r2, [pc, #120]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d34:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d3e:	2204      	movs	r2, #4
 8009d40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d42:	4b19      	ldr	r3, [pc, #100]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d44:	2202      	movs	r2, #2
 8009d46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d48:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d54:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d72:	480d      	ldr	r0, [pc, #52]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d74:	f7f9 fa51 	bl	800321a <HAL_PCD_Init>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d7e:	f7f7 fcff 	bl	8001780 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d82:	2180      	movs	r1, #128	; 0x80
 8009d84:	4808      	ldr	r0, [pc, #32]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d86:	f7fa fca8 	bl	80046da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d8a:	2240      	movs	r2, #64	; 0x40
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4806      	ldr	r0, [pc, #24]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d90:	f7fa fc5c 	bl	800464c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d94:	2280      	movs	r2, #128	; 0x80
 8009d96:	2101      	movs	r1, #1
 8009d98:	4803      	ldr	r0, [pc, #12]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d9a:	f7fa fc57 	bl	800464c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20001adc 	.word	0x20001adc

08009dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7f9 fb46 	bl	8003454 <HAL_PCD_Start>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f942 	bl	800a058 <USBD_Get_USB_Status>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	4608      	mov	r0, r1
 8009dec:	4611      	mov	r1, r2
 8009dee:	461a      	mov	r2, r3
 8009df0:	4603      	mov	r3, r0
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70bb      	strb	r3, [r7, #2]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e0a:	78bb      	ldrb	r3, [r7, #2]
 8009e0c:	883a      	ldrh	r2, [r7, #0]
 8009e0e:	78f9      	ldrb	r1, [r7, #3]
 8009e10:	f7fa f817 	bl	8003e42 <HAL_PCD_EP_Open>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 f91c 	bl	800a058 <USBD_Get_USB_Status>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e48:	78fa      	ldrb	r2, [r7, #3]
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fa f860 	bl	8003f12 <HAL_PCD_EP_Close>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 f8fd 	bl	800a058 <USBD_Get_USB_Status>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fa f938 	bl	8004100 <HAL_PCD_EP_SetStall>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f8de 	bl	800a058 <USBD_Get_USB_Status>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fa f97d 	bl	80041c8 <HAL_PCD_EP_ClrStall>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f8bf 	bl	800a058 <USBD_Get_USB_Status>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	440b      	add	r3, r1
 8009f16:	333e      	adds	r3, #62	; 0x3e
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	e00b      	b.n	8009f34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	4613      	mov	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009f32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f9 ff4a 	bl	8003df8 <HAL_PCD_SetAddress>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 f874 	bl	800a058 <USBD_Get_USB_Status>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f9c:	7af9      	ldrb	r1, [r7, #11]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f7fa f863 	bl	800406c <HAL_PCD_EP_Transmit>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f853 	bl	800a058 <USBD_Get_USB_Status>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fde:	7af9      	ldrb	r1, [r7, #11]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f7f9 ffdf 	bl	8003fa6 <HAL_PCD_EP_Receive>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f832 	bl	800a058 <USBD_Get_USB_Status>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a014:	78fa      	ldrb	r2, [r7, #3]
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fa f80f 	bl	800403c <HAL_PCD_EP_GetRxCount>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a030:	4b03      	ldr	r3, [pc, #12]	; (800a040 <USBD_static_malloc+0x18>)
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20001fe8 	.word	0x20001fe8

0800a044 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d817      	bhi.n	800a09c <USBD_Get_USB_Status+0x44>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <USBD_Get_USB_Status+0x1c>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a08b 	.word	0x0800a08b
 800a07c:	0800a091 	.word	0x0800a091
 800a080:	0800a097 	.word	0x0800a097
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
    break;
 800a088:	e00b      	b.n	800a0a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a08a:	2303      	movs	r3, #3
 800a08c:	73fb      	strb	r3, [r7, #15]
    break;
 800a08e:	e008      	b.n	800a0a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a090:	2301      	movs	r3, #1
 800a092:	73fb      	strb	r3, [r7, #15]
    break;
 800a094:	e005      	b.n	800a0a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a096:	2303      	movs	r3, #3
 800a098:	73fb      	strb	r3, [r7, #15]
    break;
 800a09a:	e002      	b.n	800a0a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a0:	bf00      	nop
  }
  return usb_status;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <__errno>:
 800a0b0:	4b01      	ldr	r3, [pc, #4]	; (800a0b8 <__errno+0x8>)
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	200000fc 	.word	0x200000fc

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4d0d      	ldr	r5, [pc, #52]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1b64      	subs	r4, r4, r5
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4d0b      	ldr	r5, [pc, #44]	; (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	; (800a100 <__libc_init_array+0x44>)
 800a0d0:	f002 ff92 	bl	800cff8 <_init>
 800a0d4:	1b64      	subs	r4, r4, r5
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800d4c4 	.word	0x0800d4c4
 800a0f8:	0800d4c4 	.word	0x0800d4c4
 800a0fc:	0800d4c4 	.word	0x0800d4c4
 800a100:	0800d4c8 	.word	0x0800d4c8

0800a104 <memset>:
 800a104:	4402      	add	r2, r0
 800a106:	4603      	mov	r3, r0
 800a108:	4293      	cmp	r3, r2
 800a10a:	d100      	bne.n	800a10e <memset+0xa>
 800a10c:	4770      	bx	lr
 800a10e:	f803 1b01 	strb.w	r1, [r3], #1
 800a112:	e7f9      	b.n	800a108 <memset+0x4>

0800a114 <__cvt>:
 800a114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	ec55 4b10 	vmov	r4, r5, d0
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	460e      	mov	r6, r1
 800a120:	4619      	mov	r1, r3
 800a122:	462b      	mov	r3, r5
 800a124:	bfbb      	ittet	lt
 800a126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a12a:	461d      	movlt	r5, r3
 800a12c:	2300      	movge	r3, #0
 800a12e:	232d      	movlt	r3, #45	; 0x2d
 800a130:	700b      	strb	r3, [r1, #0]
 800a132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a138:	4691      	mov	r9, r2
 800a13a:	f023 0820 	bic.w	r8, r3, #32
 800a13e:	bfbc      	itt	lt
 800a140:	4622      	movlt	r2, r4
 800a142:	4614      	movlt	r4, r2
 800a144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a148:	d005      	beq.n	800a156 <__cvt+0x42>
 800a14a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a14e:	d100      	bne.n	800a152 <__cvt+0x3e>
 800a150:	3601      	adds	r6, #1
 800a152:	2102      	movs	r1, #2
 800a154:	e000      	b.n	800a158 <__cvt+0x44>
 800a156:	2103      	movs	r1, #3
 800a158:	ab03      	add	r3, sp, #12
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	ab02      	add	r3, sp, #8
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	ec45 4b10 	vmov	d0, r4, r5
 800a164:	4653      	mov	r3, sl
 800a166:	4632      	mov	r2, r6
 800a168:	f000 fe3a 	bl	800ade0 <_dtoa_r>
 800a16c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a170:	4607      	mov	r7, r0
 800a172:	d102      	bne.n	800a17a <__cvt+0x66>
 800a174:	f019 0f01 	tst.w	r9, #1
 800a178:	d022      	beq.n	800a1c0 <__cvt+0xac>
 800a17a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a17e:	eb07 0906 	add.w	r9, r7, r6
 800a182:	d110      	bne.n	800a1a6 <__cvt+0x92>
 800a184:	783b      	ldrb	r3, [r7, #0]
 800a186:	2b30      	cmp	r3, #48	; 0x30
 800a188:	d10a      	bne.n	800a1a0 <__cvt+0x8c>
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 800a196:	b918      	cbnz	r0, 800a1a0 <__cvt+0x8c>
 800a198:	f1c6 0601 	rsb	r6, r6, #1
 800a19c:	f8ca 6000 	str.w	r6, [sl]
 800a1a0:	f8da 3000 	ldr.w	r3, [sl]
 800a1a4:	4499      	add	r9, r3
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f6 fc9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1b2:	b108      	cbz	r0, 800a1b8 <__cvt+0xa4>
 800a1b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b8:	2230      	movs	r2, #48	; 0x30
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	454b      	cmp	r3, r9
 800a1be:	d307      	bcc.n	800a1d0 <__cvt+0xbc>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1c4:	1bdb      	subs	r3, r3, r7
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	b004      	add	sp, #16
 800a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d0:	1c59      	adds	r1, r3, #1
 800a1d2:	9103      	str	r1, [sp, #12]
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	e7f0      	b.n	800a1ba <__cvt+0xa6>

0800a1d8 <__exponent>:
 800a1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	bfb8      	it	lt
 800a1e0:	4249      	neglt	r1, r1
 800a1e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a1e6:	bfb4      	ite	lt
 800a1e8:	222d      	movlt	r2, #45	; 0x2d
 800a1ea:	222b      	movge	r2, #43	; 0x2b
 800a1ec:	2909      	cmp	r1, #9
 800a1ee:	7042      	strb	r2, [r0, #1]
 800a1f0:	dd2a      	ble.n	800a248 <__exponent+0x70>
 800a1f2:	f10d 0407 	add.w	r4, sp, #7
 800a1f6:	46a4      	mov	ip, r4
 800a1f8:	270a      	movs	r7, #10
 800a1fa:	46a6      	mov	lr, r4
 800a1fc:	460a      	mov	r2, r1
 800a1fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a202:	fb07 1516 	mls	r5, r7, r6, r1
 800a206:	3530      	adds	r5, #48	; 0x30
 800a208:	2a63      	cmp	r2, #99	; 0x63
 800a20a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a20e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a212:	4631      	mov	r1, r6
 800a214:	dcf1      	bgt.n	800a1fa <__exponent+0x22>
 800a216:	3130      	adds	r1, #48	; 0x30
 800a218:	f1ae 0502 	sub.w	r5, lr, #2
 800a21c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a220:	1c44      	adds	r4, r0, #1
 800a222:	4629      	mov	r1, r5
 800a224:	4561      	cmp	r1, ip
 800a226:	d30a      	bcc.n	800a23e <__exponent+0x66>
 800a228:	f10d 0209 	add.w	r2, sp, #9
 800a22c:	eba2 020e 	sub.w	r2, r2, lr
 800a230:	4565      	cmp	r5, ip
 800a232:	bf88      	it	hi
 800a234:	2200      	movhi	r2, #0
 800a236:	4413      	add	r3, r2
 800a238:	1a18      	subs	r0, r3, r0
 800a23a:	b003      	add	sp, #12
 800a23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a242:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a246:	e7ed      	b.n	800a224 <__exponent+0x4c>
 800a248:	2330      	movs	r3, #48	; 0x30
 800a24a:	3130      	adds	r1, #48	; 0x30
 800a24c:	7083      	strb	r3, [r0, #2]
 800a24e:	70c1      	strb	r1, [r0, #3]
 800a250:	1d03      	adds	r3, r0, #4
 800a252:	e7f1      	b.n	800a238 <__exponent+0x60>

0800a254 <_printf_float>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	ed2d 8b02 	vpush	{d8}
 800a25c:	b08d      	sub	sp, #52	; 0x34
 800a25e:	460c      	mov	r4, r1
 800a260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a264:	4616      	mov	r6, r2
 800a266:	461f      	mov	r7, r3
 800a268:	4605      	mov	r5, r0
 800a26a:	f001 fd5f 	bl	800bd2c <_localeconv_r>
 800a26e:	f8d0 a000 	ldr.w	sl, [r0]
 800a272:	4650      	mov	r0, sl
 800a274:	f7f5 ffbc 	bl	80001f0 <strlen>
 800a278:	2300      	movs	r3, #0
 800a27a:	930a      	str	r3, [sp, #40]	; 0x28
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	f8d8 3000 	ldr.w	r3, [r8]
 800a284:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	f103 0208 	add.w	r2, r3, #8
 800a292:	f8c8 2000 	str.w	r2, [r8]
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a29e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a2a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2a6:	9307      	str	r3, [sp, #28]
 800a2a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ac:	ee08 0a10 	vmov	s16, r0
 800a2b0:	4b9f      	ldr	r3, [pc, #636]	; (800a530 <_printf_float+0x2dc>)
 800a2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ba:	f7f6 fc47 	bl	8000b4c <__aeabi_dcmpun>
 800a2be:	bb88      	cbnz	r0, 800a324 <_printf_float+0xd0>
 800a2c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c4:	4b9a      	ldr	r3, [pc, #616]	; (800a530 <_printf_float+0x2dc>)
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	f7f6 fc21 	bl	8000b10 <__aeabi_dcmple>
 800a2ce:	bb48      	cbnz	r0, 800a324 <_printf_float+0xd0>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 fc10 	bl	8000afc <__aeabi_dcmplt>
 800a2dc:	b110      	cbz	r0, 800a2e4 <_printf_float+0x90>
 800a2de:	232d      	movs	r3, #45	; 0x2d
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	4b93      	ldr	r3, [pc, #588]	; (800a534 <_printf_float+0x2e0>)
 800a2e6:	4894      	ldr	r0, [pc, #592]	; (800a538 <_printf_float+0x2e4>)
 800a2e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2ec:	bf94      	ite	ls
 800a2ee:	4698      	movls	r8, r3
 800a2f0:	4680      	movhi	r8, r0
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	6123      	str	r3, [r4, #16]
 800a2f6:	9b05      	ldr	r3, [sp, #20]
 800a2f8:	f023 0204 	bic.w	r2, r3, #4
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	f04f 0900 	mov.w	r9, #0
 800a302:	9700      	str	r7, [sp, #0]
 800a304:	4633      	mov	r3, r6
 800a306:	aa0b      	add	r2, sp, #44	; 0x2c
 800a308:	4621      	mov	r1, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 f9d8 	bl	800a6c0 <_printf_common>
 800a310:	3001      	adds	r0, #1
 800a312:	f040 8090 	bne.w	800a436 <_printf_float+0x1e2>
 800a316:	f04f 30ff 	mov.w	r0, #4294967295
 800a31a:	b00d      	add	sp, #52	; 0x34
 800a31c:	ecbd 8b02 	vpop	{d8}
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 fc0e 	bl	8000b4c <__aeabi_dcmpun>
 800a330:	b140      	cbz	r0, 800a344 <_printf_float+0xf0>
 800a332:	464b      	mov	r3, r9
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbc      	itt	lt
 800a338:	232d      	movlt	r3, #45	; 0x2d
 800a33a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a33e:	487f      	ldr	r0, [pc, #508]	; (800a53c <_printf_float+0x2e8>)
 800a340:	4b7f      	ldr	r3, [pc, #508]	; (800a540 <_printf_float+0x2ec>)
 800a342:	e7d1      	b.n	800a2e8 <_printf_float+0x94>
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a34a:	9206      	str	r2, [sp, #24]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	d13f      	bne.n	800a3d0 <_printf_float+0x17c>
 800a350:	2306      	movs	r3, #6
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	9b05      	ldr	r3, [sp, #20]
 800a356:	6861      	ldr	r1, [r4, #4]
 800a358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a35c:	2300      	movs	r3, #0
 800a35e:	9303      	str	r3, [sp, #12]
 800a360:	ab0a      	add	r3, sp, #40	; 0x28
 800a362:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a366:	ab09      	add	r3, sp, #36	; 0x24
 800a368:	ec49 8b10 	vmov	d0, r8, r9
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a374:	4628      	mov	r0, r5
 800a376:	f7ff fecd 	bl	800a114 <__cvt>
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a37e:	2b47      	cmp	r3, #71	; 0x47
 800a380:	4680      	mov	r8, r0
 800a382:	d108      	bne.n	800a396 <_printf_float+0x142>
 800a384:	1cc8      	adds	r0, r1, #3
 800a386:	db02      	blt.n	800a38e <_printf_float+0x13a>
 800a388:	6863      	ldr	r3, [r4, #4]
 800a38a:	4299      	cmp	r1, r3
 800a38c:	dd41      	ble.n	800a412 <_printf_float+0x1be>
 800a38e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a392:	fa5f fb8b 	uxtb.w	fp, fp
 800a396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a39a:	d820      	bhi.n	800a3de <_printf_float+0x18a>
 800a39c:	3901      	subs	r1, #1
 800a39e:	465a      	mov	r2, fp
 800a3a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a3a6:	f7ff ff17 	bl	800a1d8 <__exponent>
 800a3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ac:	1813      	adds	r3, r2, r0
 800a3ae:	2a01      	cmp	r2, #1
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	dc02      	bgt.n	800a3bc <_printf_float+0x168>
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	07d2      	lsls	r2, r2, #31
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_float+0x16c>
 800a3bc:	3301      	adds	r3, #1
 800a3be:	6123      	str	r3, [r4, #16]
 800a3c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d09c      	beq.n	800a302 <_printf_float+0xae>
 800a3c8:	232d      	movs	r3, #45	; 0x2d
 800a3ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ce:	e798      	b.n	800a302 <_printf_float+0xae>
 800a3d0:	9a06      	ldr	r2, [sp, #24]
 800a3d2:	2a47      	cmp	r2, #71	; 0x47
 800a3d4:	d1be      	bne.n	800a354 <_printf_float+0x100>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1bc      	bne.n	800a354 <_printf_float+0x100>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e7b9      	b.n	800a352 <_printf_float+0xfe>
 800a3de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3e2:	d118      	bne.n	800a416 <_printf_float+0x1c2>
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	dd0b      	ble.n	800a402 <_printf_float+0x1ae>
 800a3ea:	6121      	str	r1, [r4, #16]
 800a3ec:	b913      	cbnz	r3, 800a3f4 <_printf_float+0x1a0>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	07d0      	lsls	r0, r2, #31
 800a3f2:	d502      	bpl.n	800a3fa <_printf_float+0x1a6>
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	440b      	add	r3, r1
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3fc:	f04f 0900 	mov.w	r9, #0
 800a400:	e7de      	b.n	800a3c0 <_printf_float+0x16c>
 800a402:	b913      	cbnz	r3, 800a40a <_printf_float+0x1b6>
 800a404:	6822      	ldr	r2, [r4, #0]
 800a406:	07d2      	lsls	r2, r2, #31
 800a408:	d501      	bpl.n	800a40e <_printf_float+0x1ba>
 800a40a:	3302      	adds	r3, #2
 800a40c:	e7f4      	b.n	800a3f8 <_printf_float+0x1a4>
 800a40e:	2301      	movs	r3, #1
 800a410:	e7f2      	b.n	800a3f8 <_printf_float+0x1a4>
 800a412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a418:	4299      	cmp	r1, r3
 800a41a:	db05      	blt.n	800a428 <_printf_float+0x1d4>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	6121      	str	r1, [r4, #16]
 800a420:	07d8      	lsls	r0, r3, #31
 800a422:	d5ea      	bpl.n	800a3fa <_printf_float+0x1a6>
 800a424:	1c4b      	adds	r3, r1, #1
 800a426:	e7e7      	b.n	800a3f8 <_printf_float+0x1a4>
 800a428:	2900      	cmp	r1, #0
 800a42a:	bfd4      	ite	le
 800a42c:	f1c1 0202 	rsble	r2, r1, #2
 800a430:	2201      	movgt	r2, #1
 800a432:	4413      	add	r3, r2
 800a434:	e7e0      	b.n	800a3f8 <_printf_float+0x1a4>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	055a      	lsls	r2, r3, #21
 800a43a:	d407      	bmi.n	800a44c <_printf_float+0x1f8>
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	4642      	mov	r2, r8
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	d12c      	bne.n	800a4a4 <_printf_float+0x250>
 800a44a:	e764      	b.n	800a316 <_printf_float+0xc2>
 800a44c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a450:	f240 80e0 	bls.w	800a614 <_printf_float+0x3c0>
 800a454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	f7f6 fb44 	bl	8000ae8 <__aeabi_dcmpeq>
 800a460:	2800      	cmp	r0, #0
 800a462:	d034      	beq.n	800a4ce <_printf_float+0x27a>
 800a464:	4a37      	ldr	r2, [pc, #220]	; (800a544 <_printf_float+0x2f0>)
 800a466:	2301      	movs	r3, #1
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	f43f af51 	beq.w	800a316 <_printf_float+0xc2>
 800a474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a478:	429a      	cmp	r2, r3
 800a47a:	db02      	blt.n	800a482 <_printf_float+0x22e>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	07d8      	lsls	r0, r3, #31
 800a480:	d510      	bpl.n	800a4a4 <_printf_float+0x250>
 800a482:	ee18 3a10 	vmov	r3, s16
 800a486:	4652      	mov	r2, sl
 800a488:	4631      	mov	r1, r6
 800a48a:	4628      	mov	r0, r5
 800a48c:	47b8      	blx	r7
 800a48e:	3001      	adds	r0, #1
 800a490:	f43f af41 	beq.w	800a316 <_printf_float+0xc2>
 800a494:	f04f 0800 	mov.w	r8, #0
 800a498:	f104 091a 	add.w	r9, r4, #26
 800a49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	4543      	cmp	r3, r8
 800a4a2:	dc09      	bgt.n	800a4b8 <_printf_float+0x264>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	079b      	lsls	r3, r3, #30
 800a4a8:	f100 8105 	bmi.w	800a6b6 <_printf_float+0x462>
 800a4ac:	68e0      	ldr	r0, [r4, #12]
 800a4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b0:	4298      	cmp	r0, r3
 800a4b2:	bfb8      	it	lt
 800a4b4:	4618      	movlt	r0, r3
 800a4b6:	e730      	b.n	800a31a <_printf_float+0xc6>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	464a      	mov	r2, r9
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4628      	mov	r0, r5
 800a4c0:	47b8      	blx	r7
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f43f af27 	beq.w	800a316 <_printf_float+0xc2>
 800a4c8:	f108 0801 	add.w	r8, r8, #1
 800a4cc:	e7e6      	b.n	800a49c <_printf_float+0x248>
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc39      	bgt.n	800a548 <_printf_float+0x2f4>
 800a4d4:	4a1b      	ldr	r2, [pc, #108]	; (800a544 <_printf_float+0x2f0>)
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b8      	blx	r7
 800a4de:	3001      	adds	r0, #1
 800a4e0:	f43f af19 	beq.w	800a316 <_printf_float+0xc2>
 800a4e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	d102      	bne.n	800a4f2 <_printf_float+0x29e>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	07d9      	lsls	r1, r3, #31
 800a4f0:	d5d8      	bpl.n	800a4a4 <_printf_float+0x250>
 800a4f2:	ee18 3a10 	vmov	r3, s16
 800a4f6:	4652      	mov	r2, sl
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	f43f af09 	beq.w	800a316 <_printf_float+0xc2>
 800a504:	f04f 0900 	mov.w	r9, #0
 800a508:	f104 0a1a 	add.w	sl, r4, #26
 800a50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50e:	425b      	negs	r3, r3
 800a510:	454b      	cmp	r3, r9
 800a512:	dc01      	bgt.n	800a518 <_printf_float+0x2c4>
 800a514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a516:	e792      	b.n	800a43e <_printf_float+0x1ea>
 800a518:	2301      	movs	r3, #1
 800a51a:	4652      	mov	r2, sl
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f aef7 	beq.w	800a316 <_printf_float+0xc2>
 800a528:	f109 0901 	add.w	r9, r9, #1
 800a52c:	e7ee      	b.n	800a50c <_printf_float+0x2b8>
 800a52e:	bf00      	nop
 800a530:	7fefffff 	.word	0x7fefffff
 800a534:	0800d0e8 	.word	0x0800d0e8
 800a538:	0800d0ec 	.word	0x0800d0ec
 800a53c:	0800d0f4 	.word	0x0800d0f4
 800a540:	0800d0f0 	.word	0x0800d0f0
 800a544:	0800d0f8 	.word	0x0800d0f8
 800a548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a54a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a54c:	429a      	cmp	r2, r3
 800a54e:	bfa8      	it	ge
 800a550:	461a      	movge	r2, r3
 800a552:	2a00      	cmp	r2, #0
 800a554:	4691      	mov	r9, r2
 800a556:	dc37      	bgt.n	800a5c8 <_printf_float+0x374>
 800a558:	f04f 0b00 	mov.w	fp, #0
 800a55c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a560:	f104 021a 	add.w	r2, r4, #26
 800a564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	eba3 0309 	sub.w	r3, r3, r9
 800a56c:	455b      	cmp	r3, fp
 800a56e:	dc33      	bgt.n	800a5d8 <_printf_float+0x384>
 800a570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a574:	429a      	cmp	r2, r3
 800a576:	db3b      	blt.n	800a5f0 <_printf_float+0x39c>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	07da      	lsls	r2, r3, #31
 800a57c:	d438      	bmi.n	800a5f0 <_printf_float+0x39c>
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	9a05      	ldr	r2, [sp, #20]
 800a582:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a584:	1a9a      	subs	r2, r3, r2
 800a586:	eba3 0901 	sub.w	r9, r3, r1
 800a58a:	4591      	cmp	r9, r2
 800a58c:	bfa8      	it	ge
 800a58e:	4691      	movge	r9, r2
 800a590:	f1b9 0f00 	cmp.w	r9, #0
 800a594:	dc35      	bgt.n	800a602 <_printf_float+0x3ae>
 800a596:	f04f 0800 	mov.w	r8, #0
 800a59a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a59e:	f104 0a1a 	add.w	sl, r4, #26
 800a5a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	eba3 0309 	sub.w	r3, r3, r9
 800a5ac:	4543      	cmp	r3, r8
 800a5ae:	f77f af79 	ble.w	800a4a4 <_printf_float+0x250>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f aeaa 	beq.w	800a316 <_printf_float+0xc2>
 800a5c2:	f108 0801 	add.w	r8, r8, #1
 800a5c6:	e7ec      	b.n	800a5a2 <_printf_float+0x34e>
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b8      	blx	r7
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d1c0      	bne.n	800a558 <_printf_float+0x304>
 800a5d6:	e69e      	b.n	800a316 <_printf_float+0xc2>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4628      	mov	r0, r5
 800a5de:	9205      	str	r2, [sp, #20]
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f ae97 	beq.w	800a316 <_printf_float+0xc2>
 800a5e8:	9a05      	ldr	r2, [sp, #20]
 800a5ea:	f10b 0b01 	add.w	fp, fp, #1
 800a5ee:	e7b9      	b.n	800a564 <_printf_float+0x310>
 800a5f0:	ee18 3a10 	vmov	r3, s16
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b8      	blx	r7
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d1be      	bne.n	800a57e <_printf_float+0x32a>
 800a600:	e689      	b.n	800a316 <_printf_float+0xc2>
 800a602:	9a05      	ldr	r2, [sp, #20]
 800a604:	464b      	mov	r3, r9
 800a606:	4442      	add	r2, r8
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	d1c1      	bne.n	800a596 <_printf_float+0x342>
 800a612:	e680      	b.n	800a316 <_printf_float+0xc2>
 800a614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a616:	2a01      	cmp	r2, #1
 800a618:	dc01      	bgt.n	800a61e <_printf_float+0x3ca>
 800a61a:	07db      	lsls	r3, r3, #31
 800a61c:	d538      	bpl.n	800a690 <_printf_float+0x43c>
 800a61e:	2301      	movs	r3, #1
 800a620:	4642      	mov	r2, r8
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	47b8      	blx	r7
 800a628:	3001      	adds	r0, #1
 800a62a:	f43f ae74 	beq.w	800a316 <_printf_float+0xc2>
 800a62e:	ee18 3a10 	vmov	r3, s16
 800a632:	4652      	mov	r2, sl
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f ae6b 	beq.w	800a316 <_printf_float+0xc2>
 800a640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a644:	2200      	movs	r2, #0
 800a646:	2300      	movs	r3, #0
 800a648:	f7f6 fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a64c:	b9d8      	cbnz	r0, 800a686 <_printf_float+0x432>
 800a64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a650:	f108 0201 	add.w	r2, r8, #1
 800a654:	3b01      	subs	r3, #1
 800a656:	4631      	mov	r1, r6
 800a658:	4628      	mov	r0, r5
 800a65a:	47b8      	blx	r7
 800a65c:	3001      	adds	r0, #1
 800a65e:	d10e      	bne.n	800a67e <_printf_float+0x42a>
 800a660:	e659      	b.n	800a316 <_printf_float+0xc2>
 800a662:	2301      	movs	r3, #1
 800a664:	4652      	mov	r2, sl
 800a666:	4631      	mov	r1, r6
 800a668:	4628      	mov	r0, r5
 800a66a:	47b8      	blx	r7
 800a66c:	3001      	adds	r0, #1
 800a66e:	f43f ae52 	beq.w	800a316 <_printf_float+0xc2>
 800a672:	f108 0801 	add.w	r8, r8, #1
 800a676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a678:	3b01      	subs	r3, #1
 800a67a:	4543      	cmp	r3, r8
 800a67c:	dcf1      	bgt.n	800a662 <_printf_float+0x40e>
 800a67e:	464b      	mov	r3, r9
 800a680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a684:	e6dc      	b.n	800a440 <_printf_float+0x1ec>
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	f104 0a1a 	add.w	sl, r4, #26
 800a68e:	e7f2      	b.n	800a676 <_printf_float+0x422>
 800a690:	2301      	movs	r3, #1
 800a692:	4642      	mov	r2, r8
 800a694:	e7df      	b.n	800a656 <_printf_float+0x402>
 800a696:	2301      	movs	r3, #1
 800a698:	464a      	mov	r2, r9
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f ae38 	beq.w	800a316 <_printf_float+0xc2>
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	68e3      	ldr	r3, [r4, #12]
 800a6ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6ae:	1a5b      	subs	r3, r3, r1
 800a6b0:	4543      	cmp	r3, r8
 800a6b2:	dcf0      	bgt.n	800a696 <_printf_float+0x442>
 800a6b4:	e6fa      	b.n	800a4ac <_printf_float+0x258>
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	f104 0919 	add.w	r9, r4, #25
 800a6be:	e7f4      	b.n	800a6aa <_printf_float+0x456>

0800a6c0 <_printf_common>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	4699      	mov	r9, r3
 800a6c8:	688a      	ldr	r2, [r1, #8]
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bfb8      	it	lt
 800a6d4:	4613      	movlt	r3, r2
 800a6d6:	6033      	str	r3, [r6, #0]
 800a6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	b10a      	cbz	r2, 800a6e6 <_printf_common+0x26>
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	6033      	str	r3, [r6, #0]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	0699      	lsls	r1, r3, #26
 800a6ea:	bf42      	ittt	mi
 800a6ec:	6833      	ldrmi	r3, [r6, #0]
 800a6ee:	3302      	addmi	r3, #2
 800a6f0:	6033      	strmi	r3, [r6, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	f015 0506 	ands.w	r5, r5, #6
 800a6f8:	d106      	bne.n	800a708 <_printf_common+0x48>
 800a6fa:	f104 0a19 	add.w	sl, r4, #25
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	6832      	ldr	r2, [r6, #0]
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	42ab      	cmp	r3, r5
 800a706:	dc26      	bgt.n	800a756 <_printf_common+0x96>
 800a708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a70c:	1e13      	subs	r3, r2, #0
 800a70e:	6822      	ldr	r2, [r4, #0]
 800a710:	bf18      	it	ne
 800a712:	2301      	movne	r3, #1
 800a714:	0692      	lsls	r2, r2, #26
 800a716:	d42b      	bmi.n	800a770 <_printf_common+0xb0>
 800a718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a71c:	4649      	mov	r1, r9
 800a71e:	4638      	mov	r0, r7
 800a720:	47c0      	blx	r8
 800a722:	3001      	adds	r0, #1
 800a724:	d01e      	beq.n	800a764 <_printf_common+0xa4>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	68e5      	ldr	r5, [r4, #12]
 800a72a:	6832      	ldr	r2, [r6, #0]
 800a72c:	f003 0306 	and.w	r3, r3, #6
 800a730:	2b04      	cmp	r3, #4
 800a732:	bf08      	it	eq
 800a734:	1aad      	subeq	r5, r5, r2
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	6922      	ldr	r2, [r4, #16]
 800a73a:	bf0c      	ite	eq
 800a73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a740:	2500      	movne	r5, #0
 800a742:	4293      	cmp	r3, r2
 800a744:	bfc4      	itt	gt
 800a746:	1a9b      	subgt	r3, r3, r2
 800a748:	18ed      	addgt	r5, r5, r3
 800a74a:	2600      	movs	r6, #0
 800a74c:	341a      	adds	r4, #26
 800a74e:	42b5      	cmp	r5, r6
 800a750:	d11a      	bne.n	800a788 <_printf_common+0xc8>
 800a752:	2000      	movs	r0, #0
 800a754:	e008      	b.n	800a768 <_printf_common+0xa8>
 800a756:	2301      	movs	r3, #1
 800a758:	4652      	mov	r2, sl
 800a75a:	4649      	mov	r1, r9
 800a75c:	4638      	mov	r0, r7
 800a75e:	47c0      	blx	r8
 800a760:	3001      	adds	r0, #1
 800a762:	d103      	bne.n	800a76c <_printf_common+0xac>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76c:	3501      	adds	r5, #1
 800a76e:	e7c6      	b.n	800a6fe <_printf_common+0x3e>
 800a770:	18e1      	adds	r1, r4, r3
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	2030      	movs	r0, #48	; 0x30
 800a776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a77a:	4422      	add	r2, r4
 800a77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a784:	3302      	adds	r3, #2
 800a786:	e7c7      	b.n	800a718 <_printf_common+0x58>
 800a788:	2301      	movs	r3, #1
 800a78a:	4622      	mov	r2, r4
 800a78c:	4649      	mov	r1, r9
 800a78e:	4638      	mov	r0, r7
 800a790:	47c0      	blx	r8
 800a792:	3001      	adds	r0, #1
 800a794:	d0e6      	beq.n	800a764 <_printf_common+0xa4>
 800a796:	3601      	adds	r6, #1
 800a798:	e7d9      	b.n	800a74e <_printf_common+0x8e>
	...

0800a79c <_printf_i>:
 800a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	7e0f      	ldrb	r7, [r1, #24]
 800a7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7a4:	2f78      	cmp	r7, #120	; 0x78
 800a7a6:	4691      	mov	r9, r2
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	469a      	mov	sl, r3
 800a7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7b2:	d807      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7b4:	2f62      	cmp	r7, #98	; 0x62
 800a7b6:	d80a      	bhi.n	800a7ce <_printf_i+0x32>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f000 80d8 	beq.w	800a96e <_printf_i+0x1d2>
 800a7be:	2f58      	cmp	r7, #88	; 0x58
 800a7c0:	f000 80a3 	beq.w	800a90a <_printf_i+0x16e>
 800a7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7cc:	e03a      	b.n	800a844 <_printf_i+0xa8>
 800a7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7d2:	2b15      	cmp	r3, #21
 800a7d4:	d8f6      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7d6:	a101      	add	r1, pc, #4	; (adr r1, 800a7dc <_printf_i+0x40>)
 800a7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a7c5 	.word	0x0800a7c5
 800a7e8:	0800a7c5 	.word	0x0800a7c5
 800a7ec:	0800a7c5 	.word	0x0800a7c5
 800a7f0:	0800a7c5 	.word	0x0800a7c5
 800a7f4:	0800a849 	.word	0x0800a849
 800a7f8:	0800a7c5 	.word	0x0800a7c5
 800a7fc:	0800a7c5 	.word	0x0800a7c5
 800a800:	0800a7c5 	.word	0x0800a7c5
 800a804:	0800a7c5 	.word	0x0800a7c5
 800a808:	0800a955 	.word	0x0800a955
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a937 	.word	0x0800a937
 800a814:	0800a7c5 	.word	0x0800a7c5
 800a818:	0800a7c5 	.word	0x0800a7c5
 800a81c:	0800a977 	.word	0x0800a977
 800a820:	0800a7c5 	.word	0x0800a7c5
 800a824:	0800a879 	.word	0x0800a879
 800a828:	0800a7c5 	.word	0x0800a7c5
 800a82c:	0800a7c5 	.word	0x0800a7c5
 800a830:	0800a93f 	.word	0x0800a93f
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	1d1a      	adds	r2, r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	602a      	str	r2, [r5, #0]
 800a83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a844:	2301      	movs	r3, #1
 800a846:	e0a3      	b.n	800a990 <_printf_i+0x1f4>
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	6829      	ldr	r1, [r5, #0]
 800a84c:	0606      	lsls	r6, r0, #24
 800a84e:	f101 0304 	add.w	r3, r1, #4
 800a852:	d50a      	bpl.n	800a86a <_printf_i+0xce>
 800a854:	680e      	ldr	r6, [r1, #0]
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	2e00      	cmp	r6, #0
 800a85a:	da03      	bge.n	800a864 <_printf_i+0xc8>
 800a85c:	232d      	movs	r3, #45	; 0x2d
 800a85e:	4276      	negs	r6, r6
 800a860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a864:	485e      	ldr	r0, [pc, #376]	; (800a9e0 <_printf_i+0x244>)
 800a866:	230a      	movs	r3, #10
 800a868:	e019      	b.n	800a89e <_printf_i+0x102>
 800a86a:	680e      	ldr	r6, [r1, #0]
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a872:	bf18      	it	ne
 800a874:	b236      	sxthne	r6, r6
 800a876:	e7ef      	b.n	800a858 <_printf_i+0xbc>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	6820      	ldr	r0, [r4, #0]
 800a87c:	1d19      	adds	r1, r3, #4
 800a87e:	6029      	str	r1, [r5, #0]
 800a880:	0601      	lsls	r1, r0, #24
 800a882:	d501      	bpl.n	800a888 <_printf_i+0xec>
 800a884:	681e      	ldr	r6, [r3, #0]
 800a886:	e002      	b.n	800a88e <_printf_i+0xf2>
 800a888:	0646      	lsls	r6, r0, #25
 800a88a:	d5fb      	bpl.n	800a884 <_printf_i+0xe8>
 800a88c:	881e      	ldrh	r6, [r3, #0]
 800a88e:	4854      	ldr	r0, [pc, #336]	; (800a9e0 <_printf_i+0x244>)
 800a890:	2f6f      	cmp	r7, #111	; 0x6f
 800a892:	bf0c      	ite	eq
 800a894:	2308      	moveq	r3, #8
 800a896:	230a      	movne	r3, #10
 800a898:	2100      	movs	r1, #0
 800a89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a89e:	6865      	ldr	r5, [r4, #4]
 800a8a0:	60a5      	str	r5, [r4, #8]
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	bfa2      	ittt	ge
 800a8a6:	6821      	ldrge	r1, [r4, #0]
 800a8a8:	f021 0104 	bicge.w	r1, r1, #4
 800a8ac:	6021      	strge	r1, [r4, #0]
 800a8ae:	b90e      	cbnz	r6, 800a8b4 <_printf_i+0x118>
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	d04d      	beq.n	800a950 <_printf_i+0x1b4>
 800a8b4:	4615      	mov	r5, r2
 800a8b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a8be:	5dc7      	ldrb	r7, [r0, r7]
 800a8c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8c4:	4637      	mov	r7, r6
 800a8c6:	42bb      	cmp	r3, r7
 800a8c8:	460e      	mov	r6, r1
 800a8ca:	d9f4      	bls.n	800a8b6 <_printf_i+0x11a>
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d10b      	bne.n	800a8e8 <_printf_i+0x14c>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	07de      	lsls	r6, r3, #31
 800a8d4:	d508      	bpl.n	800a8e8 <_printf_i+0x14c>
 800a8d6:	6923      	ldr	r3, [r4, #16]
 800a8d8:	6861      	ldr	r1, [r4, #4]
 800a8da:	4299      	cmp	r1, r3
 800a8dc:	bfde      	ittt	le
 800a8de:	2330      	movle	r3, #48	; 0x30
 800a8e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8e8:	1b52      	subs	r2, r2, r5
 800a8ea:	6122      	str	r2, [r4, #16]
 800a8ec:	f8cd a000 	str.w	sl, [sp]
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	aa03      	add	r2, sp, #12
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f7ff fee2 	bl	800a6c0 <_printf_common>
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d14c      	bne.n	800a99a <_printf_i+0x1fe>
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	b004      	add	sp, #16
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	4835      	ldr	r0, [pc, #212]	; (800a9e0 <_printf_i+0x244>)
 800a90c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a910:	6829      	ldr	r1, [r5, #0]
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	f851 6b04 	ldr.w	r6, [r1], #4
 800a918:	6029      	str	r1, [r5, #0]
 800a91a:	061d      	lsls	r5, r3, #24
 800a91c:	d514      	bpl.n	800a948 <_printf_i+0x1ac>
 800a91e:	07df      	lsls	r7, r3, #31
 800a920:	bf44      	itt	mi
 800a922:	f043 0320 	orrmi.w	r3, r3, #32
 800a926:	6023      	strmi	r3, [r4, #0]
 800a928:	b91e      	cbnz	r6, 800a932 <_printf_i+0x196>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	f023 0320 	bic.w	r3, r3, #32
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	2310      	movs	r3, #16
 800a934:	e7b0      	b.n	800a898 <_printf_i+0xfc>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	f043 0320 	orr.w	r3, r3, #32
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	2378      	movs	r3, #120	; 0x78
 800a940:	4828      	ldr	r0, [pc, #160]	; (800a9e4 <_printf_i+0x248>)
 800a942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a946:	e7e3      	b.n	800a910 <_printf_i+0x174>
 800a948:	0659      	lsls	r1, r3, #25
 800a94a:	bf48      	it	mi
 800a94c:	b2b6      	uxthmi	r6, r6
 800a94e:	e7e6      	b.n	800a91e <_printf_i+0x182>
 800a950:	4615      	mov	r5, r2
 800a952:	e7bb      	b.n	800a8cc <_printf_i+0x130>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	6826      	ldr	r6, [r4, #0]
 800a958:	6961      	ldr	r1, [r4, #20]
 800a95a:	1d18      	adds	r0, r3, #4
 800a95c:	6028      	str	r0, [r5, #0]
 800a95e:	0635      	lsls	r5, r6, #24
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	d501      	bpl.n	800a968 <_printf_i+0x1cc>
 800a964:	6019      	str	r1, [r3, #0]
 800a966:	e002      	b.n	800a96e <_printf_i+0x1d2>
 800a968:	0670      	lsls	r0, r6, #25
 800a96a:	d5fb      	bpl.n	800a964 <_printf_i+0x1c8>
 800a96c:	8019      	strh	r1, [r3, #0]
 800a96e:	2300      	movs	r3, #0
 800a970:	6123      	str	r3, [r4, #16]
 800a972:	4615      	mov	r5, r2
 800a974:	e7ba      	b.n	800a8ec <_printf_i+0x150>
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	1d1a      	adds	r2, r3, #4
 800a97a:	602a      	str	r2, [r5, #0]
 800a97c:	681d      	ldr	r5, [r3, #0]
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	2100      	movs	r1, #0
 800a982:	4628      	mov	r0, r5
 800a984:	f7f5 fc3c 	bl	8000200 <memchr>
 800a988:	b108      	cbz	r0, 800a98e <_printf_i+0x1f2>
 800a98a:	1b40      	subs	r0, r0, r5
 800a98c:	6060      	str	r0, [r4, #4]
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	2300      	movs	r3, #0
 800a994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a998:	e7a8      	b.n	800a8ec <_printf_i+0x150>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	462a      	mov	r2, r5
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	47d0      	blx	sl
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d0ab      	beq.n	800a900 <_printf_i+0x164>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	079b      	lsls	r3, r3, #30
 800a9ac:	d413      	bmi.n	800a9d6 <_printf_i+0x23a>
 800a9ae:	68e0      	ldr	r0, [r4, #12]
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	bfb8      	it	lt
 800a9b6:	4618      	movlt	r0, r3
 800a9b8:	e7a4      	b.n	800a904 <_printf_i+0x168>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4632      	mov	r2, r6
 800a9be:	4649      	mov	r1, r9
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	47d0      	blx	sl
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d09b      	beq.n	800a900 <_printf_i+0x164>
 800a9c8:	3501      	adds	r5, #1
 800a9ca:	68e3      	ldr	r3, [r4, #12]
 800a9cc:	9903      	ldr	r1, [sp, #12]
 800a9ce:	1a5b      	subs	r3, r3, r1
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	dcf2      	bgt.n	800a9ba <_printf_i+0x21e>
 800a9d4:	e7eb      	b.n	800a9ae <_printf_i+0x212>
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	f104 0619 	add.w	r6, r4, #25
 800a9dc:	e7f5      	b.n	800a9ca <_printf_i+0x22e>
 800a9de:	bf00      	nop
 800a9e0:	0800d0fa 	.word	0x0800d0fa
 800a9e4:	0800d10b 	.word	0x0800d10b

0800a9e8 <iprintf>:
 800a9e8:	b40f      	push	{r0, r1, r2, r3}
 800a9ea:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <iprintf+0x2c>)
 800a9ec:	b513      	push	{r0, r1, r4, lr}
 800a9ee:	681c      	ldr	r4, [r3, #0]
 800a9f0:	b124      	cbz	r4, 800a9fc <iprintf+0x14>
 800a9f2:	69a3      	ldr	r3, [r4, #24]
 800a9f4:	b913      	cbnz	r3, 800a9fc <iprintf+0x14>
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f001 f8fa 	bl	800bbf0 <__sinit>
 800a9fc:	ab05      	add	r3, sp, #20
 800a9fe:	9a04      	ldr	r2, [sp, #16]
 800aa00:	68a1      	ldr	r1, [r4, #8]
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	4620      	mov	r0, r4
 800aa06:	f002 f813 	bl	800ca30 <_vfiprintf_r>
 800aa0a:	b002      	add	sp, #8
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	b004      	add	sp, #16
 800aa12:	4770      	bx	lr
 800aa14:	200000fc 	.word	0x200000fc

0800aa18 <_puts_r>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	460e      	mov	r6, r1
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	b118      	cbz	r0, 800aa28 <_puts_r+0x10>
 800aa20:	6983      	ldr	r3, [r0, #24]
 800aa22:	b90b      	cbnz	r3, 800aa28 <_puts_r+0x10>
 800aa24:	f001 f8e4 	bl	800bbf0 <__sinit>
 800aa28:	69ab      	ldr	r3, [r5, #24]
 800aa2a:	68ac      	ldr	r4, [r5, #8]
 800aa2c:	b913      	cbnz	r3, 800aa34 <_puts_r+0x1c>
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f001 f8de 	bl	800bbf0 <__sinit>
 800aa34:	4b2c      	ldr	r3, [pc, #176]	; (800aae8 <_puts_r+0xd0>)
 800aa36:	429c      	cmp	r4, r3
 800aa38:	d120      	bne.n	800aa7c <_puts_r+0x64>
 800aa3a:	686c      	ldr	r4, [r5, #4]
 800aa3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d405      	bmi.n	800aa4e <_puts_r+0x36>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	0598      	lsls	r0, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <_puts_r+0x36>
 800aa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa4a:	f001 f974 	bl	800bd36 <__retarget_lock_acquire_recursive>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	d51d      	bpl.n	800aa90 <_puts_r+0x78>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b1db      	cbz	r3, 800aa90 <_puts_r+0x78>
 800aa58:	3e01      	subs	r6, #1
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa60:	3b01      	subs	r3, #1
 800aa62:	60a3      	str	r3, [r4, #8]
 800aa64:	bb39      	cbnz	r1, 800aab6 <_puts_r+0x9e>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da38      	bge.n	800aadc <_puts_r+0xc4>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	210a      	movs	r1, #10
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f000 f868 	bl	800ab44 <__swbuf_r>
 800aa74:	3001      	adds	r0, #1
 800aa76:	d011      	beq.n	800aa9c <_puts_r+0x84>
 800aa78:	250a      	movs	r5, #10
 800aa7a:	e011      	b.n	800aaa0 <_puts_r+0x88>
 800aa7c:	4b1b      	ldr	r3, [pc, #108]	; (800aaec <_puts_r+0xd4>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <_puts_r+0x6e>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7da      	b.n	800aa3c <_puts_r+0x24>
 800aa86:	4b1a      	ldr	r3, [pc, #104]	; (800aaf0 <_puts_r+0xd8>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7d5      	b.n	800aa3c <_puts_r+0x24>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f8a8 	bl	800abe8 <__swsetup_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0dd      	beq.n	800aa58 <_puts_r+0x40>
 800aa9c:	f04f 35ff 	mov.w	r5, #4294967295
 800aaa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa2:	07da      	lsls	r2, r3, #31
 800aaa4:	d405      	bmi.n	800aab2 <_puts_r+0x9a>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	059b      	lsls	r3, r3, #22
 800aaaa:	d402      	bmi.n	800aab2 <_puts_r+0x9a>
 800aaac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaae:	f001 f943 	bl	800bd38 <__retarget_lock_release_recursive>
 800aab2:	4628      	mov	r0, r5
 800aab4:	bd70      	pop	{r4, r5, r6, pc}
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da04      	bge.n	800aac4 <_puts_r+0xac>
 800aaba:	69a2      	ldr	r2, [r4, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	dc06      	bgt.n	800aace <_puts_r+0xb6>
 800aac0:	290a      	cmp	r1, #10
 800aac2:	d004      	beq.n	800aace <_puts_r+0xb6>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	6022      	str	r2, [r4, #0]
 800aaca:	7019      	strb	r1, [r3, #0]
 800aacc:	e7c5      	b.n	800aa5a <_puts_r+0x42>
 800aace:	4622      	mov	r2, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f837 	bl	800ab44 <__swbuf_r>
 800aad6:	3001      	adds	r0, #1
 800aad8:	d1bf      	bne.n	800aa5a <_puts_r+0x42>
 800aada:	e7df      	b.n	800aa9c <_puts_r+0x84>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	250a      	movs	r5, #10
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	6022      	str	r2, [r4, #0]
 800aae4:	701d      	strb	r5, [r3, #0]
 800aae6:	e7db      	b.n	800aaa0 <_puts_r+0x88>
 800aae8:	0800d1cc 	.word	0x0800d1cc
 800aaec:	0800d1ec 	.word	0x0800d1ec
 800aaf0:	0800d1ac 	.word	0x0800d1ac

0800aaf4 <puts>:
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <puts+0xc>)
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	f7ff bf8d 	b.w	800aa18 <_puts_r>
 800aafe:	bf00      	nop
 800ab00:	200000fc 	.word	0x200000fc

0800ab04 <siprintf>:
 800ab04:	b40e      	push	{r1, r2, r3}
 800ab06:	b500      	push	{lr}
 800ab08:	b09c      	sub	sp, #112	; 0x70
 800ab0a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	9006      	str	r0, [sp, #24]
 800ab10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab14:	4809      	ldr	r0, [pc, #36]	; (800ab3c <siprintf+0x38>)
 800ab16:	9107      	str	r1, [sp, #28]
 800ab18:	9104      	str	r1, [sp, #16]
 800ab1a:	4909      	ldr	r1, [pc, #36]	; (800ab40 <siprintf+0x3c>)
 800ab1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab20:	9105      	str	r1, [sp, #20]
 800ab22:	6800      	ldr	r0, [r0, #0]
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	a902      	add	r1, sp, #8
 800ab28:	f001 fe58 	bl	800c7dc <_svfiprintf_r>
 800ab2c:	9b02      	ldr	r3, [sp, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	b01c      	add	sp, #112	; 0x70
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	200000fc 	.word	0x200000fc
 800ab40:	ffff0208 	.word	0xffff0208

0800ab44 <__swbuf_r>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	460e      	mov	r6, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	b118      	cbz	r0, 800ab56 <__swbuf_r+0x12>
 800ab4e:	6983      	ldr	r3, [r0, #24]
 800ab50:	b90b      	cbnz	r3, 800ab56 <__swbuf_r+0x12>
 800ab52:	f001 f84d 	bl	800bbf0 <__sinit>
 800ab56:	4b21      	ldr	r3, [pc, #132]	; (800abdc <__swbuf_r+0x98>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	d12b      	bne.n	800abb4 <__swbuf_r+0x70>
 800ab5c:	686c      	ldr	r4, [r5, #4]
 800ab5e:	69a3      	ldr	r3, [r4, #24]
 800ab60:	60a3      	str	r3, [r4, #8]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	071a      	lsls	r2, r3, #28
 800ab66:	d52f      	bpl.n	800abc8 <__swbuf_r+0x84>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	b36b      	cbz	r3, 800abc8 <__swbuf_r+0x84>
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1ac0      	subs	r0, r0, r3
 800ab72:	6963      	ldr	r3, [r4, #20]
 800ab74:	b2f6      	uxtb	r6, r6
 800ab76:	4283      	cmp	r3, r0
 800ab78:	4637      	mov	r7, r6
 800ab7a:	dc04      	bgt.n	800ab86 <__swbuf_r+0x42>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 ffa2 	bl	800bac8 <_fflush_r>
 800ab84:	bb30      	cbnz	r0, 800abd4 <__swbuf_r+0x90>
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	60a3      	str	r3, [r4, #8]
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	701e      	strb	r6, [r3, #0]
 800ab94:	6963      	ldr	r3, [r4, #20]
 800ab96:	3001      	adds	r0, #1
 800ab98:	4283      	cmp	r3, r0
 800ab9a:	d004      	beq.n	800aba6 <__swbuf_r+0x62>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	07db      	lsls	r3, r3, #31
 800aba0:	d506      	bpl.n	800abb0 <__swbuf_r+0x6c>
 800aba2:	2e0a      	cmp	r6, #10
 800aba4:	d104      	bne.n	800abb0 <__swbuf_r+0x6c>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	f000 ff8d 	bl	800bac8 <_fflush_r>
 800abae:	b988      	cbnz	r0, 800abd4 <__swbuf_r+0x90>
 800abb0:	4638      	mov	r0, r7
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <__swbuf_r+0x9c>)
 800abb6:	429c      	cmp	r4, r3
 800abb8:	d101      	bne.n	800abbe <__swbuf_r+0x7a>
 800abba:	68ac      	ldr	r4, [r5, #8]
 800abbc:	e7cf      	b.n	800ab5e <__swbuf_r+0x1a>
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <__swbuf_r+0xa0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	bf08      	it	eq
 800abc4:	68ec      	ldreq	r4, [r5, #12]
 800abc6:	e7ca      	b.n	800ab5e <__swbuf_r+0x1a>
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f80c 	bl	800abe8 <__swsetup_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d0cb      	beq.n	800ab6c <__swbuf_r+0x28>
 800abd4:	f04f 37ff 	mov.w	r7, #4294967295
 800abd8:	e7ea      	b.n	800abb0 <__swbuf_r+0x6c>
 800abda:	bf00      	nop
 800abdc:	0800d1cc 	.word	0x0800d1cc
 800abe0:	0800d1ec 	.word	0x0800d1ec
 800abe4:	0800d1ac 	.word	0x0800d1ac

0800abe8 <__swsetup_r>:
 800abe8:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <__swsetup_r+0xcc>)
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	4606      	mov	r6, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	b125      	cbz	r5, 800abfe <__swsetup_r+0x16>
 800abf4:	69ab      	ldr	r3, [r5, #24]
 800abf6:	b913      	cbnz	r3, 800abfe <__swsetup_r+0x16>
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 fff9 	bl	800bbf0 <__sinit>
 800abfe:	4b2e      	ldr	r3, [pc, #184]	; (800acb8 <__swsetup_r+0xd0>)
 800ac00:	429c      	cmp	r4, r3
 800ac02:	d10f      	bne.n	800ac24 <__swsetup_r+0x3c>
 800ac04:	686c      	ldr	r4, [r5, #4]
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac0c:	0719      	lsls	r1, r3, #28
 800ac0e:	d42c      	bmi.n	800ac6a <__swsetup_r+0x82>
 800ac10:	06dd      	lsls	r5, r3, #27
 800ac12:	d411      	bmi.n	800ac38 <__swsetup_r+0x50>
 800ac14:	2309      	movs	r3, #9
 800ac16:	6033      	str	r3, [r6, #0]
 800ac18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	e03e      	b.n	800aca2 <__swsetup_r+0xba>
 800ac24:	4b25      	ldr	r3, [pc, #148]	; (800acbc <__swsetup_r+0xd4>)
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d101      	bne.n	800ac2e <__swsetup_r+0x46>
 800ac2a:	68ac      	ldr	r4, [r5, #8]
 800ac2c:	e7eb      	b.n	800ac06 <__swsetup_r+0x1e>
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <__swsetup_r+0xd8>)
 800ac30:	429c      	cmp	r4, r3
 800ac32:	bf08      	it	eq
 800ac34:	68ec      	ldreq	r4, [r5, #12]
 800ac36:	e7e6      	b.n	800ac06 <__swsetup_r+0x1e>
 800ac38:	0758      	lsls	r0, r3, #29
 800ac3a:	d512      	bpl.n	800ac62 <__swsetup_r+0x7a>
 800ac3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac3e:	b141      	cbz	r1, 800ac52 <__swsetup_r+0x6a>
 800ac40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac44:	4299      	cmp	r1, r3
 800ac46:	d002      	beq.n	800ac4e <__swsetup_r+0x66>
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f001 fc8b 	bl	800c564 <_free_r>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6363      	str	r3, [r4, #52]	; 0x34
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6063      	str	r3, [r4, #4]
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	b94b      	cbnz	r3, 800ac82 <__swsetup_r+0x9a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac78:	d003      	beq.n	800ac82 <__swsetup_r+0x9a>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f001 f881 	bl	800bd84 <__smakebuf_r>
 800ac82:	89a0      	ldrh	r0, [r4, #12]
 800ac84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac88:	f010 0301 	ands.w	r3, r0, #1
 800ac8c:	d00a      	beq.n	800aca4 <__swsetup_r+0xbc>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	6963      	ldr	r3, [r4, #20]
 800ac94:	425b      	negs	r3, r3
 800ac96:	61a3      	str	r3, [r4, #24]
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b943      	cbnz	r3, 800acae <__swsetup_r+0xc6>
 800ac9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aca0:	d1ba      	bne.n	800ac18 <__swsetup_r+0x30>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	0781      	lsls	r1, r0, #30
 800aca6:	bf58      	it	pl
 800aca8:	6963      	ldrpl	r3, [r4, #20]
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	e7f4      	b.n	800ac98 <__swsetup_r+0xb0>
 800acae:	2000      	movs	r0, #0
 800acb0:	e7f7      	b.n	800aca2 <__swsetup_r+0xba>
 800acb2:	bf00      	nop
 800acb4:	200000fc 	.word	0x200000fc
 800acb8:	0800d1cc 	.word	0x0800d1cc
 800acbc:	0800d1ec 	.word	0x0800d1ec
 800acc0:	0800d1ac 	.word	0x0800d1ac

0800acc4 <quorem>:
 800acc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	6903      	ldr	r3, [r0, #16]
 800acca:	690c      	ldr	r4, [r1, #16]
 800accc:	42a3      	cmp	r3, r4
 800acce:	4607      	mov	r7, r0
 800acd0:	f2c0 8081 	blt.w	800add6 <quorem+0x112>
 800acd4:	3c01      	subs	r4, #1
 800acd6:	f101 0814 	add.w	r8, r1, #20
 800acda:	f100 0514 	add.w	r5, r0, #20
 800acde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ace8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acec:	3301      	adds	r3, #1
 800acee:	429a      	cmp	r2, r3
 800acf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800acf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800acfc:	d331      	bcc.n	800ad62 <quorem+0x9e>
 800acfe:	f04f 0e00 	mov.w	lr, #0
 800ad02:	4640      	mov	r0, r8
 800ad04:	46ac      	mov	ip, r5
 800ad06:	46f2      	mov	sl, lr
 800ad08:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad0c:	b293      	uxth	r3, r2
 800ad0e:	fb06 e303 	mla	r3, r6, r3, lr
 800ad12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	ebaa 0303 	sub.w	r3, sl, r3
 800ad1c:	f8dc a000 	ldr.w	sl, [ip]
 800ad20:	0c12      	lsrs	r2, r2, #16
 800ad22:	fa13 f38a 	uxtah	r3, r3, sl
 800ad26:	fb06 e202 	mla	r2, r6, r2, lr
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	9b00      	ldr	r3, [sp, #0]
 800ad2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad32:	b292      	uxth	r2, r2
 800ad34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad3c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad40:	4581      	cmp	r9, r0
 800ad42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad46:	f84c 3b04 	str.w	r3, [ip], #4
 800ad4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad4e:	d2db      	bcs.n	800ad08 <quorem+0x44>
 800ad50:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad54:	b92b      	cbnz	r3, 800ad62 <quorem+0x9e>
 800ad56:	9b01      	ldr	r3, [sp, #4]
 800ad58:	3b04      	subs	r3, #4
 800ad5a:	429d      	cmp	r5, r3
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	d32e      	bcc.n	800adbe <quorem+0xfa>
 800ad60:	613c      	str	r4, [r7, #16]
 800ad62:	4638      	mov	r0, r7
 800ad64:	f001 fae6 	bl	800c334 <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	db24      	blt.n	800adb6 <quorem+0xf2>
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f04f 0c00 	mov.w	ip, #0
 800ad74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad78:	f8d0 e000 	ldr.w	lr, [r0]
 800ad7c:	b293      	uxth	r3, r2
 800ad7e:	ebac 0303 	sub.w	r3, ip, r3
 800ad82:	0c12      	lsrs	r2, r2, #16
 800ad84:	fa13 f38e 	uxtah	r3, r3, lr
 800ad88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad96:	45c1      	cmp	r9, r8
 800ad98:	f840 3b04 	str.w	r3, [r0], #4
 800ad9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ada0:	d2e8      	bcs.n	800ad74 <quorem+0xb0>
 800ada2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ada6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adaa:	b922      	cbnz	r2, 800adb6 <quorem+0xf2>
 800adac:	3b04      	subs	r3, #4
 800adae:	429d      	cmp	r5, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	d30a      	bcc.n	800adca <quorem+0x106>
 800adb4:	613c      	str	r4, [r7, #16]
 800adb6:	4630      	mov	r0, r6
 800adb8:	b003      	add	sp, #12
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	3b04      	subs	r3, #4
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	d1cc      	bne.n	800ad60 <quorem+0x9c>
 800adc6:	3c01      	subs	r4, #1
 800adc8:	e7c7      	b.n	800ad5a <quorem+0x96>
 800adca:	6812      	ldr	r2, [r2, #0]
 800adcc:	3b04      	subs	r3, #4
 800adce:	2a00      	cmp	r2, #0
 800add0:	d1f0      	bne.n	800adb4 <quorem+0xf0>
 800add2:	3c01      	subs	r4, #1
 800add4:	e7eb      	b.n	800adae <quorem+0xea>
 800add6:	2000      	movs	r0, #0
 800add8:	e7ee      	b.n	800adb8 <quorem+0xf4>
 800adda:	0000      	movs	r0, r0
 800addc:	0000      	movs	r0, r0
	...

0800ade0 <_dtoa_r>:
 800ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	ed2d 8b04 	vpush	{d8-d9}
 800ade8:	ec57 6b10 	vmov	r6, r7, d0
 800adec:	b093      	sub	sp, #76	; 0x4c
 800adee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800adf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800adf4:	9106      	str	r1, [sp, #24]
 800adf6:	ee10 aa10 	vmov	sl, s0
 800adfa:	4604      	mov	r4, r0
 800adfc:	9209      	str	r2, [sp, #36]	; 0x24
 800adfe:	930c      	str	r3, [sp, #48]	; 0x30
 800ae00:	46bb      	mov	fp, r7
 800ae02:	b975      	cbnz	r5, 800ae22 <_dtoa_r+0x42>
 800ae04:	2010      	movs	r0, #16
 800ae06:	f000 fffd 	bl	800be04 <malloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	6260      	str	r0, [r4, #36]	; 0x24
 800ae0e:	b920      	cbnz	r0, 800ae1a <_dtoa_r+0x3a>
 800ae10:	4ba7      	ldr	r3, [pc, #668]	; (800b0b0 <_dtoa_r+0x2d0>)
 800ae12:	21ea      	movs	r1, #234	; 0xea
 800ae14:	48a7      	ldr	r0, [pc, #668]	; (800b0b4 <_dtoa_r+0x2d4>)
 800ae16:	f001 ffa1 	bl	800cd5c <__assert_func>
 800ae1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae1e:	6005      	str	r5, [r0, #0]
 800ae20:	60c5      	str	r5, [r0, #12]
 800ae22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae24:	6819      	ldr	r1, [r3, #0]
 800ae26:	b151      	cbz	r1, 800ae3e <_dtoa_r+0x5e>
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	604a      	str	r2, [r1, #4]
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	4093      	lsls	r3, r2
 800ae30:	608b      	str	r3, [r1, #8]
 800ae32:	4620      	mov	r0, r4
 800ae34:	f001 f83c 	bl	800beb0 <_Bfree>
 800ae38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	1e3b      	subs	r3, r7, #0
 800ae40:	bfaa      	itet	ge
 800ae42:	2300      	movge	r3, #0
 800ae44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae48:	f8c8 3000 	strge.w	r3, [r8]
 800ae4c:	4b9a      	ldr	r3, [pc, #616]	; (800b0b8 <_dtoa_r+0x2d8>)
 800ae4e:	bfbc      	itt	lt
 800ae50:	2201      	movlt	r2, #1
 800ae52:	f8c8 2000 	strlt.w	r2, [r8]
 800ae56:	ea33 030b 	bics.w	r3, r3, fp
 800ae5a:	d11b      	bne.n	800ae94 <_dtoa_r+0xb4>
 800ae5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae5e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae68:	4333      	orrs	r3, r6
 800ae6a:	f000 8592 	beq.w	800b992 <_dtoa_r+0xbb2>
 800ae6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae70:	b963      	cbnz	r3, 800ae8c <_dtoa_r+0xac>
 800ae72:	4b92      	ldr	r3, [pc, #584]	; (800b0bc <_dtoa_r+0x2dc>)
 800ae74:	e022      	b.n	800aebc <_dtoa_r+0xdc>
 800ae76:	4b92      	ldr	r3, [pc, #584]	; (800b0c0 <_dtoa_r+0x2e0>)
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	9801      	ldr	r0, [sp, #4]
 800ae82:	b013      	add	sp, #76	; 0x4c
 800ae84:	ecbd 8b04 	vpop	{d8-d9}
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	4b8b      	ldr	r3, [pc, #556]	; (800b0bc <_dtoa_r+0x2dc>)
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	3303      	adds	r3, #3
 800ae92:	e7f3      	b.n	800ae7c <_dtoa_r+0x9c>
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	4650      	mov	r0, sl
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	f7f5 fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 800aea0:	ec4b ab19 	vmov	d9, sl, fp
 800aea4:	4680      	mov	r8, r0
 800aea6:	b158      	cbz	r0, 800aec0 <_dtoa_r+0xe0>
 800aea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeaa:	2301      	movs	r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 856b 	beq.w	800b98c <_dtoa_r+0xbac>
 800aeb6:	4883      	ldr	r0, [pc, #524]	; (800b0c4 <_dtoa_r+0x2e4>)
 800aeb8:	6018      	str	r0, [r3, #0]
 800aeba:	1e43      	subs	r3, r0, #1
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	e7df      	b.n	800ae80 <_dtoa_r+0xa0>
 800aec0:	ec4b ab10 	vmov	d0, sl, fp
 800aec4:	aa10      	add	r2, sp, #64	; 0x40
 800aec6:	a911      	add	r1, sp, #68	; 0x44
 800aec8:	4620      	mov	r0, r4
 800aeca:	f001 fad9 	bl	800c480 <__d2b>
 800aece:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aed2:	ee08 0a10 	vmov	s16, r0
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	f000 8084 	beq.w	800afe4 <_dtoa_r+0x204>
 800aedc:	ee19 3a90 	vmov	r3, s19
 800aee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aee8:	4656      	mov	r6, sl
 800aeea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aeee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aef2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aef6:	4b74      	ldr	r3, [pc, #464]	; (800b0c8 <_dtoa_r+0x2e8>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 f9d3 	bl	80002a8 <__aeabi_dsub>
 800af02:	a365      	add	r3, pc, #404	; (adr r3, 800b098 <_dtoa_r+0x2b8>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 fb86 	bl	8000618 <__aeabi_dmul>
 800af0c:	a364      	add	r3, pc, #400	; (adr r3, 800b0a0 <_dtoa_r+0x2c0>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 f9cb 	bl	80002ac <__adddf3>
 800af16:	4606      	mov	r6, r0
 800af18:	4628      	mov	r0, r5
 800af1a:	460f      	mov	r7, r1
 800af1c:	f7f5 fb12 	bl	8000544 <__aeabi_i2d>
 800af20:	a361      	add	r3, pc, #388	; (adr r3, 800b0a8 <_dtoa_r+0x2c8>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 fb77 	bl	8000618 <__aeabi_dmul>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4630      	mov	r0, r6
 800af30:	4639      	mov	r1, r7
 800af32:	f7f5 f9bb 	bl	80002ac <__adddf3>
 800af36:	4606      	mov	r6, r0
 800af38:	460f      	mov	r7, r1
 800af3a:	f7f5 fe1d 	bl	8000b78 <__aeabi_d2iz>
 800af3e:	2200      	movs	r2, #0
 800af40:	9000      	str	r0, [sp, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	f7f5 fdd8 	bl	8000afc <__aeabi_dcmplt>
 800af4c:	b150      	cbz	r0, 800af64 <_dtoa_r+0x184>
 800af4e:	9800      	ldr	r0, [sp, #0]
 800af50:	f7f5 faf8 	bl	8000544 <__aeabi_i2d>
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	f7f5 fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800af5c:	b910      	cbnz	r0, 800af64 <_dtoa_r+0x184>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	3b01      	subs	r3, #1
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	9b00      	ldr	r3, [sp, #0]
 800af66:	2b16      	cmp	r3, #22
 800af68:	d85a      	bhi.n	800b020 <_dtoa_r+0x240>
 800af6a:	9a00      	ldr	r2, [sp, #0]
 800af6c:	4b57      	ldr	r3, [pc, #348]	; (800b0cc <_dtoa_r+0x2ec>)
 800af6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	ec51 0b19 	vmov	r0, r1, d9
 800af7a:	f7f5 fdbf 	bl	8000afc <__aeabi_dcmplt>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d050      	beq.n	800b024 <_dtoa_r+0x244>
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	3b01      	subs	r3, #1
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2300      	movs	r3, #0
 800af8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af8e:	1b5d      	subs	r5, r3, r5
 800af90:	1e6b      	subs	r3, r5, #1
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	bf45      	ittet	mi
 800af96:	f1c5 0301 	rsbmi	r3, r5, #1
 800af9a:	9304      	strmi	r3, [sp, #16]
 800af9c:	2300      	movpl	r3, #0
 800af9e:	2300      	movmi	r3, #0
 800afa0:	bf4c      	ite	mi
 800afa2:	9305      	strmi	r3, [sp, #20]
 800afa4:	9304      	strpl	r3, [sp, #16]
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	db3d      	blt.n	800b028 <_dtoa_r+0x248>
 800afac:	9b05      	ldr	r3, [sp, #20]
 800afae:	9a00      	ldr	r2, [sp, #0]
 800afb0:	920a      	str	r2, [sp, #40]	; 0x28
 800afb2:	4413      	add	r3, r2
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9307      	str	r3, [sp, #28]
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	2b09      	cmp	r3, #9
 800afbe:	f200 8089 	bhi.w	800b0d4 <_dtoa_r+0x2f4>
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	bfc4      	itt	gt
 800afc6:	3b04      	subgt	r3, #4
 800afc8:	9306      	strgt	r3, [sp, #24]
 800afca:	9b06      	ldr	r3, [sp, #24]
 800afcc:	f1a3 0302 	sub.w	r3, r3, #2
 800afd0:	bfcc      	ite	gt
 800afd2:	2500      	movgt	r5, #0
 800afd4:	2501      	movle	r5, #1
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	f200 8087 	bhi.w	800b0ea <_dtoa_r+0x30a>
 800afdc:	e8df f003 	tbb	[pc, r3]
 800afe0:	59383a2d 	.word	0x59383a2d
 800afe4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afe8:	441d      	add	r5, r3
 800afea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afee:	2b20      	cmp	r3, #32
 800aff0:	bfc1      	itttt	gt
 800aff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800affa:	fa0b f303 	lslgt.w	r3, fp, r3
 800affe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b002:	bfda      	itte	le
 800b004:	f1c3 0320 	rsble	r3, r3, #32
 800b008:	fa06 f003 	lslle.w	r0, r6, r3
 800b00c:	4318      	orrgt	r0, r3
 800b00e:	f7f5 fa89 	bl	8000524 <__aeabi_ui2d>
 800b012:	2301      	movs	r3, #1
 800b014:	4606      	mov	r6, r0
 800b016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b01a:	3d01      	subs	r5, #1
 800b01c:	930e      	str	r3, [sp, #56]	; 0x38
 800b01e:	e76a      	b.n	800aef6 <_dtoa_r+0x116>
 800b020:	2301      	movs	r3, #1
 800b022:	e7b2      	b.n	800af8a <_dtoa_r+0x1aa>
 800b024:	900b      	str	r0, [sp, #44]	; 0x2c
 800b026:	e7b1      	b.n	800af8c <_dtoa_r+0x1ac>
 800b028:	9b04      	ldr	r3, [sp, #16]
 800b02a:	9a00      	ldr	r2, [sp, #0]
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	9304      	str	r3, [sp, #16]
 800b030:	4253      	negs	r3, r2
 800b032:	9307      	str	r3, [sp, #28]
 800b034:	2300      	movs	r3, #0
 800b036:	930a      	str	r3, [sp, #40]	; 0x28
 800b038:	e7bf      	b.n	800afba <_dtoa_r+0x1da>
 800b03a:	2300      	movs	r3, #0
 800b03c:	9308      	str	r3, [sp, #32]
 800b03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	dc55      	bgt.n	800b0f0 <_dtoa_r+0x310>
 800b044:	2301      	movs	r3, #1
 800b046:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b04a:	461a      	mov	r2, r3
 800b04c:	9209      	str	r2, [sp, #36]	; 0x24
 800b04e:	e00c      	b.n	800b06a <_dtoa_r+0x28a>
 800b050:	2301      	movs	r3, #1
 800b052:	e7f3      	b.n	800b03c <_dtoa_r+0x25c>
 800b054:	2300      	movs	r3, #0
 800b056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b058:	9308      	str	r3, [sp, #32]
 800b05a:	9b00      	ldr	r3, [sp, #0]
 800b05c:	4413      	add	r3, r2
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	3301      	adds	r3, #1
 800b062:	2b01      	cmp	r3, #1
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	bfb8      	it	lt
 800b068:	2301      	movlt	r3, #1
 800b06a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b06c:	2200      	movs	r2, #0
 800b06e:	6042      	str	r2, [r0, #4]
 800b070:	2204      	movs	r2, #4
 800b072:	f102 0614 	add.w	r6, r2, #20
 800b076:	429e      	cmp	r6, r3
 800b078:	6841      	ldr	r1, [r0, #4]
 800b07a:	d93d      	bls.n	800b0f8 <_dtoa_r+0x318>
 800b07c:	4620      	mov	r0, r4
 800b07e:	f000 fed7 	bl	800be30 <_Balloc>
 800b082:	9001      	str	r0, [sp, #4]
 800b084:	2800      	cmp	r0, #0
 800b086:	d13b      	bne.n	800b100 <_dtoa_r+0x320>
 800b088:	4b11      	ldr	r3, [pc, #68]	; (800b0d0 <_dtoa_r+0x2f0>)
 800b08a:	4602      	mov	r2, r0
 800b08c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b090:	e6c0      	b.n	800ae14 <_dtoa_r+0x34>
 800b092:	2301      	movs	r3, #1
 800b094:	e7df      	b.n	800b056 <_dtoa_r+0x276>
 800b096:	bf00      	nop
 800b098:	636f4361 	.word	0x636f4361
 800b09c:	3fd287a7 	.word	0x3fd287a7
 800b0a0:	8b60c8b3 	.word	0x8b60c8b3
 800b0a4:	3fc68a28 	.word	0x3fc68a28
 800b0a8:	509f79fb 	.word	0x509f79fb
 800b0ac:	3fd34413 	.word	0x3fd34413
 800b0b0:	0800d129 	.word	0x0800d129
 800b0b4:	0800d140 	.word	0x0800d140
 800b0b8:	7ff00000 	.word	0x7ff00000
 800b0bc:	0800d125 	.word	0x0800d125
 800b0c0:	0800d11c 	.word	0x0800d11c
 800b0c4:	0800d0f9 	.word	0x0800d0f9
 800b0c8:	3ff80000 	.word	0x3ff80000
 800b0cc:	0800d290 	.word	0x0800d290
 800b0d0:	0800d19b 	.word	0x0800d19b
 800b0d4:	2501      	movs	r5, #1
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9306      	str	r3, [sp, #24]
 800b0da:	9508      	str	r5, [sp, #32]
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2312      	movs	r3, #18
 800b0e8:	e7b0      	b.n	800b04c <_dtoa_r+0x26c>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	9308      	str	r3, [sp, #32]
 800b0ee:	e7f5      	b.n	800b0dc <_dtoa_r+0x2fc>
 800b0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0f6:	e7b8      	b.n	800b06a <_dtoa_r+0x28a>
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	6041      	str	r1, [r0, #4]
 800b0fc:	0052      	lsls	r2, r2, #1
 800b0fe:	e7b8      	b.n	800b072 <_dtoa_r+0x292>
 800b100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b102:	9a01      	ldr	r2, [sp, #4]
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	2b0e      	cmp	r3, #14
 800b10a:	f200 809d 	bhi.w	800b248 <_dtoa_r+0x468>
 800b10e:	2d00      	cmp	r5, #0
 800b110:	f000 809a 	beq.w	800b248 <_dtoa_r+0x468>
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	dd32      	ble.n	800b180 <_dtoa_r+0x3a0>
 800b11a:	4ab7      	ldr	r2, [pc, #732]	; (800b3f8 <_dtoa_r+0x618>)
 800b11c:	f003 030f 	and.w	r3, r3, #15
 800b120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b124:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	05d8      	lsls	r0, r3, #23
 800b12c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b130:	d516      	bpl.n	800b160 <_dtoa_r+0x380>
 800b132:	4bb2      	ldr	r3, [pc, #712]	; (800b3fc <_dtoa_r+0x61c>)
 800b134:	ec51 0b19 	vmov	r0, r1, d9
 800b138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b13c:	f7f5 fb96 	bl	800086c <__aeabi_ddiv>
 800b140:	f007 070f 	and.w	r7, r7, #15
 800b144:	4682      	mov	sl, r0
 800b146:	468b      	mov	fp, r1
 800b148:	2503      	movs	r5, #3
 800b14a:	4eac      	ldr	r6, [pc, #688]	; (800b3fc <_dtoa_r+0x61c>)
 800b14c:	b957      	cbnz	r7, 800b164 <_dtoa_r+0x384>
 800b14e:	4642      	mov	r2, r8
 800b150:	464b      	mov	r3, r9
 800b152:	4650      	mov	r0, sl
 800b154:	4659      	mov	r1, fp
 800b156:	f7f5 fb89 	bl	800086c <__aeabi_ddiv>
 800b15a:	4682      	mov	sl, r0
 800b15c:	468b      	mov	fp, r1
 800b15e:	e028      	b.n	800b1b2 <_dtoa_r+0x3d2>
 800b160:	2502      	movs	r5, #2
 800b162:	e7f2      	b.n	800b14a <_dtoa_r+0x36a>
 800b164:	07f9      	lsls	r1, r7, #31
 800b166:	d508      	bpl.n	800b17a <_dtoa_r+0x39a>
 800b168:	4640      	mov	r0, r8
 800b16a:	4649      	mov	r1, r9
 800b16c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b170:	f7f5 fa52 	bl	8000618 <__aeabi_dmul>
 800b174:	3501      	adds	r5, #1
 800b176:	4680      	mov	r8, r0
 800b178:	4689      	mov	r9, r1
 800b17a:	107f      	asrs	r7, r7, #1
 800b17c:	3608      	adds	r6, #8
 800b17e:	e7e5      	b.n	800b14c <_dtoa_r+0x36c>
 800b180:	f000 809b 	beq.w	800b2ba <_dtoa_r+0x4da>
 800b184:	9b00      	ldr	r3, [sp, #0]
 800b186:	4f9d      	ldr	r7, [pc, #628]	; (800b3fc <_dtoa_r+0x61c>)
 800b188:	425e      	negs	r6, r3
 800b18a:	4b9b      	ldr	r3, [pc, #620]	; (800b3f8 <_dtoa_r+0x618>)
 800b18c:	f006 020f 	and.w	r2, r6, #15
 800b190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	ec51 0b19 	vmov	r0, r1, d9
 800b19c:	f7f5 fa3c 	bl	8000618 <__aeabi_dmul>
 800b1a0:	1136      	asrs	r6, r6, #4
 800b1a2:	4682      	mov	sl, r0
 800b1a4:	468b      	mov	fp, r1
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2502      	movs	r5, #2
 800b1aa:	2e00      	cmp	r6, #0
 800b1ac:	d17a      	bne.n	800b2a4 <_dtoa_r+0x4c4>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1d3      	bne.n	800b15a <_dtoa_r+0x37a>
 800b1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8082 	beq.w	800b2be <_dtoa_r+0x4de>
 800b1ba:	4b91      	ldr	r3, [pc, #580]	; (800b400 <_dtoa_r+0x620>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4650      	mov	r0, sl
 800b1c0:	4659      	mov	r1, fp
 800b1c2:	f7f5 fc9b 	bl	8000afc <__aeabi_dcmplt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d079      	beq.n	800b2be <_dtoa_r+0x4de>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d076      	beq.n	800b2be <_dtoa_r+0x4de>
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dd36      	ble.n	800b244 <_dtoa_r+0x464>
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	4650      	mov	r0, sl
 800b1da:	4659      	mov	r1, fp
 800b1dc:	1e5f      	subs	r7, r3, #1
 800b1de:	2200      	movs	r2, #0
 800b1e0:	4b88      	ldr	r3, [pc, #544]	; (800b404 <_dtoa_r+0x624>)
 800b1e2:	f7f5 fa19 	bl	8000618 <__aeabi_dmul>
 800b1e6:	9e02      	ldr	r6, [sp, #8]
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	468b      	mov	fp, r1
 800b1ec:	3501      	adds	r5, #1
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f7f5 f9a8 	bl	8000544 <__aeabi_i2d>
 800b1f4:	4652      	mov	r2, sl
 800b1f6:	465b      	mov	r3, fp
 800b1f8:	f7f5 fa0e 	bl	8000618 <__aeabi_dmul>
 800b1fc:	4b82      	ldr	r3, [pc, #520]	; (800b408 <_dtoa_r+0x628>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	f7f5 f854 	bl	80002ac <__adddf3>
 800b204:	46d0      	mov	r8, sl
 800b206:	46d9      	mov	r9, fp
 800b208:	4682      	mov	sl, r0
 800b20a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b20e:	2e00      	cmp	r6, #0
 800b210:	d158      	bne.n	800b2c4 <_dtoa_r+0x4e4>
 800b212:	4b7e      	ldr	r3, [pc, #504]	; (800b40c <_dtoa_r+0x62c>)
 800b214:	2200      	movs	r2, #0
 800b216:	4640      	mov	r0, r8
 800b218:	4649      	mov	r1, r9
 800b21a:	f7f5 f845 	bl	80002a8 <__aeabi_dsub>
 800b21e:	4652      	mov	r2, sl
 800b220:	465b      	mov	r3, fp
 800b222:	4680      	mov	r8, r0
 800b224:	4689      	mov	r9, r1
 800b226:	f7f5 fc87 	bl	8000b38 <__aeabi_dcmpgt>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f040 8295 	bne.w	800b75a <_dtoa_r+0x97a>
 800b230:	4652      	mov	r2, sl
 800b232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b236:	4640      	mov	r0, r8
 800b238:	4649      	mov	r1, r9
 800b23a:	f7f5 fc5f 	bl	8000afc <__aeabi_dcmplt>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f040 8289 	bne.w	800b756 <_dtoa_r+0x976>
 800b244:	ec5b ab19 	vmov	sl, fp, d9
 800b248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f2c0 8148 	blt.w	800b4e0 <_dtoa_r+0x700>
 800b250:	9a00      	ldr	r2, [sp, #0]
 800b252:	2a0e      	cmp	r2, #14
 800b254:	f300 8144 	bgt.w	800b4e0 <_dtoa_r+0x700>
 800b258:	4b67      	ldr	r3, [pc, #412]	; (800b3f8 <_dtoa_r+0x618>)
 800b25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b25e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	f280 80d5 	bge.w	800b414 <_dtoa_r+0x634>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f300 80d1 	bgt.w	800b414 <_dtoa_r+0x634>
 800b272:	f040 826f 	bne.w	800b754 <_dtoa_r+0x974>
 800b276:	4b65      	ldr	r3, [pc, #404]	; (800b40c <_dtoa_r+0x62c>)
 800b278:	2200      	movs	r2, #0
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 f9cb 	bl	8000618 <__aeabi_dmul>
 800b282:	4652      	mov	r2, sl
 800b284:	465b      	mov	r3, fp
 800b286:	f7f5 fc4d 	bl	8000b24 <__aeabi_dcmpge>
 800b28a:	9e03      	ldr	r6, [sp, #12]
 800b28c:	4637      	mov	r7, r6
 800b28e:	2800      	cmp	r0, #0
 800b290:	f040 8245 	bne.w	800b71e <_dtoa_r+0x93e>
 800b294:	9d01      	ldr	r5, [sp, #4]
 800b296:	2331      	movs	r3, #49	; 0x31
 800b298:	f805 3b01 	strb.w	r3, [r5], #1
 800b29c:	9b00      	ldr	r3, [sp, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	e240      	b.n	800b726 <_dtoa_r+0x946>
 800b2a4:	07f2      	lsls	r2, r6, #31
 800b2a6:	d505      	bpl.n	800b2b4 <_dtoa_r+0x4d4>
 800b2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ac:	f7f5 f9b4 	bl	8000618 <__aeabi_dmul>
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	1076      	asrs	r6, r6, #1
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	e777      	b.n	800b1aa <_dtoa_r+0x3ca>
 800b2ba:	2502      	movs	r5, #2
 800b2bc:	e779      	b.n	800b1b2 <_dtoa_r+0x3d2>
 800b2be:	9f00      	ldr	r7, [sp, #0]
 800b2c0:	9e03      	ldr	r6, [sp, #12]
 800b2c2:	e794      	b.n	800b1ee <_dtoa_r+0x40e>
 800b2c4:	9901      	ldr	r1, [sp, #4]
 800b2c6:	4b4c      	ldr	r3, [pc, #304]	; (800b3f8 <_dtoa_r+0x618>)
 800b2c8:	4431      	add	r1, r6
 800b2ca:	910d      	str	r1, [sp, #52]	; 0x34
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d043      	beq.n	800b362 <_dtoa_r+0x582>
 800b2da:	494d      	ldr	r1, [pc, #308]	; (800b410 <_dtoa_r+0x630>)
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f7f5 fac5 	bl	800086c <__aeabi_ddiv>
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	465b      	mov	r3, fp
 800b2e6:	f7f4 ffdf 	bl	80002a8 <__aeabi_dsub>
 800b2ea:	9d01      	ldr	r5, [sp, #4]
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	f7f5 fc40 	bl	8000b78 <__aeabi_d2iz>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	f7f5 f923 	bl	8000544 <__aeabi_i2d>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4640      	mov	r0, r8
 800b304:	4649      	mov	r1, r9
 800b306:	f7f4 ffcf 	bl	80002a8 <__aeabi_dsub>
 800b30a:	3630      	adds	r6, #48	; 0x30
 800b30c:	f805 6b01 	strb.w	r6, [r5], #1
 800b310:	4652      	mov	r2, sl
 800b312:	465b      	mov	r3, fp
 800b314:	4680      	mov	r8, r0
 800b316:	4689      	mov	r9, r1
 800b318:	f7f5 fbf0 	bl	8000afc <__aeabi_dcmplt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d163      	bne.n	800b3e8 <_dtoa_r+0x608>
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	4936      	ldr	r1, [pc, #216]	; (800b400 <_dtoa_r+0x620>)
 800b326:	2000      	movs	r0, #0
 800b328:	f7f4 ffbe 	bl	80002a8 <__aeabi_dsub>
 800b32c:	4652      	mov	r2, sl
 800b32e:	465b      	mov	r3, fp
 800b330:	f7f5 fbe4 	bl	8000afc <__aeabi_dcmplt>
 800b334:	2800      	cmp	r0, #0
 800b336:	f040 80b5 	bne.w	800b4a4 <_dtoa_r+0x6c4>
 800b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33c:	429d      	cmp	r5, r3
 800b33e:	d081      	beq.n	800b244 <_dtoa_r+0x464>
 800b340:	4b30      	ldr	r3, [pc, #192]	; (800b404 <_dtoa_r+0x624>)
 800b342:	2200      	movs	r2, #0
 800b344:	4650      	mov	r0, sl
 800b346:	4659      	mov	r1, fp
 800b348:	f7f5 f966 	bl	8000618 <__aeabi_dmul>
 800b34c:	4b2d      	ldr	r3, [pc, #180]	; (800b404 <_dtoa_r+0x624>)
 800b34e:	4682      	mov	sl, r0
 800b350:	468b      	mov	fp, r1
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	2200      	movs	r2, #0
 800b358:	f7f5 f95e 	bl	8000618 <__aeabi_dmul>
 800b35c:	4680      	mov	r8, r0
 800b35e:	4689      	mov	r9, r1
 800b360:	e7c6      	b.n	800b2f0 <_dtoa_r+0x510>
 800b362:	4650      	mov	r0, sl
 800b364:	4659      	mov	r1, fp
 800b366:	f7f5 f957 	bl	8000618 <__aeabi_dmul>
 800b36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b36c:	9d01      	ldr	r5, [sp, #4]
 800b36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b370:	4682      	mov	sl, r0
 800b372:	468b      	mov	fp, r1
 800b374:	4649      	mov	r1, r9
 800b376:	4640      	mov	r0, r8
 800b378:	f7f5 fbfe 	bl	8000b78 <__aeabi_d2iz>
 800b37c:	4606      	mov	r6, r0
 800b37e:	f7f5 f8e1 	bl	8000544 <__aeabi_i2d>
 800b382:	3630      	adds	r6, #48	; 0x30
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4640      	mov	r0, r8
 800b38a:	4649      	mov	r1, r9
 800b38c:	f7f4 ff8c 	bl	80002a8 <__aeabi_dsub>
 800b390:	f805 6b01 	strb.w	r6, [r5], #1
 800b394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b396:	429d      	cmp	r5, r3
 800b398:	4680      	mov	r8, r0
 800b39a:	4689      	mov	r9, r1
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	d124      	bne.n	800b3ec <_dtoa_r+0x60c>
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	; (800b410 <_dtoa_r+0x630>)
 800b3a4:	4650      	mov	r0, sl
 800b3a6:	4659      	mov	r1, fp
 800b3a8:	f7f4 ff80 	bl	80002ac <__adddf3>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f5 fbc0 	bl	8000b38 <__aeabi_dcmpgt>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d173      	bne.n	800b4a4 <_dtoa_r+0x6c4>
 800b3bc:	4652      	mov	r2, sl
 800b3be:	465b      	mov	r3, fp
 800b3c0:	4913      	ldr	r1, [pc, #76]	; (800b410 <_dtoa_r+0x630>)
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	f7f4 ff70 	bl	80002a8 <__aeabi_dsub>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	f7f5 fb94 	bl	8000afc <__aeabi_dcmplt>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	f43f af35 	beq.w	800b244 <_dtoa_r+0x464>
 800b3da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3dc:	1e6b      	subs	r3, r5, #1
 800b3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3e4:	2b30      	cmp	r3, #48	; 0x30
 800b3e6:	d0f8      	beq.n	800b3da <_dtoa_r+0x5fa>
 800b3e8:	9700      	str	r7, [sp, #0]
 800b3ea:	e049      	b.n	800b480 <_dtoa_r+0x6a0>
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <_dtoa_r+0x624>)
 800b3ee:	f7f5 f913 	bl	8000618 <__aeabi_dmul>
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	e7bd      	b.n	800b374 <_dtoa_r+0x594>
 800b3f8:	0800d290 	.word	0x0800d290
 800b3fc:	0800d268 	.word	0x0800d268
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	40240000 	.word	0x40240000
 800b408:	401c0000 	.word	0x401c0000
 800b40c:	40140000 	.word	0x40140000
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	9d01      	ldr	r5, [sp, #4]
 800b416:	4656      	mov	r6, sl
 800b418:	465f      	mov	r7, fp
 800b41a:	4642      	mov	r2, r8
 800b41c:	464b      	mov	r3, r9
 800b41e:	4630      	mov	r0, r6
 800b420:	4639      	mov	r1, r7
 800b422:	f7f5 fa23 	bl	800086c <__aeabi_ddiv>
 800b426:	f7f5 fba7 	bl	8000b78 <__aeabi_d2iz>
 800b42a:	4682      	mov	sl, r0
 800b42c:	f7f5 f88a 	bl	8000544 <__aeabi_i2d>
 800b430:	4642      	mov	r2, r8
 800b432:	464b      	mov	r3, r9
 800b434:	f7f5 f8f0 	bl	8000618 <__aeabi_dmul>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4630      	mov	r0, r6
 800b43e:	4639      	mov	r1, r7
 800b440:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b444:	f7f4 ff30 	bl	80002a8 <__aeabi_dsub>
 800b448:	f805 6b01 	strb.w	r6, [r5], #1
 800b44c:	9e01      	ldr	r6, [sp, #4]
 800b44e:	9f03      	ldr	r7, [sp, #12]
 800b450:	1bae      	subs	r6, r5, r6
 800b452:	42b7      	cmp	r7, r6
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	d135      	bne.n	800b4c6 <_dtoa_r+0x6e6>
 800b45a:	f7f4 ff27 	bl	80002ac <__adddf3>
 800b45e:	4642      	mov	r2, r8
 800b460:	464b      	mov	r3, r9
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	f7f5 fb67 	bl	8000b38 <__aeabi_dcmpgt>
 800b46a:	b9d0      	cbnz	r0, 800b4a2 <_dtoa_r+0x6c2>
 800b46c:	4642      	mov	r2, r8
 800b46e:	464b      	mov	r3, r9
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 fb38 	bl	8000ae8 <__aeabi_dcmpeq>
 800b478:	b110      	cbz	r0, 800b480 <_dtoa_r+0x6a0>
 800b47a:	f01a 0f01 	tst.w	sl, #1
 800b47e:	d110      	bne.n	800b4a2 <_dtoa_r+0x6c2>
 800b480:	4620      	mov	r0, r4
 800b482:	ee18 1a10 	vmov	r1, s16
 800b486:	f000 fd13 	bl	800beb0 <_Bfree>
 800b48a:	2300      	movs	r3, #0
 800b48c:	9800      	ldr	r0, [sp, #0]
 800b48e:	702b      	strb	r3, [r5, #0]
 800b490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b492:	3001      	adds	r0, #1
 800b494:	6018      	str	r0, [r3, #0]
 800b496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f43f acf1 	beq.w	800ae80 <_dtoa_r+0xa0>
 800b49e:	601d      	str	r5, [r3, #0]
 800b4a0:	e4ee      	b.n	800ae80 <_dtoa_r+0xa0>
 800b4a2:	9f00      	ldr	r7, [sp, #0]
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	461d      	mov	r5, r3
 800b4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ac:	2a39      	cmp	r2, #57	; 0x39
 800b4ae:	d106      	bne.n	800b4be <_dtoa_r+0x6de>
 800b4b0:	9a01      	ldr	r2, [sp, #4]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d1f7      	bne.n	800b4a6 <_dtoa_r+0x6c6>
 800b4b6:	9901      	ldr	r1, [sp, #4]
 800b4b8:	2230      	movs	r2, #48	; 0x30
 800b4ba:	3701      	adds	r7, #1
 800b4bc:	700a      	strb	r2, [r1, #0]
 800b4be:	781a      	ldrb	r2, [r3, #0]
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e790      	b.n	800b3e8 <_dtoa_r+0x608>
 800b4c6:	4ba6      	ldr	r3, [pc, #664]	; (800b760 <_dtoa_r+0x980>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f7f5 f8a5 	bl	8000618 <__aeabi_dmul>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	f7f5 fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d09d      	beq.n	800b41a <_dtoa_r+0x63a>
 800b4de:	e7cf      	b.n	800b480 <_dtoa_r+0x6a0>
 800b4e0:	9a08      	ldr	r2, [sp, #32]
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	f000 80d7 	beq.w	800b696 <_dtoa_r+0x8b6>
 800b4e8:	9a06      	ldr	r2, [sp, #24]
 800b4ea:	2a01      	cmp	r2, #1
 800b4ec:	f300 80ba 	bgt.w	800b664 <_dtoa_r+0x884>
 800b4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	f000 80b2 	beq.w	800b65c <_dtoa_r+0x87c>
 800b4f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4fc:	9e07      	ldr	r6, [sp, #28]
 800b4fe:	9d04      	ldr	r5, [sp, #16]
 800b500:	9a04      	ldr	r2, [sp, #16]
 800b502:	441a      	add	r2, r3
 800b504:	9204      	str	r2, [sp, #16]
 800b506:	9a05      	ldr	r2, [sp, #20]
 800b508:	2101      	movs	r1, #1
 800b50a:	441a      	add	r2, r3
 800b50c:	4620      	mov	r0, r4
 800b50e:	9205      	str	r2, [sp, #20]
 800b510:	f000 fd86 	bl	800c020 <__i2b>
 800b514:	4607      	mov	r7, r0
 800b516:	2d00      	cmp	r5, #0
 800b518:	dd0c      	ble.n	800b534 <_dtoa_r+0x754>
 800b51a:	9b05      	ldr	r3, [sp, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	dd09      	ble.n	800b534 <_dtoa_r+0x754>
 800b520:	42ab      	cmp	r3, r5
 800b522:	9a04      	ldr	r2, [sp, #16]
 800b524:	bfa8      	it	ge
 800b526:	462b      	movge	r3, r5
 800b528:	1ad2      	subs	r2, r2, r3
 800b52a:	9204      	str	r2, [sp, #16]
 800b52c:	9a05      	ldr	r2, [sp, #20]
 800b52e:	1aed      	subs	r5, r5, r3
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	9305      	str	r3, [sp, #20]
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	b31b      	cbz	r3, 800b580 <_dtoa_r+0x7a0>
 800b538:	9b08      	ldr	r3, [sp, #32]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 80af 	beq.w	800b69e <_dtoa_r+0x8be>
 800b540:	2e00      	cmp	r6, #0
 800b542:	dd13      	ble.n	800b56c <_dtoa_r+0x78c>
 800b544:	4639      	mov	r1, r7
 800b546:	4632      	mov	r2, r6
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 fe29 	bl	800c1a0 <__pow5mult>
 800b54e:	ee18 2a10 	vmov	r2, s16
 800b552:	4601      	mov	r1, r0
 800b554:	4607      	mov	r7, r0
 800b556:	4620      	mov	r0, r4
 800b558:	f000 fd78 	bl	800c04c <__multiply>
 800b55c:	ee18 1a10 	vmov	r1, s16
 800b560:	4680      	mov	r8, r0
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fca4 	bl	800beb0 <_Bfree>
 800b568:	ee08 8a10 	vmov	s16, r8
 800b56c:	9b07      	ldr	r3, [sp, #28]
 800b56e:	1b9a      	subs	r2, r3, r6
 800b570:	d006      	beq.n	800b580 <_dtoa_r+0x7a0>
 800b572:	ee18 1a10 	vmov	r1, s16
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fe12 	bl	800c1a0 <__pow5mult>
 800b57c:	ee08 0a10 	vmov	s16, r0
 800b580:	2101      	movs	r1, #1
 800b582:	4620      	mov	r0, r4
 800b584:	f000 fd4c 	bl	800c020 <__i2b>
 800b588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	4606      	mov	r6, r0
 800b58e:	f340 8088 	ble.w	800b6a2 <_dtoa_r+0x8c2>
 800b592:	461a      	mov	r2, r3
 800b594:	4601      	mov	r1, r0
 800b596:	4620      	mov	r0, r4
 800b598:	f000 fe02 	bl	800c1a0 <__pow5mult>
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	f340 8081 	ble.w	800b6a8 <_dtoa_r+0x8c8>
 800b5a6:	f04f 0800 	mov.w	r8, #0
 800b5aa:	6933      	ldr	r3, [r6, #16]
 800b5ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5b0:	6918      	ldr	r0, [r3, #16]
 800b5b2:	f000 fce5 	bl	800bf80 <__hi0bits>
 800b5b6:	f1c0 0020 	rsb	r0, r0, #32
 800b5ba:	9b05      	ldr	r3, [sp, #20]
 800b5bc:	4418      	add	r0, r3
 800b5be:	f010 001f 	ands.w	r0, r0, #31
 800b5c2:	f000 8092 	beq.w	800b6ea <_dtoa_r+0x90a>
 800b5c6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	f340 808a 	ble.w	800b6e4 <_dtoa_r+0x904>
 800b5d0:	f1c0 001c 	rsb	r0, r0, #28
 800b5d4:	9b04      	ldr	r3, [sp, #16]
 800b5d6:	4403      	add	r3, r0
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	4403      	add	r3, r0
 800b5de:	4405      	add	r5, r0
 800b5e0:	9305      	str	r3, [sp, #20]
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dd07      	ble.n	800b5f8 <_dtoa_r+0x818>
 800b5e8:	ee18 1a10 	vmov	r1, s16
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 fe30 	bl	800c254 <__lshift>
 800b5f4:	ee08 0a10 	vmov	s16, r0
 800b5f8:	9b05      	ldr	r3, [sp, #20]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dd05      	ble.n	800b60a <_dtoa_r+0x82a>
 800b5fe:	4631      	mov	r1, r6
 800b600:	461a      	mov	r2, r3
 800b602:	4620      	mov	r0, r4
 800b604:	f000 fe26 	bl	800c254 <__lshift>
 800b608:	4606      	mov	r6, r0
 800b60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d06e      	beq.n	800b6ee <_dtoa_r+0x90e>
 800b610:	ee18 0a10 	vmov	r0, s16
 800b614:	4631      	mov	r1, r6
 800b616:	f000 fe8d 	bl	800c334 <__mcmp>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	da67      	bge.n	800b6ee <_dtoa_r+0x90e>
 800b61e:	9b00      	ldr	r3, [sp, #0]
 800b620:	3b01      	subs	r3, #1
 800b622:	ee18 1a10 	vmov	r1, s16
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	220a      	movs	r2, #10
 800b62a:	2300      	movs	r3, #0
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 fc61 	bl	800bef4 <__multadd>
 800b632:	9b08      	ldr	r3, [sp, #32]
 800b634:	ee08 0a10 	vmov	s16, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 81b1 	beq.w	800b9a0 <_dtoa_r+0xbc0>
 800b63e:	2300      	movs	r3, #0
 800b640:	4639      	mov	r1, r7
 800b642:	220a      	movs	r2, #10
 800b644:	4620      	mov	r0, r4
 800b646:	f000 fc55 	bl	800bef4 <__multadd>
 800b64a:	9b02      	ldr	r3, [sp, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	4607      	mov	r7, r0
 800b650:	f300 808e 	bgt.w	800b770 <_dtoa_r+0x990>
 800b654:	9b06      	ldr	r3, [sp, #24]
 800b656:	2b02      	cmp	r3, #2
 800b658:	dc51      	bgt.n	800b6fe <_dtoa_r+0x91e>
 800b65a:	e089      	b.n	800b770 <_dtoa_r+0x990>
 800b65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b65e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b662:	e74b      	b.n	800b4fc <_dtoa_r+0x71c>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	1e5e      	subs	r6, r3, #1
 800b668:	9b07      	ldr	r3, [sp, #28]
 800b66a:	42b3      	cmp	r3, r6
 800b66c:	bfbf      	itttt	lt
 800b66e:	9b07      	ldrlt	r3, [sp, #28]
 800b670:	9607      	strlt	r6, [sp, #28]
 800b672:	1af2      	sublt	r2, r6, r3
 800b674:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b676:	bfb6      	itet	lt
 800b678:	189b      	addlt	r3, r3, r2
 800b67a:	1b9e      	subge	r6, r3, r6
 800b67c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	bfb8      	it	lt
 800b682:	2600      	movlt	r6, #0
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfb7      	itett	lt
 800b688:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b68c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b690:	1a9d      	sublt	r5, r3, r2
 800b692:	2300      	movlt	r3, #0
 800b694:	e734      	b.n	800b500 <_dtoa_r+0x720>
 800b696:	9e07      	ldr	r6, [sp, #28]
 800b698:	9d04      	ldr	r5, [sp, #16]
 800b69a:	9f08      	ldr	r7, [sp, #32]
 800b69c:	e73b      	b.n	800b516 <_dtoa_r+0x736>
 800b69e:	9a07      	ldr	r2, [sp, #28]
 800b6a0:	e767      	b.n	800b572 <_dtoa_r+0x792>
 800b6a2:	9b06      	ldr	r3, [sp, #24]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	dc18      	bgt.n	800b6da <_dtoa_r+0x8fa>
 800b6a8:	f1ba 0f00 	cmp.w	sl, #0
 800b6ac:	d115      	bne.n	800b6da <_dtoa_r+0x8fa>
 800b6ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6b2:	b993      	cbnz	r3, 800b6da <_dtoa_r+0x8fa>
 800b6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6b8:	0d1b      	lsrs	r3, r3, #20
 800b6ba:	051b      	lsls	r3, r3, #20
 800b6bc:	b183      	cbz	r3, 800b6e0 <_dtoa_r+0x900>
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	9b05      	ldr	r3, [sp, #20]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	9305      	str	r3, [sp, #20]
 800b6ca:	f04f 0801 	mov.w	r8, #1
 800b6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f47f af6a 	bne.w	800b5aa <_dtoa_r+0x7ca>
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	e76f      	b.n	800b5ba <_dtoa_r+0x7da>
 800b6da:	f04f 0800 	mov.w	r8, #0
 800b6de:	e7f6      	b.n	800b6ce <_dtoa_r+0x8ee>
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	e7f4      	b.n	800b6ce <_dtoa_r+0x8ee>
 800b6e4:	f43f af7d 	beq.w	800b5e2 <_dtoa_r+0x802>
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	301c      	adds	r0, #28
 800b6ec:	e772      	b.n	800b5d4 <_dtoa_r+0x7f4>
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dc37      	bgt.n	800b764 <_dtoa_r+0x984>
 800b6f4:	9b06      	ldr	r3, [sp, #24]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	dd34      	ble.n	800b764 <_dtoa_r+0x984>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	9b02      	ldr	r3, [sp, #8]
 800b700:	b96b      	cbnz	r3, 800b71e <_dtoa_r+0x93e>
 800b702:	4631      	mov	r1, r6
 800b704:	2205      	movs	r2, #5
 800b706:	4620      	mov	r0, r4
 800b708:	f000 fbf4 	bl	800bef4 <__multadd>
 800b70c:	4601      	mov	r1, r0
 800b70e:	4606      	mov	r6, r0
 800b710:	ee18 0a10 	vmov	r0, s16
 800b714:	f000 fe0e 	bl	800c334 <__mcmp>
 800b718:	2800      	cmp	r0, #0
 800b71a:	f73f adbb 	bgt.w	800b294 <_dtoa_r+0x4b4>
 800b71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b720:	9d01      	ldr	r5, [sp, #4]
 800b722:	43db      	mvns	r3, r3
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	f04f 0800 	mov.w	r8, #0
 800b72a:	4631      	mov	r1, r6
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fbbf 	bl	800beb0 <_Bfree>
 800b732:	2f00      	cmp	r7, #0
 800b734:	f43f aea4 	beq.w	800b480 <_dtoa_r+0x6a0>
 800b738:	f1b8 0f00 	cmp.w	r8, #0
 800b73c:	d005      	beq.n	800b74a <_dtoa_r+0x96a>
 800b73e:	45b8      	cmp	r8, r7
 800b740:	d003      	beq.n	800b74a <_dtoa_r+0x96a>
 800b742:	4641      	mov	r1, r8
 800b744:	4620      	mov	r0, r4
 800b746:	f000 fbb3 	bl	800beb0 <_Bfree>
 800b74a:	4639      	mov	r1, r7
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fbaf 	bl	800beb0 <_Bfree>
 800b752:	e695      	b.n	800b480 <_dtoa_r+0x6a0>
 800b754:	2600      	movs	r6, #0
 800b756:	4637      	mov	r7, r6
 800b758:	e7e1      	b.n	800b71e <_dtoa_r+0x93e>
 800b75a:	9700      	str	r7, [sp, #0]
 800b75c:	4637      	mov	r7, r6
 800b75e:	e599      	b.n	800b294 <_dtoa_r+0x4b4>
 800b760:	40240000 	.word	0x40240000
 800b764:	9b08      	ldr	r3, [sp, #32]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 80ca 	beq.w	800b900 <_dtoa_r+0xb20>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	9302      	str	r3, [sp, #8]
 800b770:	2d00      	cmp	r5, #0
 800b772:	dd05      	ble.n	800b780 <_dtoa_r+0x9a0>
 800b774:	4639      	mov	r1, r7
 800b776:	462a      	mov	r2, r5
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fd6b 	bl	800c254 <__lshift>
 800b77e:	4607      	mov	r7, r0
 800b780:	f1b8 0f00 	cmp.w	r8, #0
 800b784:	d05b      	beq.n	800b83e <_dtoa_r+0xa5e>
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 fb51 	bl	800be30 <_Balloc>
 800b78e:	4605      	mov	r5, r0
 800b790:	b928      	cbnz	r0, 800b79e <_dtoa_r+0x9be>
 800b792:	4b87      	ldr	r3, [pc, #540]	; (800b9b0 <_dtoa_r+0xbd0>)
 800b794:	4602      	mov	r2, r0
 800b796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b79a:	f7ff bb3b 	b.w	800ae14 <_dtoa_r+0x34>
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	3202      	adds	r2, #2
 800b7a2:	0092      	lsls	r2, r2, #2
 800b7a4:	f107 010c 	add.w	r1, r7, #12
 800b7a8:	300c      	adds	r0, #12
 800b7aa:	f000 fb33 	bl	800be14 <memcpy>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fd4e 	bl	800c254 <__lshift>
 800b7b8:	9b01      	ldr	r3, [sp, #4]
 800b7ba:	f103 0901 	add.w	r9, r3, #1
 800b7be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	9305      	str	r3, [sp, #20]
 800b7c6:	f00a 0301 	and.w	r3, sl, #1
 800b7ca:	46b8      	mov	r8, r7
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	4631      	mov	r1, r6
 800b7d2:	ee18 0a10 	vmov	r0, s16
 800b7d6:	f7ff fa75 	bl	800acc4 <quorem>
 800b7da:	4641      	mov	r1, r8
 800b7dc:	9002      	str	r0, [sp, #8]
 800b7de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7e2:	ee18 0a10 	vmov	r0, s16
 800b7e6:	f000 fda5 	bl	800c334 <__mcmp>
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	9003      	str	r0, [sp, #12]
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fdbb 	bl	800c36c <__mdiff>
 800b7f6:	68c2      	ldr	r2, [r0, #12]
 800b7f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	bb02      	cbnz	r2, 800b842 <_dtoa_r+0xa62>
 800b800:	4601      	mov	r1, r0
 800b802:	ee18 0a10 	vmov	r0, s16
 800b806:	f000 fd95 	bl	800c334 <__mcmp>
 800b80a:	4602      	mov	r2, r0
 800b80c:	4629      	mov	r1, r5
 800b80e:	4620      	mov	r0, r4
 800b810:	9207      	str	r2, [sp, #28]
 800b812:	f000 fb4d 	bl	800beb0 <_Bfree>
 800b816:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b81a:	ea43 0102 	orr.w	r1, r3, r2
 800b81e:	9b04      	ldr	r3, [sp, #16]
 800b820:	430b      	orrs	r3, r1
 800b822:	464d      	mov	r5, r9
 800b824:	d10f      	bne.n	800b846 <_dtoa_r+0xa66>
 800b826:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b82a:	d02a      	beq.n	800b882 <_dtoa_r+0xaa2>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	dd02      	ble.n	800b838 <_dtoa_r+0xa58>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b838:	f88b a000 	strb.w	sl, [fp]
 800b83c:	e775      	b.n	800b72a <_dtoa_r+0x94a>
 800b83e:	4638      	mov	r0, r7
 800b840:	e7ba      	b.n	800b7b8 <_dtoa_r+0x9d8>
 800b842:	2201      	movs	r2, #1
 800b844:	e7e2      	b.n	800b80c <_dtoa_r+0xa2c>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	db04      	blt.n	800b856 <_dtoa_r+0xa76>
 800b84c:	9906      	ldr	r1, [sp, #24]
 800b84e:	430b      	orrs	r3, r1
 800b850:	9904      	ldr	r1, [sp, #16]
 800b852:	430b      	orrs	r3, r1
 800b854:	d122      	bne.n	800b89c <_dtoa_r+0xabc>
 800b856:	2a00      	cmp	r2, #0
 800b858:	ddee      	ble.n	800b838 <_dtoa_r+0xa58>
 800b85a:	ee18 1a10 	vmov	r1, s16
 800b85e:	2201      	movs	r2, #1
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fcf7 	bl	800c254 <__lshift>
 800b866:	4631      	mov	r1, r6
 800b868:	ee08 0a10 	vmov	s16, r0
 800b86c:	f000 fd62 	bl	800c334 <__mcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	dc03      	bgt.n	800b87c <_dtoa_r+0xa9c>
 800b874:	d1e0      	bne.n	800b838 <_dtoa_r+0xa58>
 800b876:	f01a 0f01 	tst.w	sl, #1
 800b87a:	d0dd      	beq.n	800b838 <_dtoa_r+0xa58>
 800b87c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b880:	d1d7      	bne.n	800b832 <_dtoa_r+0xa52>
 800b882:	2339      	movs	r3, #57	; 0x39
 800b884:	f88b 3000 	strb.w	r3, [fp]
 800b888:	462b      	mov	r3, r5
 800b88a:	461d      	mov	r5, r3
 800b88c:	3b01      	subs	r3, #1
 800b88e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b892:	2a39      	cmp	r2, #57	; 0x39
 800b894:	d071      	beq.n	800b97a <_dtoa_r+0xb9a>
 800b896:	3201      	adds	r2, #1
 800b898:	701a      	strb	r2, [r3, #0]
 800b89a:	e746      	b.n	800b72a <_dtoa_r+0x94a>
 800b89c:	2a00      	cmp	r2, #0
 800b89e:	dd07      	ble.n	800b8b0 <_dtoa_r+0xad0>
 800b8a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8a4:	d0ed      	beq.n	800b882 <_dtoa_r+0xaa2>
 800b8a6:	f10a 0301 	add.w	r3, sl, #1
 800b8aa:	f88b 3000 	strb.w	r3, [fp]
 800b8ae:	e73c      	b.n	800b72a <_dtoa_r+0x94a>
 800b8b0:	9b05      	ldr	r3, [sp, #20]
 800b8b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b8b6:	4599      	cmp	r9, r3
 800b8b8:	d047      	beq.n	800b94a <_dtoa_r+0xb6a>
 800b8ba:	ee18 1a10 	vmov	r1, s16
 800b8be:	2300      	movs	r3, #0
 800b8c0:	220a      	movs	r2, #10
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fb16 	bl	800bef4 <__multadd>
 800b8c8:	45b8      	cmp	r8, r7
 800b8ca:	ee08 0a10 	vmov	s16, r0
 800b8ce:	f04f 0300 	mov.w	r3, #0
 800b8d2:	f04f 020a 	mov.w	r2, #10
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	4620      	mov	r0, r4
 800b8da:	d106      	bne.n	800b8ea <_dtoa_r+0xb0a>
 800b8dc:	f000 fb0a 	bl	800bef4 <__multadd>
 800b8e0:	4680      	mov	r8, r0
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	f109 0901 	add.w	r9, r9, #1
 800b8e8:	e772      	b.n	800b7d0 <_dtoa_r+0x9f0>
 800b8ea:	f000 fb03 	bl	800bef4 <__multadd>
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	220a      	movs	r2, #10
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fafc 	bl	800bef4 <__multadd>
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	e7f1      	b.n	800b8e4 <_dtoa_r+0xb04>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	9302      	str	r3, [sp, #8]
 800b904:	9d01      	ldr	r5, [sp, #4]
 800b906:	ee18 0a10 	vmov	r0, s16
 800b90a:	4631      	mov	r1, r6
 800b90c:	f7ff f9da 	bl	800acc4 <quorem>
 800b910:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b914:	9b01      	ldr	r3, [sp, #4]
 800b916:	f805 ab01 	strb.w	sl, [r5], #1
 800b91a:	1aea      	subs	r2, r5, r3
 800b91c:	9b02      	ldr	r3, [sp, #8]
 800b91e:	4293      	cmp	r3, r2
 800b920:	dd09      	ble.n	800b936 <_dtoa_r+0xb56>
 800b922:	ee18 1a10 	vmov	r1, s16
 800b926:	2300      	movs	r3, #0
 800b928:	220a      	movs	r2, #10
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 fae2 	bl	800bef4 <__multadd>
 800b930:	ee08 0a10 	vmov	s16, r0
 800b934:	e7e7      	b.n	800b906 <_dtoa_r+0xb26>
 800b936:	9b02      	ldr	r3, [sp, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfc8      	it	gt
 800b93c:	461d      	movgt	r5, r3
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	bfd8      	it	le
 800b942:	2501      	movle	r5, #1
 800b944:	441d      	add	r5, r3
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	ee18 1a10 	vmov	r1, s16
 800b94e:	2201      	movs	r2, #1
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fc7f 	bl	800c254 <__lshift>
 800b956:	4631      	mov	r1, r6
 800b958:	ee08 0a10 	vmov	s16, r0
 800b95c:	f000 fcea 	bl	800c334 <__mcmp>
 800b960:	2800      	cmp	r0, #0
 800b962:	dc91      	bgt.n	800b888 <_dtoa_r+0xaa8>
 800b964:	d102      	bne.n	800b96c <_dtoa_r+0xb8c>
 800b966:	f01a 0f01 	tst.w	sl, #1
 800b96a:	d18d      	bne.n	800b888 <_dtoa_r+0xaa8>
 800b96c:	462b      	mov	r3, r5
 800b96e:	461d      	mov	r5, r3
 800b970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b974:	2a30      	cmp	r2, #48	; 0x30
 800b976:	d0fa      	beq.n	800b96e <_dtoa_r+0xb8e>
 800b978:	e6d7      	b.n	800b72a <_dtoa_r+0x94a>
 800b97a:	9a01      	ldr	r2, [sp, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d184      	bne.n	800b88a <_dtoa_r+0xaaa>
 800b980:	9b00      	ldr	r3, [sp, #0]
 800b982:	3301      	adds	r3, #1
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	2331      	movs	r3, #49	; 0x31
 800b988:	7013      	strb	r3, [r2, #0]
 800b98a:	e6ce      	b.n	800b72a <_dtoa_r+0x94a>
 800b98c:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <_dtoa_r+0xbd4>)
 800b98e:	f7ff ba95 	b.w	800aebc <_dtoa_r+0xdc>
 800b992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b994:	2b00      	cmp	r3, #0
 800b996:	f47f aa6e 	bne.w	800ae76 <_dtoa_r+0x96>
 800b99a:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <_dtoa_r+0xbd8>)
 800b99c:	f7ff ba8e 	b.w	800aebc <_dtoa_r+0xdc>
 800b9a0:	9b02      	ldr	r3, [sp, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	dcae      	bgt.n	800b904 <_dtoa_r+0xb24>
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	f73f aea8 	bgt.w	800b6fe <_dtoa_r+0x91e>
 800b9ae:	e7a9      	b.n	800b904 <_dtoa_r+0xb24>
 800b9b0:	0800d19b 	.word	0x0800d19b
 800b9b4:	0800d0f8 	.word	0x0800d0f8
 800b9b8:	0800d11c 	.word	0x0800d11c

0800b9bc <__sflush_r>:
 800b9bc:	898a      	ldrh	r2, [r1, #12]
 800b9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	0710      	lsls	r0, r2, #28
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	d458      	bmi.n	800ba7c <__sflush_r+0xc0>
 800b9ca:	684b      	ldr	r3, [r1, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	dc05      	bgt.n	800b9dc <__sflush_r+0x20>
 800b9d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dc02      	bgt.n	800b9dc <__sflush_r+0x20>
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	d0f9      	beq.n	800b9d6 <__sflush_r+0x1a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9e8:	682f      	ldr	r7, [r5, #0]
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	d032      	beq.n	800ba54 <__sflush_r+0x98>
 800b9ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	075a      	lsls	r2, r3, #29
 800b9f4:	d505      	bpl.n	800ba02 <__sflush_r+0x46>
 800b9f6:	6863      	ldr	r3, [r4, #4]
 800b9f8:	1ac0      	subs	r0, r0, r3
 800b9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9fc:	b10b      	cbz	r3, 800ba02 <__sflush_r+0x46>
 800b9fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba00:	1ac0      	subs	r0, r0, r3
 800ba02:	2300      	movs	r3, #0
 800ba04:	4602      	mov	r2, r0
 800ba06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba08:	6a21      	ldr	r1, [r4, #32]
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	47b0      	blx	r6
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	d106      	bne.n	800ba22 <__sflush_r+0x66>
 800ba14:	6829      	ldr	r1, [r5, #0]
 800ba16:	291d      	cmp	r1, #29
 800ba18:	d82c      	bhi.n	800ba74 <__sflush_r+0xb8>
 800ba1a:	4a2a      	ldr	r2, [pc, #168]	; (800bac4 <__sflush_r+0x108>)
 800ba1c:	40ca      	lsrs	r2, r1
 800ba1e:	07d6      	lsls	r6, r2, #31
 800ba20:	d528      	bpl.n	800ba74 <__sflush_r+0xb8>
 800ba22:	2200      	movs	r2, #0
 800ba24:	6062      	str	r2, [r4, #4]
 800ba26:	04d9      	lsls	r1, r3, #19
 800ba28:	6922      	ldr	r2, [r4, #16]
 800ba2a:	6022      	str	r2, [r4, #0]
 800ba2c:	d504      	bpl.n	800ba38 <__sflush_r+0x7c>
 800ba2e:	1c42      	adds	r2, r0, #1
 800ba30:	d101      	bne.n	800ba36 <__sflush_r+0x7a>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	b903      	cbnz	r3, 800ba38 <__sflush_r+0x7c>
 800ba36:	6560      	str	r0, [r4, #84]	; 0x54
 800ba38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba3a:	602f      	str	r7, [r5, #0]
 800ba3c:	2900      	cmp	r1, #0
 800ba3e:	d0ca      	beq.n	800b9d6 <__sflush_r+0x1a>
 800ba40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba44:	4299      	cmp	r1, r3
 800ba46:	d002      	beq.n	800ba4e <__sflush_r+0x92>
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f000 fd8b 	bl	800c564 <_free_r>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	6360      	str	r0, [r4, #52]	; 0x34
 800ba52:	e7c1      	b.n	800b9d8 <__sflush_r+0x1c>
 800ba54:	6a21      	ldr	r1, [r4, #32]
 800ba56:	2301      	movs	r3, #1
 800ba58:	4628      	mov	r0, r5
 800ba5a:	47b0      	blx	r6
 800ba5c:	1c41      	adds	r1, r0, #1
 800ba5e:	d1c7      	bne.n	800b9f0 <__sflush_r+0x34>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0c4      	beq.n	800b9f0 <__sflush_r+0x34>
 800ba66:	2b1d      	cmp	r3, #29
 800ba68:	d001      	beq.n	800ba6e <__sflush_r+0xb2>
 800ba6a:	2b16      	cmp	r3, #22
 800ba6c:	d101      	bne.n	800ba72 <__sflush_r+0xb6>
 800ba6e:	602f      	str	r7, [r5, #0]
 800ba70:	e7b1      	b.n	800b9d6 <__sflush_r+0x1a>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	e7ad      	b.n	800b9d8 <__sflush_r+0x1c>
 800ba7c:	690f      	ldr	r7, [r1, #16]
 800ba7e:	2f00      	cmp	r7, #0
 800ba80:	d0a9      	beq.n	800b9d6 <__sflush_r+0x1a>
 800ba82:	0793      	lsls	r3, r2, #30
 800ba84:	680e      	ldr	r6, [r1, #0]
 800ba86:	bf08      	it	eq
 800ba88:	694b      	ldreq	r3, [r1, #20]
 800ba8a:	600f      	str	r7, [r1, #0]
 800ba8c:	bf18      	it	ne
 800ba8e:	2300      	movne	r3, #0
 800ba90:	eba6 0807 	sub.w	r8, r6, r7
 800ba94:	608b      	str	r3, [r1, #8]
 800ba96:	f1b8 0f00 	cmp.w	r8, #0
 800ba9a:	dd9c      	ble.n	800b9d6 <__sflush_r+0x1a>
 800ba9c:	6a21      	ldr	r1, [r4, #32]
 800ba9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baa0:	4643      	mov	r3, r8
 800baa2:	463a      	mov	r2, r7
 800baa4:	4628      	mov	r0, r5
 800baa6:	47b0      	blx	r6
 800baa8:	2800      	cmp	r0, #0
 800baaa:	dc06      	bgt.n	800baba <__sflush_r+0xfe>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab2:	81a3      	strh	r3, [r4, #12]
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	e78e      	b.n	800b9d8 <__sflush_r+0x1c>
 800baba:	4407      	add	r7, r0
 800babc:	eba8 0800 	sub.w	r8, r8, r0
 800bac0:	e7e9      	b.n	800ba96 <__sflush_r+0xda>
 800bac2:	bf00      	nop
 800bac4:	20400001 	.word	0x20400001

0800bac8 <_fflush_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	690b      	ldr	r3, [r1, #16]
 800bacc:	4605      	mov	r5, r0
 800bace:	460c      	mov	r4, r1
 800bad0:	b913      	cbnz	r3, 800bad8 <_fflush_r+0x10>
 800bad2:	2500      	movs	r5, #0
 800bad4:	4628      	mov	r0, r5
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	b118      	cbz	r0, 800bae2 <_fflush_r+0x1a>
 800bada:	6983      	ldr	r3, [r0, #24]
 800badc:	b90b      	cbnz	r3, 800bae2 <_fflush_r+0x1a>
 800bade:	f000 f887 	bl	800bbf0 <__sinit>
 800bae2:	4b14      	ldr	r3, [pc, #80]	; (800bb34 <_fflush_r+0x6c>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d11b      	bne.n	800bb20 <_fflush_r+0x58>
 800bae8:	686c      	ldr	r4, [r5, #4]
 800baea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0ef      	beq.n	800bad2 <_fflush_r+0xa>
 800baf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baf4:	07d0      	lsls	r0, r2, #31
 800baf6:	d404      	bmi.n	800bb02 <_fflush_r+0x3a>
 800baf8:	0599      	lsls	r1, r3, #22
 800bafa:	d402      	bmi.n	800bb02 <_fflush_r+0x3a>
 800bafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bafe:	f000 f91a 	bl	800bd36 <__retarget_lock_acquire_recursive>
 800bb02:	4628      	mov	r0, r5
 800bb04:	4621      	mov	r1, r4
 800bb06:	f7ff ff59 	bl	800b9bc <__sflush_r>
 800bb0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb0c:	07da      	lsls	r2, r3, #31
 800bb0e:	4605      	mov	r5, r0
 800bb10:	d4e0      	bmi.n	800bad4 <_fflush_r+0xc>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	059b      	lsls	r3, r3, #22
 800bb16:	d4dd      	bmi.n	800bad4 <_fflush_r+0xc>
 800bb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1a:	f000 f90d 	bl	800bd38 <__retarget_lock_release_recursive>
 800bb1e:	e7d9      	b.n	800bad4 <_fflush_r+0xc>
 800bb20:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <_fflush_r+0x70>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	d101      	bne.n	800bb2a <_fflush_r+0x62>
 800bb26:	68ac      	ldr	r4, [r5, #8]
 800bb28:	e7df      	b.n	800baea <_fflush_r+0x22>
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <_fflush_r+0x74>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	bf08      	it	eq
 800bb30:	68ec      	ldreq	r4, [r5, #12]
 800bb32:	e7da      	b.n	800baea <_fflush_r+0x22>
 800bb34:	0800d1cc 	.word	0x0800d1cc
 800bb38:	0800d1ec 	.word	0x0800d1ec
 800bb3c:	0800d1ac 	.word	0x0800d1ac

0800bb40 <std>:
 800bb40:	2300      	movs	r3, #0
 800bb42:	b510      	push	{r4, lr}
 800bb44:	4604      	mov	r4, r0
 800bb46:	e9c0 3300 	strd	r3, r3, [r0]
 800bb4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb4e:	6083      	str	r3, [r0, #8]
 800bb50:	8181      	strh	r1, [r0, #12]
 800bb52:	6643      	str	r3, [r0, #100]	; 0x64
 800bb54:	81c2      	strh	r2, [r0, #14]
 800bb56:	6183      	str	r3, [r0, #24]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	2208      	movs	r2, #8
 800bb5c:	305c      	adds	r0, #92	; 0x5c
 800bb5e:	f7fe fad1 	bl	800a104 <memset>
 800bb62:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <std+0x38>)
 800bb64:	6263      	str	r3, [r4, #36]	; 0x24
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <std+0x3c>)
 800bb68:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <std+0x40>)
 800bb6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <std+0x44>)
 800bb70:	6224      	str	r4, [r4, #32]
 800bb72:	6323      	str	r3, [r4, #48]	; 0x30
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	0800ccb1 	.word	0x0800ccb1
 800bb7c:	0800ccd3 	.word	0x0800ccd3
 800bb80:	0800cd0b 	.word	0x0800cd0b
 800bb84:	0800cd2f 	.word	0x0800cd2f

0800bb88 <_cleanup_r>:
 800bb88:	4901      	ldr	r1, [pc, #4]	; (800bb90 <_cleanup_r+0x8>)
 800bb8a:	f000 b8af 	b.w	800bcec <_fwalk_reent>
 800bb8e:	bf00      	nop
 800bb90:	0800bac9 	.word	0x0800bac9

0800bb94 <__sfmoreglue>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	2268      	movs	r2, #104	; 0x68
 800bb98:	1e4d      	subs	r5, r1, #1
 800bb9a:	4355      	muls	r5, r2
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bba2:	f000 fd4b 	bl	800c63c <_malloc_r>
 800bba6:	4604      	mov	r4, r0
 800bba8:	b140      	cbz	r0, 800bbbc <__sfmoreglue+0x28>
 800bbaa:	2100      	movs	r1, #0
 800bbac:	e9c0 1600 	strd	r1, r6, [r0]
 800bbb0:	300c      	adds	r0, #12
 800bbb2:	60a0      	str	r0, [r4, #8]
 800bbb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbb8:	f7fe faa4 	bl	800a104 <memset>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}

0800bbc0 <__sfp_lock_acquire>:
 800bbc0:	4801      	ldr	r0, [pc, #4]	; (800bbc8 <__sfp_lock_acquire+0x8>)
 800bbc2:	f000 b8b8 	b.w	800bd36 <__retarget_lock_acquire_recursive>
 800bbc6:	bf00      	nop
 800bbc8:	20002209 	.word	0x20002209

0800bbcc <__sfp_lock_release>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	; (800bbd4 <__sfp_lock_release+0x8>)
 800bbce:	f000 b8b3 	b.w	800bd38 <__retarget_lock_release_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	20002209 	.word	0x20002209

0800bbd8 <__sinit_lock_acquire>:
 800bbd8:	4801      	ldr	r0, [pc, #4]	; (800bbe0 <__sinit_lock_acquire+0x8>)
 800bbda:	f000 b8ac 	b.w	800bd36 <__retarget_lock_acquire_recursive>
 800bbde:	bf00      	nop
 800bbe0:	2000220a 	.word	0x2000220a

0800bbe4 <__sinit_lock_release>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	; (800bbec <__sinit_lock_release+0x8>)
 800bbe6:	f000 b8a7 	b.w	800bd38 <__retarget_lock_release_recursive>
 800bbea:	bf00      	nop
 800bbec:	2000220a 	.word	0x2000220a

0800bbf0 <__sinit>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	f7ff fff0 	bl	800bbd8 <__sinit_lock_acquire>
 800bbf8:	69a3      	ldr	r3, [r4, #24]
 800bbfa:	b11b      	cbz	r3, 800bc04 <__sinit+0x14>
 800bbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc00:	f7ff bff0 	b.w	800bbe4 <__sinit_lock_release>
 800bc04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc08:	6523      	str	r3, [r4, #80]	; 0x50
 800bc0a:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <__sinit+0x68>)
 800bc0c:	4a13      	ldr	r2, [pc, #76]	; (800bc5c <__sinit+0x6c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	bf04      	itt	eq
 800bc16:	2301      	moveq	r3, #1
 800bc18:	61a3      	streq	r3, [r4, #24]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 f820 	bl	800bc60 <__sfp>
 800bc20:	6060      	str	r0, [r4, #4]
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 f81c 	bl	800bc60 <__sfp>
 800bc28:	60a0      	str	r0, [r4, #8]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 f818 	bl	800bc60 <__sfp>
 800bc30:	2200      	movs	r2, #0
 800bc32:	60e0      	str	r0, [r4, #12]
 800bc34:	2104      	movs	r1, #4
 800bc36:	6860      	ldr	r0, [r4, #4]
 800bc38:	f7ff ff82 	bl	800bb40 <std>
 800bc3c:	68a0      	ldr	r0, [r4, #8]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	2109      	movs	r1, #9
 800bc42:	f7ff ff7d 	bl	800bb40 <std>
 800bc46:	68e0      	ldr	r0, [r4, #12]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	2112      	movs	r1, #18
 800bc4c:	f7ff ff78 	bl	800bb40 <std>
 800bc50:	2301      	movs	r3, #1
 800bc52:	61a3      	str	r3, [r4, #24]
 800bc54:	e7d2      	b.n	800bbfc <__sinit+0xc>
 800bc56:	bf00      	nop
 800bc58:	0800d0e4 	.word	0x0800d0e4
 800bc5c:	0800bb89 	.word	0x0800bb89

0800bc60 <__sfp>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	4607      	mov	r7, r0
 800bc64:	f7ff ffac 	bl	800bbc0 <__sfp_lock_acquire>
 800bc68:	4b1e      	ldr	r3, [pc, #120]	; (800bce4 <__sfp+0x84>)
 800bc6a:	681e      	ldr	r6, [r3, #0]
 800bc6c:	69b3      	ldr	r3, [r6, #24]
 800bc6e:	b913      	cbnz	r3, 800bc76 <__sfp+0x16>
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7ff ffbd 	bl	800bbf0 <__sinit>
 800bc76:	3648      	adds	r6, #72	; 0x48
 800bc78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	d503      	bpl.n	800bc88 <__sfp+0x28>
 800bc80:	6833      	ldr	r3, [r6, #0]
 800bc82:	b30b      	cbz	r3, 800bcc8 <__sfp+0x68>
 800bc84:	6836      	ldr	r6, [r6, #0]
 800bc86:	e7f7      	b.n	800bc78 <__sfp+0x18>
 800bc88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc8c:	b9d5      	cbnz	r5, 800bcc4 <__sfp+0x64>
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <__sfp+0x88>)
 800bc90:	60e3      	str	r3, [r4, #12]
 800bc92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc96:	6665      	str	r5, [r4, #100]	; 0x64
 800bc98:	f000 f84c 	bl	800bd34 <__retarget_lock_init_recursive>
 800bc9c:	f7ff ff96 	bl	800bbcc <__sfp_lock_release>
 800bca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bca8:	6025      	str	r5, [r4, #0]
 800bcaa:	61a5      	str	r5, [r4, #24]
 800bcac:	2208      	movs	r2, #8
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcb4:	f7fe fa26 	bl	800a104 <memset>
 800bcb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc4:	3468      	adds	r4, #104	; 0x68
 800bcc6:	e7d9      	b.n	800bc7c <__sfp+0x1c>
 800bcc8:	2104      	movs	r1, #4
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7ff ff62 	bl	800bb94 <__sfmoreglue>
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	6030      	str	r0, [r6, #0]
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1d5      	bne.n	800bc84 <__sfp+0x24>
 800bcd8:	f7ff ff78 	bl	800bbcc <__sfp_lock_release>
 800bcdc:	230c      	movs	r3, #12
 800bcde:	603b      	str	r3, [r7, #0]
 800bce0:	e7ee      	b.n	800bcc0 <__sfp+0x60>
 800bce2:	bf00      	nop
 800bce4:	0800d0e4 	.word	0x0800d0e4
 800bce8:	ffff0001 	.word	0xffff0001

0800bcec <_fwalk_reent>:
 800bcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	4688      	mov	r8, r1
 800bcf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcf8:	2700      	movs	r7, #0
 800bcfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcfe:	f1b9 0901 	subs.w	r9, r9, #1
 800bd02:	d505      	bpl.n	800bd10 <_fwalk_reent+0x24>
 800bd04:	6824      	ldr	r4, [r4, #0]
 800bd06:	2c00      	cmp	r4, #0
 800bd08:	d1f7      	bne.n	800bcfa <_fwalk_reent+0xe>
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd10:	89ab      	ldrh	r3, [r5, #12]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d907      	bls.n	800bd26 <_fwalk_reent+0x3a>
 800bd16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	d003      	beq.n	800bd26 <_fwalk_reent+0x3a>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4630      	mov	r0, r6
 800bd22:	47c0      	blx	r8
 800bd24:	4307      	orrs	r7, r0
 800bd26:	3568      	adds	r5, #104	; 0x68
 800bd28:	e7e9      	b.n	800bcfe <_fwalk_reent+0x12>
	...

0800bd2c <_localeconv_r>:
 800bd2c:	4800      	ldr	r0, [pc, #0]	; (800bd30 <_localeconv_r+0x4>)
 800bd2e:	4770      	bx	lr
 800bd30:	20000250 	.word	0x20000250

0800bd34 <__retarget_lock_init_recursive>:
 800bd34:	4770      	bx	lr

0800bd36 <__retarget_lock_acquire_recursive>:
 800bd36:	4770      	bx	lr

0800bd38 <__retarget_lock_release_recursive>:
 800bd38:	4770      	bx	lr

0800bd3a <__swhatbuf_r>:
 800bd3a:	b570      	push	{r4, r5, r6, lr}
 800bd3c:	460e      	mov	r6, r1
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	2900      	cmp	r1, #0
 800bd44:	b096      	sub	sp, #88	; 0x58
 800bd46:	4614      	mov	r4, r2
 800bd48:	461d      	mov	r5, r3
 800bd4a:	da08      	bge.n	800bd5e <__swhatbuf_r+0x24>
 800bd4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	602a      	str	r2, [r5, #0]
 800bd54:	061a      	lsls	r2, r3, #24
 800bd56:	d410      	bmi.n	800bd7a <__swhatbuf_r+0x40>
 800bd58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd5c:	e00e      	b.n	800bd7c <__swhatbuf_r+0x42>
 800bd5e:	466a      	mov	r2, sp
 800bd60:	f001 f83c 	bl	800cddc <_fstat_r>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	dbf1      	blt.n	800bd4c <__swhatbuf_r+0x12>
 800bd68:	9a01      	ldr	r2, [sp, #4]
 800bd6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd72:	425a      	negs	r2, r3
 800bd74:	415a      	adcs	r2, r3
 800bd76:	602a      	str	r2, [r5, #0]
 800bd78:	e7ee      	b.n	800bd58 <__swhatbuf_r+0x1e>
 800bd7a:	2340      	movs	r3, #64	; 0x40
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	b016      	add	sp, #88	; 0x58
 800bd82:	bd70      	pop	{r4, r5, r6, pc}

0800bd84 <__smakebuf_r>:
 800bd84:	898b      	ldrh	r3, [r1, #12]
 800bd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd88:	079d      	lsls	r5, r3, #30
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	d507      	bpl.n	800bda0 <__smakebuf_r+0x1c>
 800bd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	6123      	str	r3, [r4, #16]
 800bd98:	2301      	movs	r3, #1
 800bd9a:	6163      	str	r3, [r4, #20]
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	ab01      	add	r3, sp, #4
 800bda2:	466a      	mov	r2, sp
 800bda4:	f7ff ffc9 	bl	800bd3a <__swhatbuf_r>
 800bda8:	9900      	ldr	r1, [sp, #0]
 800bdaa:	4605      	mov	r5, r0
 800bdac:	4630      	mov	r0, r6
 800bdae:	f000 fc45 	bl	800c63c <_malloc_r>
 800bdb2:	b948      	cbnz	r0, 800bdc8 <__smakebuf_r+0x44>
 800bdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb8:	059a      	lsls	r2, r3, #22
 800bdba:	d4ef      	bmi.n	800bd9c <__smakebuf_r+0x18>
 800bdbc:	f023 0303 	bic.w	r3, r3, #3
 800bdc0:	f043 0302 	orr.w	r3, r3, #2
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e7e3      	b.n	800bd90 <__smakebuf_r+0xc>
 800bdc8:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <__smakebuf_r+0x7c>)
 800bdca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	6020      	str	r0, [r4, #0]
 800bdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	9b00      	ldr	r3, [sp, #0]
 800bdd8:	6163      	str	r3, [r4, #20]
 800bdda:	9b01      	ldr	r3, [sp, #4]
 800bddc:	6120      	str	r0, [r4, #16]
 800bdde:	b15b      	cbz	r3, 800bdf8 <__smakebuf_r+0x74>
 800bde0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bde4:	4630      	mov	r0, r6
 800bde6:	f001 f80b 	bl	800ce00 <_isatty_r>
 800bdea:	b128      	cbz	r0, 800bdf8 <__smakebuf_r+0x74>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	f023 0303 	bic.w	r3, r3, #3
 800bdf2:	f043 0301 	orr.w	r3, r3, #1
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	89a0      	ldrh	r0, [r4, #12]
 800bdfa:	4305      	orrs	r5, r0
 800bdfc:	81a5      	strh	r5, [r4, #12]
 800bdfe:	e7cd      	b.n	800bd9c <__smakebuf_r+0x18>
 800be00:	0800bb89 	.word	0x0800bb89

0800be04 <malloc>:
 800be04:	4b02      	ldr	r3, [pc, #8]	; (800be10 <malloc+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f000 bc17 	b.w	800c63c <_malloc_r>
 800be0e:	bf00      	nop
 800be10:	200000fc 	.word	0x200000fc

0800be14 <memcpy>:
 800be14:	440a      	add	r2, r1
 800be16:	4291      	cmp	r1, r2
 800be18:	f100 33ff 	add.w	r3, r0, #4294967295
 800be1c:	d100      	bne.n	800be20 <memcpy+0xc>
 800be1e:	4770      	bx	lr
 800be20:	b510      	push	{r4, lr}
 800be22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be2a:	4291      	cmp	r1, r2
 800be2c:	d1f9      	bne.n	800be22 <memcpy+0xe>
 800be2e:	bd10      	pop	{r4, pc}

0800be30 <_Balloc>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be34:	4604      	mov	r4, r0
 800be36:	460d      	mov	r5, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Balloc+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7ff ffe2 	bl	800be04 <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	6260      	str	r0, [r4, #36]	; 0x24
 800be44:	b920      	cbnz	r0, 800be50 <_Balloc+0x20>
 800be46:	4b18      	ldr	r3, [pc, #96]	; (800bea8 <_Balloc+0x78>)
 800be48:	4818      	ldr	r0, [pc, #96]	; (800beac <_Balloc+0x7c>)
 800be4a:	2166      	movs	r1, #102	; 0x66
 800be4c:	f000 ff86 	bl	800cd5c <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be5a:	68f3      	ldr	r3, [r6, #12]
 800be5c:	b183      	cbz	r3, 800be80 <_Balloc+0x50>
 800be5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be66:	b9b8      	cbnz	r0, 800be98 <_Balloc+0x68>
 800be68:	2101      	movs	r1, #1
 800be6a:	fa01 f605 	lsl.w	r6, r1, r5
 800be6e:	1d72      	adds	r2, r6, #5
 800be70:	0092      	lsls	r2, r2, #2
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fb60 	bl	800c538 <_calloc_r>
 800be78:	b160      	cbz	r0, 800be94 <_Balloc+0x64>
 800be7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be7e:	e00e      	b.n	800be9e <_Balloc+0x6e>
 800be80:	2221      	movs	r2, #33	; 0x21
 800be82:	2104      	movs	r1, #4
 800be84:	4620      	mov	r0, r4
 800be86:	f000 fb57 	bl	800c538 <_calloc_r>
 800be8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be8c:	60f0      	str	r0, [r6, #12]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <_Balloc+0x2e>
 800be94:	2000      	movs	r0, #0
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	6802      	ldr	r2, [r0, #0]
 800be9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be9e:	2300      	movs	r3, #0
 800bea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bea4:	e7f7      	b.n	800be96 <_Balloc+0x66>
 800bea6:	bf00      	nop
 800bea8:	0800d129 	.word	0x0800d129
 800beac:	0800d20c 	.word	0x0800d20c

0800beb0 <_Bfree>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b976      	cbnz	r6, 800bed8 <_Bfree+0x28>
 800beba:	2010      	movs	r0, #16
 800bebc:	f7ff ffa2 	bl	800be04 <malloc>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6268      	str	r0, [r5, #36]	; 0x24
 800bec4:	b920      	cbnz	r0, 800bed0 <_Bfree+0x20>
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <_Bfree+0x3c>)
 800bec8:	4809      	ldr	r0, [pc, #36]	; (800bef0 <_Bfree+0x40>)
 800beca:	218a      	movs	r1, #138	; 0x8a
 800becc:	f000 ff46 	bl	800cd5c <__assert_func>
 800bed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bed4:	6006      	str	r6, [r0, #0]
 800bed6:	60c6      	str	r6, [r0, #12]
 800bed8:	b13c      	cbz	r4, 800beea <_Bfree+0x3a>
 800beda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bedc:	6862      	ldr	r2, [r4, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bee4:	6021      	str	r1, [r4, #0]
 800bee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	0800d129 	.word	0x0800d129
 800bef0:	0800d20c 	.word	0x0800d20c

0800bef4 <__multadd>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	690d      	ldr	r5, [r1, #16]
 800befa:	4607      	mov	r7, r0
 800befc:	460c      	mov	r4, r1
 800befe:	461e      	mov	r6, r3
 800bf00:	f101 0c14 	add.w	ip, r1, #20
 800bf04:	2000      	movs	r0, #0
 800bf06:	f8dc 3000 	ldr.w	r3, [ip]
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf10:	0c1e      	lsrs	r6, r3, #16
 800bf12:	0c0b      	lsrs	r3, r1, #16
 800bf14:	fb02 3306 	mla	r3, r2, r6, r3
 800bf18:	b289      	uxth	r1, r1
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf20:	4285      	cmp	r5, r0
 800bf22:	f84c 1b04 	str.w	r1, [ip], #4
 800bf26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf2a:	dcec      	bgt.n	800bf06 <__multadd+0x12>
 800bf2c:	b30e      	cbz	r6, 800bf72 <__multadd+0x7e>
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dc19      	bgt.n	800bf68 <__multadd+0x74>
 800bf34:	6861      	ldr	r1, [r4, #4]
 800bf36:	4638      	mov	r0, r7
 800bf38:	3101      	adds	r1, #1
 800bf3a:	f7ff ff79 	bl	800be30 <_Balloc>
 800bf3e:	4680      	mov	r8, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <__multadd+0x5a>
 800bf42:	4602      	mov	r2, r0
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <__multadd+0x84>)
 800bf46:	480d      	ldr	r0, [pc, #52]	; (800bf7c <__multadd+0x88>)
 800bf48:	21b5      	movs	r1, #181	; 0xb5
 800bf4a:	f000 ff07 	bl	800cd5c <__assert_func>
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	3202      	adds	r2, #2
 800bf52:	f104 010c 	add.w	r1, r4, #12
 800bf56:	0092      	lsls	r2, r2, #2
 800bf58:	300c      	adds	r0, #12
 800bf5a:	f7ff ff5b 	bl	800be14 <memcpy>
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ffa5 	bl	800beb0 <_Bfree>
 800bf66:	4644      	mov	r4, r8
 800bf68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	615e      	str	r6, [r3, #20]
 800bf70:	6125      	str	r5, [r4, #16]
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf78:	0800d19b 	.word	0x0800d19b
 800bf7c:	0800d20c 	.word	0x0800d20c

0800bf80 <__hi0bits>:
 800bf80:	0c03      	lsrs	r3, r0, #16
 800bf82:	041b      	lsls	r3, r3, #16
 800bf84:	b9d3      	cbnz	r3, 800bfbc <__hi0bits+0x3c>
 800bf86:	0400      	lsls	r0, r0, #16
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf8e:	bf04      	itt	eq
 800bf90:	0200      	lsleq	r0, r0, #8
 800bf92:	3308      	addeq	r3, #8
 800bf94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf98:	bf04      	itt	eq
 800bf9a:	0100      	lsleq	r0, r0, #4
 800bf9c:	3304      	addeq	r3, #4
 800bf9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfa2:	bf04      	itt	eq
 800bfa4:	0080      	lsleq	r0, r0, #2
 800bfa6:	3302      	addeq	r3, #2
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	db05      	blt.n	800bfb8 <__hi0bits+0x38>
 800bfac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfb0:	f103 0301 	add.w	r3, r3, #1
 800bfb4:	bf08      	it	eq
 800bfb6:	2320      	moveq	r3, #32
 800bfb8:	4618      	mov	r0, r3
 800bfba:	4770      	bx	lr
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e7e4      	b.n	800bf8a <__hi0bits+0xa>

0800bfc0 <__lo0bits>:
 800bfc0:	6803      	ldr	r3, [r0, #0]
 800bfc2:	f013 0207 	ands.w	r2, r3, #7
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	d00b      	beq.n	800bfe2 <__lo0bits+0x22>
 800bfca:	07da      	lsls	r2, r3, #31
 800bfcc:	d423      	bmi.n	800c016 <__lo0bits+0x56>
 800bfce:	0798      	lsls	r0, r3, #30
 800bfd0:	bf49      	itett	mi
 800bfd2:	085b      	lsrmi	r3, r3, #1
 800bfd4:	089b      	lsrpl	r3, r3, #2
 800bfd6:	2001      	movmi	r0, #1
 800bfd8:	600b      	strmi	r3, [r1, #0]
 800bfda:	bf5c      	itt	pl
 800bfdc:	600b      	strpl	r3, [r1, #0]
 800bfde:	2002      	movpl	r0, #2
 800bfe0:	4770      	bx	lr
 800bfe2:	b298      	uxth	r0, r3
 800bfe4:	b9a8      	cbnz	r0, 800c012 <__lo0bits+0x52>
 800bfe6:	0c1b      	lsrs	r3, r3, #16
 800bfe8:	2010      	movs	r0, #16
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	b90a      	cbnz	r2, 800bff2 <__lo0bits+0x32>
 800bfee:	3008      	adds	r0, #8
 800bff0:	0a1b      	lsrs	r3, r3, #8
 800bff2:	071a      	lsls	r2, r3, #28
 800bff4:	bf04      	itt	eq
 800bff6:	091b      	lsreq	r3, r3, #4
 800bff8:	3004      	addeq	r0, #4
 800bffa:	079a      	lsls	r2, r3, #30
 800bffc:	bf04      	itt	eq
 800bffe:	089b      	lsreq	r3, r3, #2
 800c000:	3002      	addeq	r0, #2
 800c002:	07da      	lsls	r2, r3, #31
 800c004:	d403      	bmi.n	800c00e <__lo0bits+0x4e>
 800c006:	085b      	lsrs	r3, r3, #1
 800c008:	f100 0001 	add.w	r0, r0, #1
 800c00c:	d005      	beq.n	800c01a <__lo0bits+0x5a>
 800c00e:	600b      	str	r3, [r1, #0]
 800c010:	4770      	bx	lr
 800c012:	4610      	mov	r0, r2
 800c014:	e7e9      	b.n	800bfea <__lo0bits+0x2a>
 800c016:	2000      	movs	r0, #0
 800c018:	4770      	bx	lr
 800c01a:	2020      	movs	r0, #32
 800c01c:	4770      	bx	lr
	...

0800c020 <__i2b>:
 800c020:	b510      	push	{r4, lr}
 800c022:	460c      	mov	r4, r1
 800c024:	2101      	movs	r1, #1
 800c026:	f7ff ff03 	bl	800be30 <_Balloc>
 800c02a:	4602      	mov	r2, r0
 800c02c:	b928      	cbnz	r0, 800c03a <__i2b+0x1a>
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <__i2b+0x24>)
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <__i2b+0x28>)
 800c032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c036:	f000 fe91 	bl	800cd5c <__assert_func>
 800c03a:	2301      	movs	r3, #1
 800c03c:	6144      	str	r4, [r0, #20]
 800c03e:	6103      	str	r3, [r0, #16]
 800c040:	bd10      	pop	{r4, pc}
 800c042:	bf00      	nop
 800c044:	0800d19b 	.word	0x0800d19b
 800c048:	0800d20c 	.word	0x0800d20c

0800c04c <__multiply>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	4691      	mov	r9, r2
 800c052:	690a      	ldr	r2, [r1, #16]
 800c054:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c058:	429a      	cmp	r2, r3
 800c05a:	bfb8      	it	lt
 800c05c:	460b      	movlt	r3, r1
 800c05e:	460c      	mov	r4, r1
 800c060:	bfbc      	itt	lt
 800c062:	464c      	movlt	r4, r9
 800c064:	4699      	movlt	r9, r3
 800c066:	6927      	ldr	r7, [r4, #16]
 800c068:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c06c:	68a3      	ldr	r3, [r4, #8]
 800c06e:	6861      	ldr	r1, [r4, #4]
 800c070:	eb07 060a 	add.w	r6, r7, sl
 800c074:	42b3      	cmp	r3, r6
 800c076:	b085      	sub	sp, #20
 800c078:	bfb8      	it	lt
 800c07a:	3101      	addlt	r1, #1
 800c07c:	f7ff fed8 	bl	800be30 <_Balloc>
 800c080:	b930      	cbnz	r0, 800c090 <__multiply+0x44>
 800c082:	4602      	mov	r2, r0
 800c084:	4b44      	ldr	r3, [pc, #272]	; (800c198 <__multiply+0x14c>)
 800c086:	4845      	ldr	r0, [pc, #276]	; (800c19c <__multiply+0x150>)
 800c088:	f240 115d 	movw	r1, #349	; 0x15d
 800c08c:	f000 fe66 	bl	800cd5c <__assert_func>
 800c090:	f100 0514 	add.w	r5, r0, #20
 800c094:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c098:	462b      	mov	r3, r5
 800c09a:	2200      	movs	r2, #0
 800c09c:	4543      	cmp	r3, r8
 800c09e:	d321      	bcc.n	800c0e4 <__multiply+0x98>
 800c0a0:	f104 0314 	add.w	r3, r4, #20
 800c0a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0a8:	f109 0314 	add.w	r3, r9, #20
 800c0ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	1b3a      	subs	r2, r7, r4
 800c0b4:	3a15      	subs	r2, #21
 800c0b6:	f022 0203 	bic.w	r2, r2, #3
 800c0ba:	3204      	adds	r2, #4
 800c0bc:	f104 0115 	add.w	r1, r4, #21
 800c0c0:	428f      	cmp	r7, r1
 800c0c2:	bf38      	it	cc
 800c0c4:	2204      	movcc	r2, #4
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	9a02      	ldr	r2, [sp, #8]
 800c0ca:	9303      	str	r3, [sp, #12]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d80c      	bhi.n	800c0ea <__multiply+0x9e>
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	dd03      	ble.n	800c0dc <__multiply+0x90>
 800c0d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d05a      	beq.n	800c192 <__multiply+0x146>
 800c0dc:	6106      	str	r6, [r0, #16]
 800c0de:	b005      	add	sp, #20
 800c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e4:	f843 2b04 	str.w	r2, [r3], #4
 800c0e8:	e7d8      	b.n	800c09c <__multiply+0x50>
 800c0ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0ee:	f1ba 0f00 	cmp.w	sl, #0
 800c0f2:	d024      	beq.n	800c13e <__multiply+0xf2>
 800c0f4:	f104 0e14 	add.w	lr, r4, #20
 800c0f8:	46a9      	mov	r9, r5
 800c0fa:	f04f 0c00 	mov.w	ip, #0
 800c0fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c102:	f8d9 1000 	ldr.w	r1, [r9]
 800c106:	fa1f fb82 	uxth.w	fp, r2
 800c10a:	b289      	uxth	r1, r1
 800c10c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c110:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c114:	f8d9 2000 	ldr.w	r2, [r9]
 800c118:	4461      	add	r1, ip
 800c11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c11e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c122:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c126:	b289      	uxth	r1, r1
 800c128:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c12c:	4577      	cmp	r7, lr
 800c12e:	f849 1b04 	str.w	r1, [r9], #4
 800c132:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c136:	d8e2      	bhi.n	800c0fe <__multiply+0xb2>
 800c138:	9a01      	ldr	r2, [sp, #4]
 800c13a:	f845 c002 	str.w	ip, [r5, r2]
 800c13e:	9a03      	ldr	r2, [sp, #12]
 800c140:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c144:	3304      	adds	r3, #4
 800c146:	f1b9 0f00 	cmp.w	r9, #0
 800c14a:	d020      	beq.n	800c18e <__multiply+0x142>
 800c14c:	6829      	ldr	r1, [r5, #0]
 800c14e:	f104 0c14 	add.w	ip, r4, #20
 800c152:	46ae      	mov	lr, r5
 800c154:	f04f 0a00 	mov.w	sl, #0
 800c158:	f8bc b000 	ldrh.w	fp, [ip]
 800c15c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c160:	fb09 220b 	mla	r2, r9, fp, r2
 800c164:	4492      	add	sl, r2
 800c166:	b289      	uxth	r1, r1
 800c168:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c16c:	f84e 1b04 	str.w	r1, [lr], #4
 800c170:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c174:	f8be 1000 	ldrh.w	r1, [lr]
 800c178:	0c12      	lsrs	r2, r2, #16
 800c17a:	fb09 1102 	mla	r1, r9, r2, r1
 800c17e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c182:	4567      	cmp	r7, ip
 800c184:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c188:	d8e6      	bhi.n	800c158 <__multiply+0x10c>
 800c18a:	9a01      	ldr	r2, [sp, #4]
 800c18c:	50a9      	str	r1, [r5, r2]
 800c18e:	3504      	adds	r5, #4
 800c190:	e79a      	b.n	800c0c8 <__multiply+0x7c>
 800c192:	3e01      	subs	r6, #1
 800c194:	e79c      	b.n	800c0d0 <__multiply+0x84>
 800c196:	bf00      	nop
 800c198:	0800d19b 	.word	0x0800d19b
 800c19c:	0800d20c 	.word	0x0800d20c

0800c1a0 <__pow5mult>:
 800c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	4615      	mov	r5, r2
 800c1a6:	f012 0203 	ands.w	r2, r2, #3
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	d007      	beq.n	800c1c0 <__pow5mult+0x20>
 800c1b0:	4c25      	ldr	r4, [pc, #148]	; (800c248 <__pow5mult+0xa8>)
 800c1b2:	3a01      	subs	r2, #1
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1ba:	f7ff fe9b 	bl	800bef4 <__multadd>
 800c1be:	4607      	mov	r7, r0
 800c1c0:	10ad      	asrs	r5, r5, #2
 800c1c2:	d03d      	beq.n	800c240 <__pow5mult+0xa0>
 800c1c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1c6:	b97c      	cbnz	r4, 800c1e8 <__pow5mult+0x48>
 800c1c8:	2010      	movs	r0, #16
 800c1ca:	f7ff fe1b 	bl	800be04 <malloc>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	6270      	str	r0, [r6, #36]	; 0x24
 800c1d2:	b928      	cbnz	r0, 800c1e0 <__pow5mult+0x40>
 800c1d4:	4b1d      	ldr	r3, [pc, #116]	; (800c24c <__pow5mult+0xac>)
 800c1d6:	481e      	ldr	r0, [pc, #120]	; (800c250 <__pow5mult+0xb0>)
 800c1d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1dc:	f000 fdbe 	bl	800cd5c <__assert_func>
 800c1e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1e4:	6004      	str	r4, [r0, #0]
 800c1e6:	60c4      	str	r4, [r0, #12]
 800c1e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1f0:	b94c      	cbnz	r4, 800c206 <__pow5mult+0x66>
 800c1f2:	f240 2171 	movw	r1, #625	; 0x271
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ff12 	bl	800c020 <__i2b>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c202:	4604      	mov	r4, r0
 800c204:	6003      	str	r3, [r0, #0]
 800c206:	f04f 0900 	mov.w	r9, #0
 800c20a:	07eb      	lsls	r3, r5, #31
 800c20c:	d50a      	bpl.n	800c224 <__pow5mult+0x84>
 800c20e:	4639      	mov	r1, r7
 800c210:	4622      	mov	r2, r4
 800c212:	4630      	mov	r0, r6
 800c214:	f7ff ff1a 	bl	800c04c <__multiply>
 800c218:	4639      	mov	r1, r7
 800c21a:	4680      	mov	r8, r0
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7ff fe47 	bl	800beb0 <_Bfree>
 800c222:	4647      	mov	r7, r8
 800c224:	106d      	asrs	r5, r5, #1
 800c226:	d00b      	beq.n	800c240 <__pow5mult+0xa0>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	b938      	cbnz	r0, 800c23c <__pow5mult+0x9c>
 800c22c:	4622      	mov	r2, r4
 800c22e:	4621      	mov	r1, r4
 800c230:	4630      	mov	r0, r6
 800c232:	f7ff ff0b 	bl	800c04c <__multiply>
 800c236:	6020      	str	r0, [r4, #0]
 800c238:	f8c0 9000 	str.w	r9, [r0]
 800c23c:	4604      	mov	r4, r0
 800c23e:	e7e4      	b.n	800c20a <__pow5mult+0x6a>
 800c240:	4638      	mov	r0, r7
 800c242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c246:	bf00      	nop
 800c248:	0800d358 	.word	0x0800d358
 800c24c:	0800d129 	.word	0x0800d129
 800c250:	0800d20c 	.word	0x0800d20c

0800c254 <__lshift>:
 800c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	460c      	mov	r4, r1
 800c25a:	6849      	ldr	r1, [r1, #4]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c262:	68a3      	ldr	r3, [r4, #8]
 800c264:	4607      	mov	r7, r0
 800c266:	4691      	mov	r9, r2
 800c268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c26c:	f108 0601 	add.w	r6, r8, #1
 800c270:	42b3      	cmp	r3, r6
 800c272:	db0b      	blt.n	800c28c <__lshift+0x38>
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff fddb 	bl	800be30 <_Balloc>
 800c27a:	4605      	mov	r5, r0
 800c27c:	b948      	cbnz	r0, 800c292 <__lshift+0x3e>
 800c27e:	4602      	mov	r2, r0
 800c280:	4b2a      	ldr	r3, [pc, #168]	; (800c32c <__lshift+0xd8>)
 800c282:	482b      	ldr	r0, [pc, #172]	; (800c330 <__lshift+0xdc>)
 800c284:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c288:	f000 fd68 	bl	800cd5c <__assert_func>
 800c28c:	3101      	adds	r1, #1
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	e7ee      	b.n	800c270 <__lshift+0x1c>
 800c292:	2300      	movs	r3, #0
 800c294:	f100 0114 	add.w	r1, r0, #20
 800c298:	f100 0210 	add.w	r2, r0, #16
 800c29c:	4618      	mov	r0, r3
 800c29e:	4553      	cmp	r3, sl
 800c2a0:	db37      	blt.n	800c312 <__lshift+0xbe>
 800c2a2:	6920      	ldr	r0, [r4, #16]
 800c2a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2a8:	f104 0314 	add.w	r3, r4, #20
 800c2ac:	f019 091f 	ands.w	r9, r9, #31
 800c2b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2b8:	d02f      	beq.n	800c31a <__lshift+0xc6>
 800c2ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c2be:	468a      	mov	sl, r1
 800c2c0:	f04f 0c00 	mov.w	ip, #0
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	fa02 f209 	lsl.w	r2, r2, r9
 800c2ca:	ea42 020c 	orr.w	r2, r2, ip
 800c2ce:	f84a 2b04 	str.w	r2, [sl], #4
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	4298      	cmp	r0, r3
 800c2d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c2dc:	d8f2      	bhi.n	800c2c4 <__lshift+0x70>
 800c2de:	1b03      	subs	r3, r0, r4
 800c2e0:	3b15      	subs	r3, #21
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	f104 0215 	add.w	r2, r4, #21
 800c2ec:	4290      	cmp	r0, r2
 800c2ee:	bf38      	it	cc
 800c2f0:	2304      	movcc	r3, #4
 800c2f2:	f841 c003 	str.w	ip, [r1, r3]
 800c2f6:	f1bc 0f00 	cmp.w	ip, #0
 800c2fa:	d001      	beq.n	800c300 <__lshift+0xac>
 800c2fc:	f108 0602 	add.w	r6, r8, #2
 800c300:	3e01      	subs	r6, #1
 800c302:	4638      	mov	r0, r7
 800c304:	612e      	str	r6, [r5, #16]
 800c306:	4621      	mov	r1, r4
 800c308:	f7ff fdd2 	bl	800beb0 <_Bfree>
 800c30c:	4628      	mov	r0, r5
 800c30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c312:	f842 0f04 	str.w	r0, [r2, #4]!
 800c316:	3301      	adds	r3, #1
 800c318:	e7c1      	b.n	800c29e <__lshift+0x4a>
 800c31a:	3904      	subs	r1, #4
 800c31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c320:	f841 2f04 	str.w	r2, [r1, #4]!
 800c324:	4298      	cmp	r0, r3
 800c326:	d8f9      	bhi.n	800c31c <__lshift+0xc8>
 800c328:	e7ea      	b.n	800c300 <__lshift+0xac>
 800c32a:	bf00      	nop
 800c32c:	0800d19b 	.word	0x0800d19b
 800c330:	0800d20c 	.word	0x0800d20c

0800c334 <__mcmp>:
 800c334:	b530      	push	{r4, r5, lr}
 800c336:	6902      	ldr	r2, [r0, #16]
 800c338:	690c      	ldr	r4, [r1, #16]
 800c33a:	1b12      	subs	r2, r2, r4
 800c33c:	d10e      	bne.n	800c35c <__mcmp+0x28>
 800c33e:	f100 0314 	add.w	r3, r0, #20
 800c342:	3114      	adds	r1, #20
 800c344:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c348:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c34c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c350:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c354:	42a5      	cmp	r5, r4
 800c356:	d003      	beq.n	800c360 <__mcmp+0x2c>
 800c358:	d305      	bcc.n	800c366 <__mcmp+0x32>
 800c35a:	2201      	movs	r2, #1
 800c35c:	4610      	mov	r0, r2
 800c35e:	bd30      	pop	{r4, r5, pc}
 800c360:	4283      	cmp	r3, r0
 800c362:	d3f3      	bcc.n	800c34c <__mcmp+0x18>
 800c364:	e7fa      	b.n	800c35c <__mcmp+0x28>
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	e7f7      	b.n	800c35c <__mcmp+0x28>

0800c36c <__mdiff>:
 800c36c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c370:	460c      	mov	r4, r1
 800c372:	4606      	mov	r6, r0
 800c374:	4611      	mov	r1, r2
 800c376:	4620      	mov	r0, r4
 800c378:	4690      	mov	r8, r2
 800c37a:	f7ff ffdb 	bl	800c334 <__mcmp>
 800c37e:	1e05      	subs	r5, r0, #0
 800c380:	d110      	bne.n	800c3a4 <__mdiff+0x38>
 800c382:	4629      	mov	r1, r5
 800c384:	4630      	mov	r0, r6
 800c386:	f7ff fd53 	bl	800be30 <_Balloc>
 800c38a:	b930      	cbnz	r0, 800c39a <__mdiff+0x2e>
 800c38c:	4b3a      	ldr	r3, [pc, #232]	; (800c478 <__mdiff+0x10c>)
 800c38e:	4602      	mov	r2, r0
 800c390:	f240 2132 	movw	r1, #562	; 0x232
 800c394:	4839      	ldr	r0, [pc, #228]	; (800c47c <__mdiff+0x110>)
 800c396:	f000 fce1 	bl	800cd5c <__assert_func>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	bfa4      	itt	ge
 800c3a6:	4643      	movge	r3, r8
 800c3a8:	46a0      	movge	r8, r4
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3b0:	bfa6      	itte	ge
 800c3b2:	461c      	movge	r4, r3
 800c3b4:	2500      	movge	r5, #0
 800c3b6:	2501      	movlt	r5, #1
 800c3b8:	f7ff fd3a 	bl	800be30 <_Balloc>
 800c3bc:	b920      	cbnz	r0, 800c3c8 <__mdiff+0x5c>
 800c3be:	4b2e      	ldr	r3, [pc, #184]	; (800c478 <__mdiff+0x10c>)
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3c6:	e7e5      	b.n	800c394 <__mdiff+0x28>
 800c3c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3cc:	6926      	ldr	r6, [r4, #16]
 800c3ce:	60c5      	str	r5, [r0, #12]
 800c3d0:	f104 0914 	add.w	r9, r4, #20
 800c3d4:	f108 0514 	add.w	r5, r8, #20
 800c3d8:	f100 0e14 	add.w	lr, r0, #20
 800c3dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3e4:	f108 0210 	add.w	r2, r8, #16
 800c3e8:	46f2      	mov	sl, lr
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3f4:	fa1f f883 	uxth.w	r8, r3
 800c3f8:	fa11 f18b 	uxtah	r1, r1, fp
 800c3fc:	0c1b      	lsrs	r3, r3, #16
 800c3fe:	eba1 0808 	sub.w	r8, r1, r8
 800c402:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c406:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c40a:	fa1f f888 	uxth.w	r8, r8
 800c40e:	1419      	asrs	r1, r3, #16
 800c410:	454e      	cmp	r6, r9
 800c412:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c416:	f84a 3b04 	str.w	r3, [sl], #4
 800c41a:	d8e7      	bhi.n	800c3ec <__mdiff+0x80>
 800c41c:	1b33      	subs	r3, r6, r4
 800c41e:	3b15      	subs	r3, #21
 800c420:	f023 0303 	bic.w	r3, r3, #3
 800c424:	3304      	adds	r3, #4
 800c426:	3415      	adds	r4, #21
 800c428:	42a6      	cmp	r6, r4
 800c42a:	bf38      	it	cc
 800c42c:	2304      	movcc	r3, #4
 800c42e:	441d      	add	r5, r3
 800c430:	4473      	add	r3, lr
 800c432:	469e      	mov	lr, r3
 800c434:	462e      	mov	r6, r5
 800c436:	4566      	cmp	r6, ip
 800c438:	d30e      	bcc.n	800c458 <__mdiff+0xec>
 800c43a:	f10c 0203 	add.w	r2, ip, #3
 800c43e:	1b52      	subs	r2, r2, r5
 800c440:	f022 0203 	bic.w	r2, r2, #3
 800c444:	3d03      	subs	r5, #3
 800c446:	45ac      	cmp	ip, r5
 800c448:	bf38      	it	cc
 800c44a:	2200      	movcc	r2, #0
 800c44c:	441a      	add	r2, r3
 800c44e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c452:	b17b      	cbz	r3, 800c474 <__mdiff+0x108>
 800c454:	6107      	str	r7, [r0, #16]
 800c456:	e7a3      	b.n	800c3a0 <__mdiff+0x34>
 800c458:	f856 8b04 	ldr.w	r8, [r6], #4
 800c45c:	fa11 f288 	uxtah	r2, r1, r8
 800c460:	1414      	asrs	r4, r2, #16
 800c462:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c466:	b292      	uxth	r2, r2
 800c468:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c46c:	f84e 2b04 	str.w	r2, [lr], #4
 800c470:	1421      	asrs	r1, r4, #16
 800c472:	e7e0      	b.n	800c436 <__mdiff+0xca>
 800c474:	3f01      	subs	r7, #1
 800c476:	e7ea      	b.n	800c44e <__mdiff+0xe2>
 800c478:	0800d19b 	.word	0x0800d19b
 800c47c:	0800d20c 	.word	0x0800d20c

0800c480 <__d2b>:
 800c480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c484:	4689      	mov	r9, r1
 800c486:	2101      	movs	r1, #1
 800c488:	ec57 6b10 	vmov	r6, r7, d0
 800c48c:	4690      	mov	r8, r2
 800c48e:	f7ff fccf 	bl	800be30 <_Balloc>
 800c492:	4604      	mov	r4, r0
 800c494:	b930      	cbnz	r0, 800c4a4 <__d2b+0x24>
 800c496:	4602      	mov	r2, r0
 800c498:	4b25      	ldr	r3, [pc, #148]	; (800c530 <__d2b+0xb0>)
 800c49a:	4826      	ldr	r0, [pc, #152]	; (800c534 <__d2b+0xb4>)
 800c49c:	f240 310a 	movw	r1, #778	; 0x30a
 800c4a0:	f000 fc5c 	bl	800cd5c <__assert_func>
 800c4a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4ac:	bb35      	cbnz	r5, 800c4fc <__d2b+0x7c>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	d028      	beq.n	800c506 <__d2b+0x86>
 800c4b4:	4668      	mov	r0, sp
 800c4b6:	9600      	str	r6, [sp, #0]
 800c4b8:	f7ff fd82 	bl	800bfc0 <__lo0bits>
 800c4bc:	9900      	ldr	r1, [sp, #0]
 800c4be:	b300      	cbz	r0, 800c502 <__d2b+0x82>
 800c4c0:	9a01      	ldr	r2, [sp, #4]
 800c4c2:	f1c0 0320 	rsb	r3, r0, #32
 800c4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	40c2      	lsrs	r2, r0
 800c4ce:	6163      	str	r3, [r4, #20]
 800c4d0:	9201      	str	r2, [sp, #4]
 800c4d2:	9b01      	ldr	r3, [sp, #4]
 800c4d4:	61a3      	str	r3, [r4, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bf14      	ite	ne
 800c4da:	2202      	movne	r2, #2
 800c4dc:	2201      	moveq	r2, #1
 800c4de:	6122      	str	r2, [r4, #16]
 800c4e0:	b1d5      	cbz	r5, 800c518 <__d2b+0x98>
 800c4e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4e6:	4405      	add	r5, r0
 800c4e8:	f8c9 5000 	str.w	r5, [r9]
 800c4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4f0:	f8c8 0000 	str.w	r0, [r8]
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	b003      	add	sp, #12
 800c4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c500:	e7d5      	b.n	800c4ae <__d2b+0x2e>
 800c502:	6161      	str	r1, [r4, #20]
 800c504:	e7e5      	b.n	800c4d2 <__d2b+0x52>
 800c506:	a801      	add	r0, sp, #4
 800c508:	f7ff fd5a 	bl	800bfc0 <__lo0bits>
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	6163      	str	r3, [r4, #20]
 800c510:	2201      	movs	r2, #1
 800c512:	6122      	str	r2, [r4, #16]
 800c514:	3020      	adds	r0, #32
 800c516:	e7e3      	b.n	800c4e0 <__d2b+0x60>
 800c518:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c51c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c520:	f8c9 0000 	str.w	r0, [r9]
 800c524:	6918      	ldr	r0, [r3, #16]
 800c526:	f7ff fd2b 	bl	800bf80 <__hi0bits>
 800c52a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c52e:	e7df      	b.n	800c4f0 <__d2b+0x70>
 800c530:	0800d19b 	.word	0x0800d19b
 800c534:	0800d20c 	.word	0x0800d20c

0800c538 <_calloc_r>:
 800c538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c53a:	fba1 2402 	umull	r2, r4, r1, r2
 800c53e:	b94c      	cbnz	r4, 800c554 <_calloc_r+0x1c>
 800c540:	4611      	mov	r1, r2
 800c542:	9201      	str	r2, [sp, #4]
 800c544:	f000 f87a 	bl	800c63c <_malloc_r>
 800c548:	9a01      	ldr	r2, [sp, #4]
 800c54a:	4605      	mov	r5, r0
 800c54c:	b930      	cbnz	r0, 800c55c <_calloc_r+0x24>
 800c54e:	4628      	mov	r0, r5
 800c550:	b003      	add	sp, #12
 800c552:	bd30      	pop	{r4, r5, pc}
 800c554:	220c      	movs	r2, #12
 800c556:	6002      	str	r2, [r0, #0]
 800c558:	2500      	movs	r5, #0
 800c55a:	e7f8      	b.n	800c54e <_calloc_r+0x16>
 800c55c:	4621      	mov	r1, r4
 800c55e:	f7fd fdd1 	bl	800a104 <memset>
 800c562:	e7f4      	b.n	800c54e <_calloc_r+0x16>

0800c564 <_free_r>:
 800c564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c566:	2900      	cmp	r1, #0
 800c568:	d044      	beq.n	800c5f4 <_free_r+0x90>
 800c56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56e:	9001      	str	r0, [sp, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f1a1 0404 	sub.w	r4, r1, #4
 800c576:	bfb8      	it	lt
 800c578:	18e4      	addlt	r4, r4, r3
 800c57a:	f000 fc8f 	bl	800ce9c <__malloc_lock>
 800c57e:	4a1e      	ldr	r2, [pc, #120]	; (800c5f8 <_free_r+0x94>)
 800c580:	9801      	ldr	r0, [sp, #4]
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	b933      	cbnz	r3, 800c594 <_free_r+0x30>
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	6014      	str	r4, [r2, #0]
 800c58a:	b003      	add	sp, #12
 800c58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c590:	f000 bc8a 	b.w	800cea8 <__malloc_unlock>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d908      	bls.n	800c5aa <_free_r+0x46>
 800c598:	6825      	ldr	r5, [r4, #0]
 800c59a:	1961      	adds	r1, r4, r5
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf01      	itttt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	1949      	addeq	r1, r1, r5
 800c5a6:	6021      	streq	r1, [r4, #0]
 800c5a8:	e7ed      	b.n	800c586 <_free_r+0x22>
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	b10b      	cbz	r3, 800c5b4 <_free_r+0x50>
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	d9fa      	bls.n	800c5aa <_free_r+0x46>
 800c5b4:	6811      	ldr	r1, [r2, #0]
 800c5b6:	1855      	adds	r5, r2, r1
 800c5b8:	42a5      	cmp	r5, r4
 800c5ba:	d10b      	bne.n	800c5d4 <_free_r+0x70>
 800c5bc:	6824      	ldr	r4, [r4, #0]
 800c5be:	4421      	add	r1, r4
 800c5c0:	1854      	adds	r4, r2, r1
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	d1e0      	bne.n	800c58a <_free_r+0x26>
 800c5c8:	681c      	ldr	r4, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	6053      	str	r3, [r2, #4]
 800c5ce:	4421      	add	r1, r4
 800c5d0:	6011      	str	r1, [r2, #0]
 800c5d2:	e7da      	b.n	800c58a <_free_r+0x26>
 800c5d4:	d902      	bls.n	800c5dc <_free_r+0x78>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	6003      	str	r3, [r0, #0]
 800c5da:	e7d6      	b.n	800c58a <_free_r+0x26>
 800c5dc:	6825      	ldr	r5, [r4, #0]
 800c5de:	1961      	adds	r1, r4, r5
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf04      	itt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	bf04      	itt	eq
 800c5ec:	1949      	addeq	r1, r1, r5
 800c5ee:	6021      	streq	r1, [r4, #0]
 800c5f0:	6054      	str	r4, [r2, #4]
 800c5f2:	e7ca      	b.n	800c58a <_free_r+0x26>
 800c5f4:	b003      	add	sp, #12
 800c5f6:	bd30      	pop	{r4, r5, pc}
 800c5f8:	2000220c 	.word	0x2000220c

0800c5fc <sbrk_aligned>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4e0e      	ldr	r6, [pc, #56]	; (800c638 <sbrk_aligned+0x3c>)
 800c600:	460c      	mov	r4, r1
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b911      	cbnz	r1, 800c60e <sbrk_aligned+0x12>
 800c608:	f000 fb42 	bl	800cc90 <_sbrk_r>
 800c60c:	6030      	str	r0, [r6, #0]
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f000 fb3d 	bl	800cc90 <_sbrk_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d00a      	beq.n	800c630 <sbrk_aligned+0x34>
 800c61a:	1cc4      	adds	r4, r0, #3
 800c61c:	f024 0403 	bic.w	r4, r4, #3
 800c620:	42a0      	cmp	r0, r4
 800c622:	d007      	beq.n	800c634 <sbrk_aligned+0x38>
 800c624:	1a21      	subs	r1, r4, r0
 800c626:	4628      	mov	r0, r5
 800c628:	f000 fb32 	bl	800cc90 <_sbrk_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	d101      	bne.n	800c634 <sbrk_aligned+0x38>
 800c630:	f04f 34ff 	mov.w	r4, #4294967295
 800c634:	4620      	mov	r0, r4
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	20002210 	.word	0x20002210

0800c63c <_malloc_r>:
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	1ccd      	adds	r5, r1, #3
 800c642:	f025 0503 	bic.w	r5, r5, #3
 800c646:	3508      	adds	r5, #8
 800c648:	2d0c      	cmp	r5, #12
 800c64a:	bf38      	it	cc
 800c64c:	250c      	movcc	r5, #12
 800c64e:	2d00      	cmp	r5, #0
 800c650:	4607      	mov	r7, r0
 800c652:	db01      	blt.n	800c658 <_malloc_r+0x1c>
 800c654:	42a9      	cmp	r1, r5
 800c656:	d905      	bls.n	800c664 <_malloc_r+0x28>
 800c658:	230c      	movs	r3, #12
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	2600      	movs	r6, #0
 800c65e:	4630      	mov	r0, r6
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	4e2e      	ldr	r6, [pc, #184]	; (800c720 <_malloc_r+0xe4>)
 800c666:	f000 fc19 	bl	800ce9c <__malloc_lock>
 800c66a:	6833      	ldr	r3, [r6, #0]
 800c66c:	461c      	mov	r4, r3
 800c66e:	bb34      	cbnz	r4, 800c6be <_malloc_r+0x82>
 800c670:	4629      	mov	r1, r5
 800c672:	4638      	mov	r0, r7
 800c674:	f7ff ffc2 	bl	800c5fc <sbrk_aligned>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	4604      	mov	r4, r0
 800c67c:	d14d      	bne.n	800c71a <_malloc_r+0xde>
 800c67e:	6834      	ldr	r4, [r6, #0]
 800c680:	4626      	mov	r6, r4
 800c682:	2e00      	cmp	r6, #0
 800c684:	d140      	bne.n	800c708 <_malloc_r+0xcc>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	4631      	mov	r1, r6
 800c68a:	4638      	mov	r0, r7
 800c68c:	eb04 0803 	add.w	r8, r4, r3
 800c690:	f000 fafe 	bl	800cc90 <_sbrk_r>
 800c694:	4580      	cmp	r8, r0
 800c696:	d13a      	bne.n	800c70e <_malloc_r+0xd2>
 800c698:	6821      	ldr	r1, [r4, #0]
 800c69a:	3503      	adds	r5, #3
 800c69c:	1a6d      	subs	r5, r5, r1
 800c69e:	f025 0503 	bic.w	r5, r5, #3
 800c6a2:	3508      	adds	r5, #8
 800c6a4:	2d0c      	cmp	r5, #12
 800c6a6:	bf38      	it	cc
 800c6a8:	250c      	movcc	r5, #12
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f7ff ffa5 	bl	800c5fc <sbrk_aligned>
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	d02b      	beq.n	800c70e <_malloc_r+0xd2>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	442b      	add	r3, r5
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	e00e      	b.n	800c6dc <_malloc_r+0xa0>
 800c6be:	6822      	ldr	r2, [r4, #0]
 800c6c0:	1b52      	subs	r2, r2, r5
 800c6c2:	d41e      	bmi.n	800c702 <_malloc_r+0xc6>
 800c6c4:	2a0b      	cmp	r2, #11
 800c6c6:	d916      	bls.n	800c6f6 <_malloc_r+0xba>
 800c6c8:	1961      	adds	r1, r4, r5
 800c6ca:	42a3      	cmp	r3, r4
 800c6cc:	6025      	str	r5, [r4, #0]
 800c6ce:	bf18      	it	ne
 800c6d0:	6059      	strne	r1, [r3, #4]
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	bf08      	it	eq
 800c6d6:	6031      	streq	r1, [r6, #0]
 800c6d8:	5162      	str	r2, [r4, r5]
 800c6da:	604b      	str	r3, [r1, #4]
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f104 060b 	add.w	r6, r4, #11
 800c6e2:	f000 fbe1 	bl	800cea8 <__malloc_unlock>
 800c6e6:	f026 0607 	bic.w	r6, r6, #7
 800c6ea:	1d23      	adds	r3, r4, #4
 800c6ec:	1af2      	subs	r2, r6, r3
 800c6ee:	d0b6      	beq.n	800c65e <_malloc_r+0x22>
 800c6f0:	1b9b      	subs	r3, r3, r6
 800c6f2:	50a3      	str	r3, [r4, r2]
 800c6f4:	e7b3      	b.n	800c65e <_malloc_r+0x22>
 800c6f6:	6862      	ldr	r2, [r4, #4]
 800c6f8:	42a3      	cmp	r3, r4
 800c6fa:	bf0c      	ite	eq
 800c6fc:	6032      	streq	r2, [r6, #0]
 800c6fe:	605a      	strne	r2, [r3, #4]
 800c700:	e7ec      	b.n	800c6dc <_malloc_r+0xa0>
 800c702:	4623      	mov	r3, r4
 800c704:	6864      	ldr	r4, [r4, #4]
 800c706:	e7b2      	b.n	800c66e <_malloc_r+0x32>
 800c708:	4634      	mov	r4, r6
 800c70a:	6876      	ldr	r6, [r6, #4]
 800c70c:	e7b9      	b.n	800c682 <_malloc_r+0x46>
 800c70e:	230c      	movs	r3, #12
 800c710:	603b      	str	r3, [r7, #0]
 800c712:	4638      	mov	r0, r7
 800c714:	f000 fbc8 	bl	800cea8 <__malloc_unlock>
 800c718:	e7a1      	b.n	800c65e <_malloc_r+0x22>
 800c71a:	6025      	str	r5, [r4, #0]
 800c71c:	e7de      	b.n	800c6dc <_malloc_r+0xa0>
 800c71e:	bf00      	nop
 800c720:	2000220c 	.word	0x2000220c

0800c724 <__ssputs_r>:
 800c724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c728:	688e      	ldr	r6, [r1, #8]
 800c72a:	429e      	cmp	r6, r3
 800c72c:	4682      	mov	sl, r0
 800c72e:	460c      	mov	r4, r1
 800c730:	4690      	mov	r8, r2
 800c732:	461f      	mov	r7, r3
 800c734:	d838      	bhi.n	800c7a8 <__ssputs_r+0x84>
 800c736:	898a      	ldrh	r2, [r1, #12]
 800c738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c73c:	d032      	beq.n	800c7a4 <__ssputs_r+0x80>
 800c73e:	6825      	ldr	r5, [r4, #0]
 800c740:	6909      	ldr	r1, [r1, #16]
 800c742:	eba5 0901 	sub.w	r9, r5, r1
 800c746:	6965      	ldr	r5, [r4, #20]
 800c748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c750:	3301      	adds	r3, #1
 800c752:	444b      	add	r3, r9
 800c754:	106d      	asrs	r5, r5, #1
 800c756:	429d      	cmp	r5, r3
 800c758:	bf38      	it	cc
 800c75a:	461d      	movcc	r5, r3
 800c75c:	0553      	lsls	r3, r2, #21
 800c75e:	d531      	bpl.n	800c7c4 <__ssputs_r+0xa0>
 800c760:	4629      	mov	r1, r5
 800c762:	f7ff ff6b 	bl	800c63c <_malloc_r>
 800c766:	4606      	mov	r6, r0
 800c768:	b950      	cbnz	r0, 800c780 <__ssputs_r+0x5c>
 800c76a:	230c      	movs	r3, #12
 800c76c:	f8ca 3000 	str.w	r3, [sl]
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c776:	81a3      	strh	r3, [r4, #12]
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c780:	6921      	ldr	r1, [r4, #16]
 800c782:	464a      	mov	r2, r9
 800c784:	f7ff fb46 	bl	800be14 <memcpy>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	6126      	str	r6, [r4, #16]
 800c796:	6165      	str	r5, [r4, #20]
 800c798:	444e      	add	r6, r9
 800c79a:	eba5 0509 	sub.w	r5, r5, r9
 800c79e:	6026      	str	r6, [r4, #0]
 800c7a0:	60a5      	str	r5, [r4, #8]
 800c7a2:	463e      	mov	r6, r7
 800c7a4:	42be      	cmp	r6, r7
 800c7a6:	d900      	bls.n	800c7aa <__ssputs_r+0x86>
 800c7a8:	463e      	mov	r6, r7
 800c7aa:	6820      	ldr	r0, [r4, #0]
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	4641      	mov	r1, r8
 800c7b0:	f000 fb5a 	bl	800ce68 <memmove>
 800c7b4:	68a3      	ldr	r3, [r4, #8]
 800c7b6:	1b9b      	subs	r3, r3, r6
 800c7b8:	60a3      	str	r3, [r4, #8]
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	4433      	add	r3, r6
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7db      	b.n	800c77c <__ssputs_r+0x58>
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	f000 fb75 	bl	800ceb4 <_realloc_r>
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d1e1      	bne.n	800c794 <__ssputs_r+0x70>
 800c7d0:	6921      	ldr	r1, [r4, #16]
 800c7d2:	4650      	mov	r0, sl
 800c7d4:	f7ff fec6 	bl	800c564 <_free_r>
 800c7d8:	e7c7      	b.n	800c76a <__ssputs_r+0x46>
	...

0800c7dc <_svfiprintf_r>:
 800c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e0:	4698      	mov	r8, r3
 800c7e2:	898b      	ldrh	r3, [r1, #12]
 800c7e4:	061b      	lsls	r3, r3, #24
 800c7e6:	b09d      	sub	sp, #116	; 0x74
 800c7e8:	4607      	mov	r7, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	d50e      	bpl.n	800c80e <_svfiprintf_r+0x32>
 800c7f0:	690b      	ldr	r3, [r1, #16]
 800c7f2:	b963      	cbnz	r3, 800c80e <_svfiprintf_r+0x32>
 800c7f4:	2140      	movs	r1, #64	; 0x40
 800c7f6:	f7ff ff21 	bl	800c63c <_malloc_r>
 800c7fa:	6028      	str	r0, [r5, #0]
 800c7fc:	6128      	str	r0, [r5, #16]
 800c7fe:	b920      	cbnz	r0, 800c80a <_svfiprintf_r+0x2e>
 800c800:	230c      	movs	r3, #12
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295
 800c808:	e0d1      	b.n	800c9ae <_svfiprintf_r+0x1d2>
 800c80a:	2340      	movs	r3, #64	; 0x40
 800c80c:	616b      	str	r3, [r5, #20]
 800c80e:	2300      	movs	r3, #0
 800c810:	9309      	str	r3, [sp, #36]	; 0x24
 800c812:	2320      	movs	r3, #32
 800c814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c818:	f8cd 800c 	str.w	r8, [sp, #12]
 800c81c:	2330      	movs	r3, #48	; 0x30
 800c81e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9c8 <_svfiprintf_r+0x1ec>
 800c822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c826:	f04f 0901 	mov.w	r9, #1
 800c82a:	4623      	mov	r3, r4
 800c82c:	469a      	mov	sl, r3
 800c82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c832:	b10a      	cbz	r2, 800c838 <_svfiprintf_r+0x5c>
 800c834:	2a25      	cmp	r2, #37	; 0x25
 800c836:	d1f9      	bne.n	800c82c <_svfiprintf_r+0x50>
 800c838:	ebba 0b04 	subs.w	fp, sl, r4
 800c83c:	d00b      	beq.n	800c856 <_svfiprintf_r+0x7a>
 800c83e:	465b      	mov	r3, fp
 800c840:	4622      	mov	r2, r4
 800c842:	4629      	mov	r1, r5
 800c844:	4638      	mov	r0, r7
 800c846:	f7ff ff6d 	bl	800c724 <__ssputs_r>
 800c84a:	3001      	adds	r0, #1
 800c84c:	f000 80aa 	beq.w	800c9a4 <_svfiprintf_r+0x1c8>
 800c850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c852:	445a      	add	r2, fp
 800c854:	9209      	str	r2, [sp, #36]	; 0x24
 800c856:	f89a 3000 	ldrb.w	r3, [sl]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 80a2 	beq.w	800c9a4 <_svfiprintf_r+0x1c8>
 800c860:	2300      	movs	r3, #0
 800c862:	f04f 32ff 	mov.w	r2, #4294967295
 800c866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c86a:	f10a 0a01 	add.w	sl, sl, #1
 800c86e:	9304      	str	r3, [sp, #16]
 800c870:	9307      	str	r3, [sp, #28]
 800c872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c876:	931a      	str	r3, [sp, #104]	; 0x68
 800c878:	4654      	mov	r4, sl
 800c87a:	2205      	movs	r2, #5
 800c87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c880:	4851      	ldr	r0, [pc, #324]	; (800c9c8 <_svfiprintf_r+0x1ec>)
 800c882:	f7f3 fcbd 	bl	8000200 <memchr>
 800c886:	9a04      	ldr	r2, [sp, #16]
 800c888:	b9d8      	cbnz	r0, 800c8c2 <_svfiprintf_r+0xe6>
 800c88a:	06d0      	lsls	r0, r2, #27
 800c88c:	bf44      	itt	mi
 800c88e:	2320      	movmi	r3, #32
 800c890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c894:	0711      	lsls	r1, r2, #28
 800c896:	bf44      	itt	mi
 800c898:	232b      	movmi	r3, #43	; 0x2b
 800c89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c89e:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a4:	d015      	beq.n	800c8d2 <_svfiprintf_r+0xf6>
 800c8a6:	9a07      	ldr	r2, [sp, #28]
 800c8a8:	4654      	mov	r4, sl
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	f04f 0c0a 	mov.w	ip, #10
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8b6:	3b30      	subs	r3, #48	; 0x30
 800c8b8:	2b09      	cmp	r3, #9
 800c8ba:	d94e      	bls.n	800c95a <_svfiprintf_r+0x17e>
 800c8bc:	b1b0      	cbz	r0, 800c8ec <_svfiprintf_r+0x110>
 800c8be:	9207      	str	r2, [sp, #28]
 800c8c0:	e014      	b.n	800c8ec <_svfiprintf_r+0x110>
 800c8c2:	eba0 0308 	sub.w	r3, r0, r8
 800c8c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	9304      	str	r3, [sp, #16]
 800c8ce:	46a2      	mov	sl, r4
 800c8d0:	e7d2      	b.n	800c878 <_svfiprintf_r+0x9c>
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	1d19      	adds	r1, r3, #4
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	9103      	str	r1, [sp, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	bfbb      	ittet	lt
 800c8de:	425b      	neglt	r3, r3
 800c8e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8e4:	9307      	strge	r3, [sp, #28]
 800c8e6:	9307      	strlt	r3, [sp, #28]
 800c8e8:	bfb8      	it	lt
 800c8ea:	9204      	strlt	r2, [sp, #16]
 800c8ec:	7823      	ldrb	r3, [r4, #0]
 800c8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c8f0:	d10c      	bne.n	800c90c <_svfiprintf_r+0x130>
 800c8f2:	7863      	ldrb	r3, [r4, #1]
 800c8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8f6:	d135      	bne.n	800c964 <_svfiprintf_r+0x188>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	1d1a      	adds	r2, r3, #4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	9203      	str	r2, [sp, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	bfb8      	it	lt
 800c904:	f04f 33ff 	movlt.w	r3, #4294967295
 800c908:	3402      	adds	r4, #2
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9d8 <_svfiprintf_r+0x1fc>
 800c910:	7821      	ldrb	r1, [r4, #0]
 800c912:	2203      	movs	r2, #3
 800c914:	4650      	mov	r0, sl
 800c916:	f7f3 fc73 	bl	8000200 <memchr>
 800c91a:	b140      	cbz	r0, 800c92e <_svfiprintf_r+0x152>
 800c91c:	2340      	movs	r3, #64	; 0x40
 800c91e:	eba0 000a 	sub.w	r0, r0, sl
 800c922:	fa03 f000 	lsl.w	r0, r3, r0
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	4303      	orrs	r3, r0
 800c92a:	3401      	adds	r4, #1
 800c92c:	9304      	str	r3, [sp, #16]
 800c92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c932:	4826      	ldr	r0, [pc, #152]	; (800c9cc <_svfiprintf_r+0x1f0>)
 800c934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c938:	2206      	movs	r2, #6
 800c93a:	f7f3 fc61 	bl	8000200 <memchr>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d038      	beq.n	800c9b4 <_svfiprintf_r+0x1d8>
 800c942:	4b23      	ldr	r3, [pc, #140]	; (800c9d0 <_svfiprintf_r+0x1f4>)
 800c944:	bb1b      	cbnz	r3, 800c98e <_svfiprintf_r+0x1b2>
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	3307      	adds	r3, #7
 800c94a:	f023 0307 	bic.w	r3, r3, #7
 800c94e:	3308      	adds	r3, #8
 800c950:	9303      	str	r3, [sp, #12]
 800c952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c954:	4433      	add	r3, r6
 800c956:	9309      	str	r3, [sp, #36]	; 0x24
 800c958:	e767      	b.n	800c82a <_svfiprintf_r+0x4e>
 800c95a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c95e:	460c      	mov	r4, r1
 800c960:	2001      	movs	r0, #1
 800c962:	e7a5      	b.n	800c8b0 <_svfiprintf_r+0xd4>
 800c964:	2300      	movs	r3, #0
 800c966:	3401      	adds	r4, #1
 800c968:	9305      	str	r3, [sp, #20]
 800c96a:	4619      	mov	r1, r3
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4620      	mov	r0, r4
 800c972:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c976:	3a30      	subs	r2, #48	; 0x30
 800c978:	2a09      	cmp	r2, #9
 800c97a:	d903      	bls.n	800c984 <_svfiprintf_r+0x1a8>
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0c5      	beq.n	800c90c <_svfiprintf_r+0x130>
 800c980:	9105      	str	r1, [sp, #20]
 800c982:	e7c3      	b.n	800c90c <_svfiprintf_r+0x130>
 800c984:	fb0c 2101 	mla	r1, ip, r1, r2
 800c988:	4604      	mov	r4, r0
 800c98a:	2301      	movs	r3, #1
 800c98c:	e7f0      	b.n	800c970 <_svfiprintf_r+0x194>
 800c98e:	ab03      	add	r3, sp, #12
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	462a      	mov	r2, r5
 800c994:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <_svfiprintf_r+0x1f8>)
 800c996:	a904      	add	r1, sp, #16
 800c998:	4638      	mov	r0, r7
 800c99a:	f7fd fc5b 	bl	800a254 <_printf_float>
 800c99e:	1c42      	adds	r2, r0, #1
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	d1d6      	bne.n	800c952 <_svfiprintf_r+0x176>
 800c9a4:	89ab      	ldrh	r3, [r5, #12]
 800c9a6:	065b      	lsls	r3, r3, #25
 800c9a8:	f53f af2c 	bmi.w	800c804 <_svfiprintf_r+0x28>
 800c9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ae:	b01d      	add	sp, #116	; 0x74
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b4:	ab03      	add	r3, sp, #12
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	462a      	mov	r2, r5
 800c9ba:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <_svfiprintf_r+0x1f8>)
 800c9bc:	a904      	add	r1, sp, #16
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f7fd feec 	bl	800a79c <_printf_i>
 800c9c4:	e7eb      	b.n	800c99e <_svfiprintf_r+0x1c2>
 800c9c6:	bf00      	nop
 800c9c8:	0800d364 	.word	0x0800d364
 800c9cc:	0800d36e 	.word	0x0800d36e
 800c9d0:	0800a255 	.word	0x0800a255
 800c9d4:	0800c725 	.word	0x0800c725
 800c9d8:	0800d36a 	.word	0x0800d36a

0800c9dc <__sfputc_r>:
 800c9dc:	6893      	ldr	r3, [r2, #8]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	b410      	push	{r4}
 800c9e4:	6093      	str	r3, [r2, #8]
 800c9e6:	da08      	bge.n	800c9fa <__sfputc_r+0x1e>
 800c9e8:	6994      	ldr	r4, [r2, #24]
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	db01      	blt.n	800c9f2 <__sfputc_r+0x16>
 800c9ee:	290a      	cmp	r1, #10
 800c9f0:	d103      	bne.n	800c9fa <__sfputc_r+0x1e>
 800c9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f6:	f7fe b8a5 	b.w	800ab44 <__swbuf_r>
 800c9fa:	6813      	ldr	r3, [r2, #0]
 800c9fc:	1c58      	adds	r0, r3, #1
 800c9fe:	6010      	str	r0, [r2, #0]
 800ca00:	7019      	strb	r1, [r3, #0]
 800ca02:	4608      	mov	r0, r1
 800ca04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <__sfputs_r>:
 800ca0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	4614      	mov	r4, r2
 800ca12:	18d5      	adds	r5, r2, r3
 800ca14:	42ac      	cmp	r4, r5
 800ca16:	d101      	bne.n	800ca1c <__sfputs_r+0x12>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e007      	b.n	800ca2c <__sfputs_r+0x22>
 800ca1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca20:	463a      	mov	r2, r7
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7ff ffda 	bl	800c9dc <__sfputc_r>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d1f3      	bne.n	800ca14 <__sfputs_r+0xa>
 800ca2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca30 <_vfiprintf_r>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	460d      	mov	r5, r1
 800ca36:	b09d      	sub	sp, #116	; 0x74
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4698      	mov	r8, r3
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	b118      	cbz	r0, 800ca48 <_vfiprintf_r+0x18>
 800ca40:	6983      	ldr	r3, [r0, #24]
 800ca42:	b90b      	cbnz	r3, 800ca48 <_vfiprintf_r+0x18>
 800ca44:	f7ff f8d4 	bl	800bbf0 <__sinit>
 800ca48:	4b89      	ldr	r3, [pc, #548]	; (800cc70 <_vfiprintf_r+0x240>)
 800ca4a:	429d      	cmp	r5, r3
 800ca4c:	d11b      	bne.n	800ca86 <_vfiprintf_r+0x56>
 800ca4e:	6875      	ldr	r5, [r6, #4]
 800ca50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca52:	07d9      	lsls	r1, r3, #31
 800ca54:	d405      	bmi.n	800ca62 <_vfiprintf_r+0x32>
 800ca56:	89ab      	ldrh	r3, [r5, #12]
 800ca58:	059a      	lsls	r2, r3, #22
 800ca5a:	d402      	bmi.n	800ca62 <_vfiprintf_r+0x32>
 800ca5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca5e:	f7ff f96a 	bl	800bd36 <__retarget_lock_acquire_recursive>
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	071b      	lsls	r3, r3, #28
 800ca66:	d501      	bpl.n	800ca6c <_vfiprintf_r+0x3c>
 800ca68:	692b      	ldr	r3, [r5, #16]
 800ca6a:	b9eb      	cbnz	r3, 800caa8 <_vfiprintf_r+0x78>
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f7fe f8ba 	bl	800abe8 <__swsetup_r>
 800ca74:	b1c0      	cbz	r0, 800caa8 <_vfiprintf_r+0x78>
 800ca76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca78:	07dc      	lsls	r4, r3, #31
 800ca7a:	d50e      	bpl.n	800ca9a <_vfiprintf_r+0x6a>
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	b01d      	add	sp, #116	; 0x74
 800ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca86:	4b7b      	ldr	r3, [pc, #492]	; (800cc74 <_vfiprintf_r+0x244>)
 800ca88:	429d      	cmp	r5, r3
 800ca8a:	d101      	bne.n	800ca90 <_vfiprintf_r+0x60>
 800ca8c:	68b5      	ldr	r5, [r6, #8]
 800ca8e:	e7df      	b.n	800ca50 <_vfiprintf_r+0x20>
 800ca90:	4b79      	ldr	r3, [pc, #484]	; (800cc78 <_vfiprintf_r+0x248>)
 800ca92:	429d      	cmp	r5, r3
 800ca94:	bf08      	it	eq
 800ca96:	68f5      	ldreq	r5, [r6, #12]
 800ca98:	e7da      	b.n	800ca50 <_vfiprintf_r+0x20>
 800ca9a:	89ab      	ldrh	r3, [r5, #12]
 800ca9c:	0598      	lsls	r0, r3, #22
 800ca9e:	d4ed      	bmi.n	800ca7c <_vfiprintf_r+0x4c>
 800caa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caa2:	f7ff f949 	bl	800bd38 <__retarget_lock_release_recursive>
 800caa6:	e7e9      	b.n	800ca7c <_vfiprintf_r+0x4c>
 800caa8:	2300      	movs	r3, #0
 800caaa:	9309      	str	r3, [sp, #36]	; 0x24
 800caac:	2320      	movs	r3, #32
 800caae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cab2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cab6:	2330      	movs	r3, #48	; 0x30
 800cab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc7c <_vfiprintf_r+0x24c>
 800cabc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cac0:	f04f 0901 	mov.w	r9, #1
 800cac4:	4623      	mov	r3, r4
 800cac6:	469a      	mov	sl, r3
 800cac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cacc:	b10a      	cbz	r2, 800cad2 <_vfiprintf_r+0xa2>
 800cace:	2a25      	cmp	r2, #37	; 0x25
 800cad0:	d1f9      	bne.n	800cac6 <_vfiprintf_r+0x96>
 800cad2:	ebba 0b04 	subs.w	fp, sl, r4
 800cad6:	d00b      	beq.n	800caf0 <_vfiprintf_r+0xc0>
 800cad8:	465b      	mov	r3, fp
 800cada:	4622      	mov	r2, r4
 800cadc:	4629      	mov	r1, r5
 800cade:	4630      	mov	r0, r6
 800cae0:	f7ff ff93 	bl	800ca0a <__sfputs_r>
 800cae4:	3001      	adds	r0, #1
 800cae6:	f000 80aa 	beq.w	800cc3e <_vfiprintf_r+0x20e>
 800caea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caec:	445a      	add	r2, fp
 800caee:	9209      	str	r2, [sp, #36]	; 0x24
 800caf0:	f89a 3000 	ldrb.w	r3, [sl]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 80a2 	beq.w	800cc3e <_vfiprintf_r+0x20e>
 800cafa:	2300      	movs	r3, #0
 800cafc:	f04f 32ff 	mov.w	r2, #4294967295
 800cb00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb04:	f10a 0a01 	add.w	sl, sl, #1
 800cb08:	9304      	str	r3, [sp, #16]
 800cb0a:	9307      	str	r3, [sp, #28]
 800cb0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb10:	931a      	str	r3, [sp, #104]	; 0x68
 800cb12:	4654      	mov	r4, sl
 800cb14:	2205      	movs	r2, #5
 800cb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb1a:	4858      	ldr	r0, [pc, #352]	; (800cc7c <_vfiprintf_r+0x24c>)
 800cb1c:	f7f3 fb70 	bl	8000200 <memchr>
 800cb20:	9a04      	ldr	r2, [sp, #16]
 800cb22:	b9d8      	cbnz	r0, 800cb5c <_vfiprintf_r+0x12c>
 800cb24:	06d1      	lsls	r1, r2, #27
 800cb26:	bf44      	itt	mi
 800cb28:	2320      	movmi	r3, #32
 800cb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb2e:	0713      	lsls	r3, r2, #28
 800cb30:	bf44      	itt	mi
 800cb32:	232b      	movmi	r3, #43	; 0x2b
 800cb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb38:	f89a 3000 	ldrb.w	r3, [sl]
 800cb3c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb3e:	d015      	beq.n	800cb6c <_vfiprintf_r+0x13c>
 800cb40:	9a07      	ldr	r2, [sp, #28]
 800cb42:	4654      	mov	r4, sl
 800cb44:	2000      	movs	r0, #0
 800cb46:	f04f 0c0a 	mov.w	ip, #10
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb50:	3b30      	subs	r3, #48	; 0x30
 800cb52:	2b09      	cmp	r3, #9
 800cb54:	d94e      	bls.n	800cbf4 <_vfiprintf_r+0x1c4>
 800cb56:	b1b0      	cbz	r0, 800cb86 <_vfiprintf_r+0x156>
 800cb58:	9207      	str	r2, [sp, #28]
 800cb5a:	e014      	b.n	800cb86 <_vfiprintf_r+0x156>
 800cb5c:	eba0 0308 	sub.w	r3, r0, r8
 800cb60:	fa09 f303 	lsl.w	r3, r9, r3
 800cb64:	4313      	orrs	r3, r2
 800cb66:	9304      	str	r3, [sp, #16]
 800cb68:	46a2      	mov	sl, r4
 800cb6a:	e7d2      	b.n	800cb12 <_vfiprintf_r+0xe2>
 800cb6c:	9b03      	ldr	r3, [sp, #12]
 800cb6e:	1d19      	adds	r1, r3, #4
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	9103      	str	r1, [sp, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bfbb      	ittet	lt
 800cb78:	425b      	neglt	r3, r3
 800cb7a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb7e:	9307      	strge	r3, [sp, #28]
 800cb80:	9307      	strlt	r3, [sp, #28]
 800cb82:	bfb8      	it	lt
 800cb84:	9204      	strlt	r2, [sp, #16]
 800cb86:	7823      	ldrb	r3, [r4, #0]
 800cb88:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8a:	d10c      	bne.n	800cba6 <_vfiprintf_r+0x176>
 800cb8c:	7863      	ldrb	r3, [r4, #1]
 800cb8e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb90:	d135      	bne.n	800cbfe <_vfiprintf_r+0x1ce>
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	1d1a      	adds	r2, r3, #4
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	9203      	str	r2, [sp, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bfb8      	it	lt
 800cb9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cba2:	3402      	adds	r4, #2
 800cba4:	9305      	str	r3, [sp, #20]
 800cba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc8c <_vfiprintf_r+0x25c>
 800cbaa:	7821      	ldrb	r1, [r4, #0]
 800cbac:	2203      	movs	r2, #3
 800cbae:	4650      	mov	r0, sl
 800cbb0:	f7f3 fb26 	bl	8000200 <memchr>
 800cbb4:	b140      	cbz	r0, 800cbc8 <_vfiprintf_r+0x198>
 800cbb6:	2340      	movs	r3, #64	; 0x40
 800cbb8:	eba0 000a 	sub.w	r0, r0, sl
 800cbbc:	fa03 f000 	lsl.w	r0, r3, r0
 800cbc0:	9b04      	ldr	r3, [sp, #16]
 800cbc2:	4303      	orrs	r3, r0
 800cbc4:	3401      	adds	r4, #1
 800cbc6:	9304      	str	r3, [sp, #16]
 800cbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbcc:	482c      	ldr	r0, [pc, #176]	; (800cc80 <_vfiprintf_r+0x250>)
 800cbce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbd2:	2206      	movs	r2, #6
 800cbd4:	f7f3 fb14 	bl	8000200 <memchr>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d03f      	beq.n	800cc5c <_vfiprintf_r+0x22c>
 800cbdc:	4b29      	ldr	r3, [pc, #164]	; (800cc84 <_vfiprintf_r+0x254>)
 800cbde:	bb1b      	cbnz	r3, 800cc28 <_vfiprintf_r+0x1f8>
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	3307      	adds	r3, #7
 800cbe4:	f023 0307 	bic.w	r3, r3, #7
 800cbe8:	3308      	adds	r3, #8
 800cbea:	9303      	str	r3, [sp, #12]
 800cbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbee:	443b      	add	r3, r7
 800cbf0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbf2:	e767      	b.n	800cac4 <_vfiprintf_r+0x94>
 800cbf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	e7a5      	b.n	800cb4a <_vfiprintf_r+0x11a>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	3401      	adds	r4, #1
 800cc02:	9305      	str	r3, [sp, #20]
 800cc04:	4619      	mov	r1, r3
 800cc06:	f04f 0c0a 	mov.w	ip, #10
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc10:	3a30      	subs	r2, #48	; 0x30
 800cc12:	2a09      	cmp	r2, #9
 800cc14:	d903      	bls.n	800cc1e <_vfiprintf_r+0x1ee>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0c5      	beq.n	800cba6 <_vfiprintf_r+0x176>
 800cc1a:	9105      	str	r1, [sp, #20]
 800cc1c:	e7c3      	b.n	800cba6 <_vfiprintf_r+0x176>
 800cc1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc22:	4604      	mov	r4, r0
 800cc24:	2301      	movs	r3, #1
 800cc26:	e7f0      	b.n	800cc0a <_vfiprintf_r+0x1da>
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4b16      	ldr	r3, [pc, #88]	; (800cc88 <_vfiprintf_r+0x258>)
 800cc30:	a904      	add	r1, sp, #16
 800cc32:	4630      	mov	r0, r6
 800cc34:	f7fd fb0e 	bl	800a254 <_printf_float>
 800cc38:	4607      	mov	r7, r0
 800cc3a:	1c78      	adds	r0, r7, #1
 800cc3c:	d1d6      	bne.n	800cbec <_vfiprintf_r+0x1bc>
 800cc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc40:	07d9      	lsls	r1, r3, #31
 800cc42:	d405      	bmi.n	800cc50 <_vfiprintf_r+0x220>
 800cc44:	89ab      	ldrh	r3, [r5, #12]
 800cc46:	059a      	lsls	r2, r3, #22
 800cc48:	d402      	bmi.n	800cc50 <_vfiprintf_r+0x220>
 800cc4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc4c:	f7ff f874 	bl	800bd38 <__retarget_lock_release_recursive>
 800cc50:	89ab      	ldrh	r3, [r5, #12]
 800cc52:	065b      	lsls	r3, r3, #25
 800cc54:	f53f af12 	bmi.w	800ca7c <_vfiprintf_r+0x4c>
 800cc58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc5a:	e711      	b.n	800ca80 <_vfiprintf_r+0x50>
 800cc5c:	ab03      	add	r3, sp, #12
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	462a      	mov	r2, r5
 800cc62:	4b09      	ldr	r3, [pc, #36]	; (800cc88 <_vfiprintf_r+0x258>)
 800cc64:	a904      	add	r1, sp, #16
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7fd fd98 	bl	800a79c <_printf_i>
 800cc6c:	e7e4      	b.n	800cc38 <_vfiprintf_r+0x208>
 800cc6e:	bf00      	nop
 800cc70:	0800d1cc 	.word	0x0800d1cc
 800cc74:	0800d1ec 	.word	0x0800d1ec
 800cc78:	0800d1ac 	.word	0x0800d1ac
 800cc7c:	0800d364 	.word	0x0800d364
 800cc80:	0800d36e 	.word	0x0800d36e
 800cc84:	0800a255 	.word	0x0800a255
 800cc88:	0800ca0b 	.word	0x0800ca0b
 800cc8c:	0800d36a 	.word	0x0800d36a

0800cc90 <_sbrk_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d06      	ldr	r5, [pc, #24]	; (800ccac <_sbrk_r+0x1c>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f4 ffd6 	bl	8001c4c <_sbrk>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_sbrk_r+0x1a>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_sbrk_r+0x1a>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20002214 	.word	0x20002214

0800ccb0 <__sread>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	f000 f92c 	bl	800cf14 <_read_r>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	bfab      	itete	ge
 800ccc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccc2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccc4:	181b      	addge	r3, r3, r0
 800ccc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccca:	bfac      	ite	ge
 800cccc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccce:	81a3      	strhlt	r3, [r4, #12]
 800ccd0:	bd10      	pop	{r4, pc}

0800ccd2 <__swrite>:
 800ccd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd6:	461f      	mov	r7, r3
 800ccd8:	898b      	ldrh	r3, [r1, #12]
 800ccda:	05db      	lsls	r3, r3, #23
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460c      	mov	r4, r1
 800cce0:	4616      	mov	r6, r2
 800cce2:	d505      	bpl.n	800ccf0 <__swrite+0x1e>
 800cce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce8:	2302      	movs	r3, #2
 800ccea:	2200      	movs	r2, #0
 800ccec:	f000 f898 	bl	800ce20 <_lseek_r>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	463b      	mov	r3, r7
 800cd00:	4628      	mov	r0, r5
 800cd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	f000 b817 	b.w	800cd38 <_write_r>

0800cd0a <__sseek>:
 800cd0a:	b510      	push	{r4, lr}
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd12:	f000 f885 	bl	800ce20 <_lseek_r>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	bf15      	itete	ne
 800cd1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd26:	81a3      	strheq	r3, [r4, #12]
 800cd28:	bf18      	it	ne
 800cd2a:	81a3      	strhne	r3, [r4, #12]
 800cd2c:	bd10      	pop	{r4, pc}

0800cd2e <__sclose>:
 800cd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd32:	f000 b831 	b.w	800cd98 <_close_r>
	...

0800cd38 <_write_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d07      	ldr	r5, [pc, #28]	; (800cd58 <_write_r+0x20>)
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4608      	mov	r0, r1
 800cd40:	4611      	mov	r1, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	602a      	str	r2, [r5, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f7f4 ff2f 	bl	8001baa <_write>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_write_r+0x1e>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_write_r+0x1e>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	20002214 	.word	0x20002214

0800cd5c <__assert_func>:
 800cd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd5e:	4614      	mov	r4, r2
 800cd60:	461a      	mov	r2, r3
 800cd62:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <__assert_func+0x2c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4605      	mov	r5, r0
 800cd68:	68d8      	ldr	r0, [r3, #12]
 800cd6a:	b14c      	cbz	r4, 800cd80 <__assert_func+0x24>
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <__assert_func+0x30>)
 800cd6e:	9100      	str	r1, [sp, #0]
 800cd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd74:	4906      	ldr	r1, [pc, #24]	; (800cd90 <__assert_func+0x34>)
 800cd76:	462b      	mov	r3, r5
 800cd78:	f000 f81e 	bl	800cdb8 <fiprintf>
 800cd7c:	f000 f8e9 	bl	800cf52 <abort>
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <__assert_func+0x38>)
 800cd82:	461c      	mov	r4, r3
 800cd84:	e7f3      	b.n	800cd6e <__assert_func+0x12>
 800cd86:	bf00      	nop
 800cd88:	200000fc 	.word	0x200000fc
 800cd8c:	0800d375 	.word	0x0800d375
 800cd90:	0800d382 	.word	0x0800d382
 800cd94:	0800d3b0 	.word	0x0800d3b0

0800cd98 <_close_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d06      	ldr	r5, [pc, #24]	; (800cdb4 <_close_r+0x1c>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	602b      	str	r3, [r5, #0]
 800cda4:	f7f4 ff1d 	bl	8001be2 <_close>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_close_r+0x1a>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_close_r+0x1a>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	20002214 	.word	0x20002214

0800cdb8 <fiprintf>:
 800cdb8:	b40e      	push	{r1, r2, r3}
 800cdba:	b503      	push	{r0, r1, lr}
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	ab03      	add	r3, sp, #12
 800cdc0:	4805      	ldr	r0, [pc, #20]	; (800cdd8 <fiprintf+0x20>)
 800cdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc6:	6800      	ldr	r0, [r0, #0]
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	f7ff fe31 	bl	800ca30 <_vfiprintf_r>
 800cdce:	b002      	add	sp, #8
 800cdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd4:	b003      	add	sp, #12
 800cdd6:	4770      	bx	lr
 800cdd8:	200000fc 	.word	0x200000fc

0800cddc <_fstat_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d07      	ldr	r5, [pc, #28]	; (800cdfc <_fstat_r+0x20>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	4611      	mov	r1, r2
 800cde8:	602b      	str	r3, [r5, #0]
 800cdea:	f7f4 ff06 	bl	8001bfa <_fstat>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	d102      	bne.n	800cdf8 <_fstat_r+0x1c>
 800cdf2:	682b      	ldr	r3, [r5, #0]
 800cdf4:	b103      	cbz	r3, 800cdf8 <_fstat_r+0x1c>
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	bd38      	pop	{r3, r4, r5, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20002214 	.word	0x20002214

0800ce00 <_isatty_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d06      	ldr	r5, [pc, #24]	; (800ce1c <_isatty_r+0x1c>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f4 ff05 	bl	8001c1a <_isatty>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_isatty_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_isatty_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	20002214 	.word	0x20002214

0800ce20 <_lseek_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d07      	ldr	r5, [pc, #28]	; (800ce40 <_lseek_r+0x20>)
 800ce24:	4604      	mov	r4, r0
 800ce26:	4608      	mov	r0, r1
 800ce28:	4611      	mov	r1, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	602a      	str	r2, [r5, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f7f4 fefe 	bl	8001c30 <_lseek>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_lseek_r+0x1e>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_lseek_r+0x1e>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20002214 	.word	0x20002214

0800ce44 <__ascii_mbtowc>:
 800ce44:	b082      	sub	sp, #8
 800ce46:	b901      	cbnz	r1, 800ce4a <__ascii_mbtowc+0x6>
 800ce48:	a901      	add	r1, sp, #4
 800ce4a:	b142      	cbz	r2, 800ce5e <__ascii_mbtowc+0x1a>
 800ce4c:	b14b      	cbz	r3, 800ce62 <__ascii_mbtowc+0x1e>
 800ce4e:	7813      	ldrb	r3, [r2, #0]
 800ce50:	600b      	str	r3, [r1, #0]
 800ce52:	7812      	ldrb	r2, [r2, #0]
 800ce54:	1e10      	subs	r0, r2, #0
 800ce56:	bf18      	it	ne
 800ce58:	2001      	movne	r0, #1
 800ce5a:	b002      	add	sp, #8
 800ce5c:	4770      	bx	lr
 800ce5e:	4610      	mov	r0, r2
 800ce60:	e7fb      	b.n	800ce5a <__ascii_mbtowc+0x16>
 800ce62:	f06f 0001 	mvn.w	r0, #1
 800ce66:	e7f8      	b.n	800ce5a <__ascii_mbtowc+0x16>

0800ce68 <memmove>:
 800ce68:	4288      	cmp	r0, r1
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	eb01 0402 	add.w	r4, r1, r2
 800ce70:	d902      	bls.n	800ce78 <memmove+0x10>
 800ce72:	4284      	cmp	r4, r0
 800ce74:	4623      	mov	r3, r4
 800ce76:	d807      	bhi.n	800ce88 <memmove+0x20>
 800ce78:	1e43      	subs	r3, r0, #1
 800ce7a:	42a1      	cmp	r1, r4
 800ce7c:	d008      	beq.n	800ce90 <memmove+0x28>
 800ce7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce86:	e7f8      	b.n	800ce7a <memmove+0x12>
 800ce88:	4402      	add	r2, r0
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	428a      	cmp	r2, r1
 800ce8e:	d100      	bne.n	800ce92 <memmove+0x2a>
 800ce90:	bd10      	pop	{r4, pc}
 800ce92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce9a:	e7f7      	b.n	800ce8c <memmove+0x24>

0800ce9c <__malloc_lock>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	; (800cea4 <__malloc_lock+0x8>)
 800ce9e:	f7fe bf4a 	b.w	800bd36 <__retarget_lock_acquire_recursive>
 800cea2:	bf00      	nop
 800cea4:	20002208 	.word	0x20002208

0800cea8 <__malloc_unlock>:
 800cea8:	4801      	ldr	r0, [pc, #4]	; (800ceb0 <__malloc_unlock+0x8>)
 800ceaa:	f7fe bf45 	b.w	800bd38 <__retarget_lock_release_recursive>
 800ceae:	bf00      	nop
 800ceb0:	20002208 	.word	0x20002208

0800ceb4 <_realloc_r>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	4680      	mov	r8, r0
 800ceba:	4614      	mov	r4, r2
 800cebc:	460e      	mov	r6, r1
 800cebe:	b921      	cbnz	r1, 800ceca <_realloc_r+0x16>
 800cec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec4:	4611      	mov	r1, r2
 800cec6:	f7ff bbb9 	b.w	800c63c <_malloc_r>
 800ceca:	b92a      	cbnz	r2, 800ced8 <_realloc_r+0x24>
 800cecc:	f7ff fb4a 	bl	800c564 <_free_r>
 800ced0:	4625      	mov	r5, r4
 800ced2:	4628      	mov	r0, r5
 800ced4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced8:	f000 f842 	bl	800cf60 <_malloc_usable_size_r>
 800cedc:	4284      	cmp	r4, r0
 800cede:	4607      	mov	r7, r0
 800cee0:	d802      	bhi.n	800cee8 <_realloc_r+0x34>
 800cee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cee6:	d812      	bhi.n	800cf0e <_realloc_r+0x5a>
 800cee8:	4621      	mov	r1, r4
 800ceea:	4640      	mov	r0, r8
 800ceec:	f7ff fba6 	bl	800c63c <_malloc_r>
 800cef0:	4605      	mov	r5, r0
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d0ed      	beq.n	800ced2 <_realloc_r+0x1e>
 800cef6:	42bc      	cmp	r4, r7
 800cef8:	4622      	mov	r2, r4
 800cefa:	4631      	mov	r1, r6
 800cefc:	bf28      	it	cs
 800cefe:	463a      	movcs	r2, r7
 800cf00:	f7fe ff88 	bl	800be14 <memcpy>
 800cf04:	4631      	mov	r1, r6
 800cf06:	4640      	mov	r0, r8
 800cf08:	f7ff fb2c 	bl	800c564 <_free_r>
 800cf0c:	e7e1      	b.n	800ced2 <_realloc_r+0x1e>
 800cf0e:	4635      	mov	r5, r6
 800cf10:	e7df      	b.n	800ced2 <_realloc_r+0x1e>
	...

0800cf14 <_read_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4d07      	ldr	r5, [pc, #28]	; (800cf34 <_read_r+0x20>)
 800cf18:	4604      	mov	r4, r0
 800cf1a:	4608      	mov	r0, r1
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	2200      	movs	r2, #0
 800cf20:	602a      	str	r2, [r5, #0]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f7f4 fe24 	bl	8001b70 <_read>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_read_r+0x1e>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_read_r+0x1e>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	20002214 	.word	0x20002214

0800cf38 <__ascii_wctomb>:
 800cf38:	b149      	cbz	r1, 800cf4e <__ascii_wctomb+0x16>
 800cf3a:	2aff      	cmp	r2, #255	; 0xff
 800cf3c:	bf85      	ittet	hi
 800cf3e:	238a      	movhi	r3, #138	; 0x8a
 800cf40:	6003      	strhi	r3, [r0, #0]
 800cf42:	700a      	strbls	r2, [r1, #0]
 800cf44:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf48:	bf98      	it	ls
 800cf4a:	2001      	movls	r0, #1
 800cf4c:	4770      	bx	lr
 800cf4e:	4608      	mov	r0, r1
 800cf50:	4770      	bx	lr

0800cf52 <abort>:
 800cf52:	b508      	push	{r3, lr}
 800cf54:	2006      	movs	r0, #6
 800cf56:	f000 f833 	bl	800cfc0 <raise>
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	f7f4 fdfe 	bl	8001b5c <_exit>

0800cf60 <_malloc_usable_size_r>:
 800cf60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf64:	1f18      	subs	r0, r3, #4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfbc      	itt	lt
 800cf6a:	580b      	ldrlt	r3, [r1, r0]
 800cf6c:	18c0      	addlt	r0, r0, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_raise_r>:
 800cf70:	291f      	cmp	r1, #31
 800cf72:	b538      	push	{r3, r4, r5, lr}
 800cf74:	4604      	mov	r4, r0
 800cf76:	460d      	mov	r5, r1
 800cf78:	d904      	bls.n	800cf84 <_raise_r+0x14>
 800cf7a:	2316      	movs	r3, #22
 800cf7c:	6003      	str	r3, [r0, #0]
 800cf7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf86:	b112      	cbz	r2, 800cf8e <_raise_r+0x1e>
 800cf88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf8c:	b94b      	cbnz	r3, 800cfa2 <_raise_r+0x32>
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 f830 	bl	800cff4 <_getpid_r>
 800cf94:	462a      	mov	r2, r5
 800cf96:	4601      	mov	r1, r0
 800cf98:	4620      	mov	r0, r4
 800cf9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf9e:	f000 b817 	b.w	800cfd0 <_kill_r>
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d00a      	beq.n	800cfbc <_raise_r+0x4c>
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	d103      	bne.n	800cfb2 <_raise_r+0x42>
 800cfaa:	2316      	movs	r3, #22
 800cfac:	6003      	str	r3, [r0, #0]
 800cfae:	2001      	movs	r0, #1
 800cfb0:	e7e7      	b.n	800cf82 <_raise_r+0x12>
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfb8:	4628      	mov	r0, r5
 800cfba:	4798      	blx	r3
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	e7e0      	b.n	800cf82 <_raise_r+0x12>

0800cfc0 <raise>:
 800cfc0:	4b02      	ldr	r3, [pc, #8]	; (800cfcc <raise+0xc>)
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	6818      	ldr	r0, [r3, #0]
 800cfc6:	f7ff bfd3 	b.w	800cf70 <_raise_r>
 800cfca:	bf00      	nop
 800cfcc:	200000fc 	.word	0x200000fc

0800cfd0 <_kill_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d07      	ldr	r5, [pc, #28]	; (800cff0 <_kill_r+0x20>)
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	4608      	mov	r0, r1
 800cfda:	4611      	mov	r1, r2
 800cfdc:	602b      	str	r3, [r5, #0]
 800cfde:	f7f4 fdad 	bl	8001b3c <_kill>
 800cfe2:	1c43      	adds	r3, r0, #1
 800cfe4:	d102      	bne.n	800cfec <_kill_r+0x1c>
 800cfe6:	682b      	ldr	r3, [r5, #0]
 800cfe8:	b103      	cbz	r3, 800cfec <_kill_r+0x1c>
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	bd38      	pop	{r3, r4, r5, pc}
 800cfee:	bf00      	nop
 800cff0:	20002214 	.word	0x20002214

0800cff4 <_getpid_r>:
 800cff4:	f7f4 bd9a 	b.w	8001b2c <_getpid>

0800cff8 <_init>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	bf00      	nop
 800cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffe:	bc08      	pop	{r3}
 800d000:	469e      	mov	lr, r3
 800d002:	4770      	bx	lr

0800d004 <_fini>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	bf00      	nop
 800d008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00a:	bc08      	pop	{r3}
 800d00c:	469e      	mov	lr, r3
 800d00e:	4770      	bx	lr
